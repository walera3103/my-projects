
projekt_zalic_lab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000859c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001698  0800876c  0800876c  0000976c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e04  08009e04  0000b1e0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009e04  08009e04  0000ae04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e0c  08009e0c  0000b1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e0c  08009e0c  0000ae0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009e10  08009e10  0000ae10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a0  20000000  08009e14  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200000a0  08009eb4  0000b0a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000140  08009f54  0000b140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000d5c  200001e0  08009ff4  0000b1e0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20000f3c  08009ff4  0000bf3c  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0000b1e0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001bdc1  00000000  00000000  0000b210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003c84  00000000  00000000  00026fd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001758  00000000  00000000  0002ac58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000121d  00000000  00000000  0002c3b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0004809f  00000000  00000000  0002d5cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001f469  00000000  00000000  0007566c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000fb03c  00000000  00000000  00094ad5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0018fb11  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000067fc  00000000  00000000  0018fb54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000056  00000000  00000000  00196350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008754 	.word	0x08008754

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	08008754 	.word	0x08008754

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80005f0:	4b1f      	ldr	r3, [pc, #124]	@ (8000670 <MX_ETH_Init+0x84>)
 80005f2:	4a20      	ldr	r2, [pc, #128]	@ (8000674 <MX_ETH_Init+0x88>)
 80005f4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80005f6:	4b20      	ldr	r3, [pc, #128]	@ (8000678 <MX_ETH_Init+0x8c>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80005fc:	4b1e      	ldr	r3, [pc, #120]	@ (8000678 <MX_ETH_Init+0x8c>)
 80005fe:	2280      	movs	r2, #128	@ 0x80
 8000600:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000602:	4b1d      	ldr	r3, [pc, #116]	@ (8000678 <MX_ETH_Init+0x8c>)
 8000604:	22e1      	movs	r2, #225	@ 0xe1
 8000606:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000608:	4b1b      	ldr	r3, [pc, #108]	@ (8000678 <MX_ETH_Init+0x8c>)
 800060a:	2200      	movs	r2, #0
 800060c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800060e:	4b1a      	ldr	r3, [pc, #104]	@ (8000678 <MX_ETH_Init+0x8c>)
 8000610:	2200      	movs	r2, #0
 8000612:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000614:	4b18      	ldr	r3, [pc, #96]	@ (8000678 <MX_ETH_Init+0x8c>)
 8000616:	2200      	movs	r2, #0
 8000618:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800061a:	4b15      	ldr	r3, [pc, #84]	@ (8000670 <MX_ETH_Init+0x84>)
 800061c:	4a16      	ldr	r2, [pc, #88]	@ (8000678 <MX_ETH_Init+0x8c>)
 800061e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000620:	4b13      	ldr	r3, [pc, #76]	@ (8000670 <MX_ETH_Init+0x84>)
 8000622:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000626:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000628:	4b11      	ldr	r3, [pc, #68]	@ (8000670 <MX_ETH_Init+0x84>)
 800062a:	4a14      	ldr	r2, [pc, #80]	@ (800067c <MX_ETH_Init+0x90>)
 800062c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800062e:	4b10      	ldr	r3, [pc, #64]	@ (8000670 <MX_ETH_Init+0x84>)
 8000630:	4a13      	ldr	r2, [pc, #76]	@ (8000680 <MX_ETH_Init+0x94>)
 8000632:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000634:	4b0e      	ldr	r3, [pc, #56]	@ (8000670 <MX_ETH_Init+0x84>)
 8000636:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800063a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800063c:	480c      	ldr	r0, [pc, #48]	@ (8000670 <MX_ETH_Init+0x84>)
 800063e:	f002 fd4b 	bl	80030d8 <HAL_ETH_Init>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000648:	f001 fe4c 	bl	80022e4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800064c:	2238      	movs	r2, #56	@ 0x38
 800064e:	2100      	movs	r1, #0
 8000650:	480c      	ldr	r0, [pc, #48]	@ (8000684 <MX_ETH_Init+0x98>)
 8000652:	f007 fc1b 	bl	8007e8c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000656:	4b0b      	ldr	r3, [pc, #44]	@ (8000684 <MX_ETH_Init+0x98>)
 8000658:	2221      	movs	r2, #33	@ 0x21
 800065a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800065c:	4b09      	ldr	r3, [pc, #36]	@ (8000684 <MX_ETH_Init+0x98>)
 800065e:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000662:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000664:	4b07      	ldr	r3, [pc, #28]	@ (8000684 <MX_ETH_Init+0x98>)
 8000666:	2200      	movs	r2, #0
 8000668:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	20000234 	.word	0x20000234
 8000674:	40028000 	.word	0x40028000
 8000678:	200002e4 	.word	0x200002e4
 800067c:	20000140 	.word	0x20000140
 8000680:	200000a0 	.word	0x200000a0
 8000684:	200001fc 	.word	0x200001fc

08000688 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b08e      	sub	sp, #56	@ 0x38
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000690:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a4e      	ldr	r2, [pc, #312]	@ (80007e0 <HAL_ETH_MspInit+0x158>)
 80006a6:	4293      	cmp	r3, r2
 80006a8:	f040 8096 	bne.w	80007d8 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80006ac:	4b4d      	ldr	r3, [pc, #308]	@ (80007e4 <HAL_ETH_MspInit+0x15c>)
 80006ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b0:	4a4c      	ldr	r2, [pc, #304]	@ (80007e4 <HAL_ETH_MspInit+0x15c>)
 80006b2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80006b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80006b8:	4b4a      	ldr	r3, [pc, #296]	@ (80007e4 <HAL_ETH_MspInit+0x15c>)
 80006ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80006c0:	623b      	str	r3, [r7, #32]
 80006c2:	6a3b      	ldr	r3, [r7, #32]
 80006c4:	4b47      	ldr	r3, [pc, #284]	@ (80007e4 <HAL_ETH_MspInit+0x15c>)
 80006c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c8:	4a46      	ldr	r2, [pc, #280]	@ (80007e4 <HAL_ETH_MspInit+0x15c>)
 80006ca:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80006ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80006d0:	4b44      	ldr	r3, [pc, #272]	@ (80007e4 <HAL_ETH_MspInit+0x15c>)
 80006d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80006d8:	61fb      	str	r3, [r7, #28]
 80006da:	69fb      	ldr	r3, [r7, #28]
 80006dc:	4b41      	ldr	r3, [pc, #260]	@ (80007e4 <HAL_ETH_MspInit+0x15c>)
 80006de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e0:	4a40      	ldr	r2, [pc, #256]	@ (80007e4 <HAL_ETH_MspInit+0x15c>)
 80006e2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80006e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80006e8:	4b3e      	ldr	r3, [pc, #248]	@ (80007e4 <HAL_ETH_MspInit+0x15c>)
 80006ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80006f0:	61bb      	str	r3, [r7, #24]
 80006f2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006f4:	4b3b      	ldr	r3, [pc, #236]	@ (80007e4 <HAL_ETH_MspInit+0x15c>)
 80006f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f8:	4a3a      	ldr	r2, [pc, #232]	@ (80007e4 <HAL_ETH_MspInit+0x15c>)
 80006fa:	f043 0304 	orr.w	r3, r3, #4
 80006fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8000700:	4b38      	ldr	r3, [pc, #224]	@ (80007e4 <HAL_ETH_MspInit+0x15c>)
 8000702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000704:	f003 0304 	and.w	r3, r3, #4
 8000708:	617b      	str	r3, [r7, #20]
 800070a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800070c:	4b35      	ldr	r3, [pc, #212]	@ (80007e4 <HAL_ETH_MspInit+0x15c>)
 800070e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000710:	4a34      	ldr	r2, [pc, #208]	@ (80007e4 <HAL_ETH_MspInit+0x15c>)
 8000712:	f043 0301 	orr.w	r3, r3, #1
 8000716:	6313      	str	r3, [r2, #48]	@ 0x30
 8000718:	4b32      	ldr	r3, [pc, #200]	@ (80007e4 <HAL_ETH_MspInit+0x15c>)
 800071a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071c:	f003 0301 	and.w	r3, r3, #1
 8000720:	613b      	str	r3, [r7, #16]
 8000722:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000724:	4b2f      	ldr	r3, [pc, #188]	@ (80007e4 <HAL_ETH_MspInit+0x15c>)
 8000726:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000728:	4a2e      	ldr	r2, [pc, #184]	@ (80007e4 <HAL_ETH_MspInit+0x15c>)
 800072a:	f043 0302 	orr.w	r3, r3, #2
 800072e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000730:	4b2c      	ldr	r3, [pc, #176]	@ (80007e4 <HAL_ETH_MspInit+0x15c>)
 8000732:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000734:	f003 0302 	and.w	r3, r3, #2
 8000738:	60fb      	str	r3, [r7, #12]
 800073a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800073c:	4b29      	ldr	r3, [pc, #164]	@ (80007e4 <HAL_ETH_MspInit+0x15c>)
 800073e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000740:	4a28      	ldr	r2, [pc, #160]	@ (80007e4 <HAL_ETH_MspInit+0x15c>)
 8000742:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000746:	6313      	str	r3, [r2, #48]	@ 0x30
 8000748:	4b26      	ldr	r3, [pc, #152]	@ (80007e4 <HAL_ETH_MspInit+0x15c>)
 800074a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000750:	60bb      	str	r3, [r7, #8]
 8000752:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000754:	2332      	movs	r3, #50	@ 0x32
 8000756:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000758:	2302      	movs	r3, #2
 800075a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075c:	2300      	movs	r3, #0
 800075e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000760:	2303      	movs	r3, #3
 8000762:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000764:	230b      	movs	r3, #11
 8000766:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000768:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800076c:	4619      	mov	r1, r3
 800076e:	481e      	ldr	r0, [pc, #120]	@ (80007e8 <HAL_ETH_MspInit+0x160>)
 8000770:	f003 f800 	bl	8003774 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000774:	2386      	movs	r3, #134	@ 0x86
 8000776:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000778:	2302      	movs	r3, #2
 800077a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000780:	2303      	movs	r3, #3
 8000782:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000784:	230b      	movs	r3, #11
 8000786:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000788:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800078c:	4619      	mov	r1, r3
 800078e:	4817      	ldr	r0, [pc, #92]	@ (80007ec <HAL_ETH_MspInit+0x164>)
 8000790:	f002 fff0 	bl	8003774 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000794:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000798:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800079a:	2302      	movs	r3, #2
 800079c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	2300      	movs	r3, #0
 80007a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007a2:	2303      	movs	r3, #3
 80007a4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007a6:	230b      	movs	r3, #11
 80007a8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80007aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007ae:	4619      	mov	r1, r3
 80007b0:	480f      	ldr	r0, [pc, #60]	@ (80007f0 <HAL_ETH_MspInit+0x168>)
 80007b2:	f002 ffdf 	bl	8003774 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80007b6:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80007ba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007bc:	2302      	movs	r3, #2
 80007be:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c0:	2300      	movs	r3, #0
 80007c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007c4:	2303      	movs	r3, #3
 80007c6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007c8:	230b      	movs	r3, #11
 80007ca:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007d0:	4619      	mov	r1, r3
 80007d2:	4808      	ldr	r0, [pc, #32]	@ (80007f4 <HAL_ETH_MspInit+0x16c>)
 80007d4:	f002 ffce 	bl	8003774 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80007d8:	bf00      	nop
 80007da:	3738      	adds	r7, #56	@ 0x38
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40028000 	.word	0x40028000
 80007e4:	40023800 	.word	0x40023800
 80007e8:	40020800 	.word	0x40020800
 80007ec:	40020000 	.word	0x40020000
 80007f0:	40020400 	.word	0x40020400
 80007f4:	40021800 	.word	0x40021800

080007f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b08e      	sub	sp, #56	@ 0x38
 80007fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	605a      	str	r2, [r3, #4]
 8000808:	609a      	str	r2, [r3, #8]
 800080a:	60da      	str	r2, [r3, #12]
 800080c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800080e:	4b6d      	ldr	r3, [pc, #436]	@ (80009c4 <MX_GPIO_Init+0x1cc>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000812:	4a6c      	ldr	r2, [pc, #432]	@ (80009c4 <MX_GPIO_Init+0x1cc>)
 8000814:	f043 0310 	orr.w	r3, r3, #16
 8000818:	6313      	str	r3, [r2, #48]	@ 0x30
 800081a:	4b6a      	ldr	r3, [pc, #424]	@ (80009c4 <MX_GPIO_Init+0x1cc>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	f003 0310 	and.w	r3, r3, #16
 8000822:	623b      	str	r3, [r7, #32]
 8000824:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000826:	4b67      	ldr	r3, [pc, #412]	@ (80009c4 <MX_GPIO_Init+0x1cc>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	4a66      	ldr	r2, [pc, #408]	@ (80009c4 <MX_GPIO_Init+0x1cc>)
 800082c:	f043 0304 	orr.w	r3, r3, #4
 8000830:	6313      	str	r3, [r2, #48]	@ 0x30
 8000832:	4b64      	ldr	r3, [pc, #400]	@ (80009c4 <MX_GPIO_Init+0x1cc>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000836:	f003 0304 	and.w	r3, r3, #4
 800083a:	61fb      	str	r3, [r7, #28]
 800083c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800083e:	4b61      	ldr	r3, [pc, #388]	@ (80009c4 <MX_GPIO_Init+0x1cc>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	4a60      	ldr	r2, [pc, #384]	@ (80009c4 <MX_GPIO_Init+0x1cc>)
 8000844:	f043 0320 	orr.w	r3, r3, #32
 8000848:	6313      	str	r3, [r2, #48]	@ 0x30
 800084a:	4b5e      	ldr	r3, [pc, #376]	@ (80009c4 <MX_GPIO_Init+0x1cc>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	f003 0320 	and.w	r3, r3, #32
 8000852:	61bb      	str	r3, [r7, #24]
 8000854:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000856:	4b5b      	ldr	r3, [pc, #364]	@ (80009c4 <MX_GPIO_Init+0x1cc>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	4a5a      	ldr	r2, [pc, #360]	@ (80009c4 <MX_GPIO_Init+0x1cc>)
 800085c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000860:	6313      	str	r3, [r2, #48]	@ 0x30
 8000862:	4b58      	ldr	r3, [pc, #352]	@ (80009c4 <MX_GPIO_Init+0x1cc>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800086a:	617b      	str	r3, [r7, #20]
 800086c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086e:	4b55      	ldr	r3, [pc, #340]	@ (80009c4 <MX_GPIO_Init+0x1cc>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	4a54      	ldr	r2, [pc, #336]	@ (80009c4 <MX_GPIO_Init+0x1cc>)
 8000874:	f043 0301 	orr.w	r3, r3, #1
 8000878:	6313      	str	r3, [r2, #48]	@ 0x30
 800087a:	4b52      	ldr	r3, [pc, #328]	@ (80009c4 <MX_GPIO_Init+0x1cc>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	613b      	str	r3, [r7, #16]
 8000884:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000886:	4b4f      	ldr	r3, [pc, #316]	@ (80009c4 <MX_GPIO_Init+0x1cc>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	4a4e      	ldr	r2, [pc, #312]	@ (80009c4 <MX_GPIO_Init+0x1cc>)
 800088c:	f043 0302 	orr.w	r3, r3, #2
 8000890:	6313      	str	r3, [r2, #48]	@ 0x30
 8000892:	4b4c      	ldr	r3, [pc, #304]	@ (80009c4 <MX_GPIO_Init+0x1cc>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	f003 0302 	and.w	r3, r3, #2
 800089a:	60fb      	str	r3, [r7, #12]
 800089c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800089e:	4b49      	ldr	r3, [pc, #292]	@ (80009c4 <MX_GPIO_Init+0x1cc>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	4a48      	ldr	r2, [pc, #288]	@ (80009c4 <MX_GPIO_Init+0x1cc>)
 80008a4:	f043 0308 	orr.w	r3, r3, #8
 80008a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008aa:	4b46      	ldr	r3, [pc, #280]	@ (80009c4 <MX_GPIO_Init+0x1cc>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ae:	f003 0308 	and.w	r3, r3, #8
 80008b2:	60bb      	str	r3, [r7, #8]
 80008b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008b6:	4b43      	ldr	r3, [pc, #268]	@ (80009c4 <MX_GPIO_Init+0x1cc>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ba:	4a42      	ldr	r2, [pc, #264]	@ (80009c4 <MX_GPIO_Init+0x1cc>)
 80008bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008c2:	4b40      	ldr	r3, [pc, #256]	@ (80009c4 <MX_GPIO_Init+0x1cc>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80008ce:	2200      	movs	r2, #0
 80008d0:	217c      	movs	r1, #124	@ 0x7c
 80008d2:	483d      	ldr	r0, [pc, #244]	@ (80009c8 <MX_GPIO_Init+0x1d0>)
 80008d4:	f003 f912 	bl	8003afc <HAL_GPIO_WritePin>
                          |GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_8, GPIO_PIN_RESET);
 80008d8:	2200      	movs	r2, #0
 80008da:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008de:	483b      	ldr	r0, [pc, #236]	@ (80009cc <MX_GPIO_Init+0x1d4>)
 80008e0:	f003 f90c 	bl	8003afc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008e4:	2200      	movs	r2, #0
 80008e6:	f244 0181 	movw	r1, #16513	@ 0x4081
 80008ea:	4839      	ldr	r0, [pc, #228]	@ (80009d0 <MX_GPIO_Init+0x1d8>)
 80008ec:	f003 f906 	bl	8003afc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008f0:	2200      	movs	r2, #0
 80008f2:	2140      	movs	r1, #64	@ 0x40
 80008f4:	4837      	ldr	r0, [pc, #220]	@ (80009d4 <MX_GPIO_Init+0x1dc>)
 80008f6:	f003 f901 	bl	8003afc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80008fa:	237c      	movs	r3, #124	@ 0x7c
 80008fc:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fe:	2301      	movs	r3, #1
 8000900:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000906:	2300      	movs	r3, #0
 8000908:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800090a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800090e:	4619      	mov	r1, r3
 8000910:	482d      	ldr	r0, [pc, #180]	@ (80009c8 <MX_GPIO_Init+0x1d0>)
 8000912:	f002 ff2f 	bl	8003774 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000916:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800091a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800091c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000920:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000926:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800092a:	4619      	mov	r1, r3
 800092c:	482a      	ldr	r0, [pc, #168]	@ (80009d8 <MX_GPIO_Init+0x1e0>)
 800092e:	f002 ff21 	bl	8003774 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000932:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000936:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000938:	2301      	movs	r3, #1
 800093a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000940:	2300      	movs	r3, #0
 8000942:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000944:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000948:	4619      	mov	r1, r3
 800094a:	4820      	ldr	r0, [pc, #128]	@ (80009cc <MX_GPIO_Init+0x1d4>)
 800094c:	f002 ff12 	bl	8003774 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000950:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000954:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000956:	2301      	movs	r3, #1
 8000958:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095e:	2300      	movs	r3, #0
 8000960:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000962:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000966:	4619      	mov	r1, r3
 8000968:	4819      	ldr	r0, [pc, #100]	@ (80009d0 <MX_GPIO_Init+0x1d8>)
 800096a:	f002 ff03 	bl	8003774 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800096e:	2340      	movs	r3, #64	@ 0x40
 8000970:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000972:	2301      	movs	r3, #1
 8000974:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097a:	2300      	movs	r3, #0
 800097c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800097e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000982:	4619      	mov	r1, r3
 8000984:	4813      	ldr	r0, [pc, #76]	@ (80009d4 <MX_GPIO_Init+0x1dc>)
 8000986:	f002 fef5 	bl	8003774 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800098a:	2380      	movs	r3, #128	@ 0x80
 800098c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800098e:	2300      	movs	r3, #0
 8000990:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000996:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800099a:	4619      	mov	r1, r3
 800099c:	480d      	ldr	r0, [pc, #52]	@ (80009d4 <MX_GPIO_Init+0x1dc>)
 800099e:	f002 fee9 	bl	8003774 <HAL_GPIO_Init>

  /*Configure GPIO pins : MODE_Pin COLOR_SWITCH_Pin ADD_COLOR_Pin SUBTRACT_COLOR_Pin */
  GPIO_InitStruct.Pin = MODE_Pin|COLOR_SWITCH_Pin|ADD_COLOR_Pin|SUBTRACT_COLOR_Pin;
 80009a2:	f44f 53f0 	mov.w	r3, #7680	@ 0x1e00
 80009a6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a8:	2300      	movs	r3, #0
 80009aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009b4:	4619      	mov	r1, r3
 80009b6:	4808      	ldr	r0, [pc, #32]	@ (80009d8 <MX_GPIO_Init+0x1e0>)
 80009b8:	f002 fedc 	bl	8003774 <HAL_GPIO_Init>

}
 80009bc:	bf00      	nop
 80009be:	3738      	adds	r7, #56	@ 0x38
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	40023800 	.word	0x40023800
 80009c8:	40021000 	.word	0x40021000
 80009cc:	40021400 	.word	0x40021400
 80009d0:	40020400 	.word	0x40020400
 80009d4:	40021800 	.word	0x40021800
 80009d8:	40020800 	.word	0x40020800

080009dc <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009e0:	4b1b      	ldr	r3, [pc, #108]	@ (8000a50 <MX_I2C1_Init+0x74>)
 80009e2:	4a1c      	ldr	r2, [pc, #112]	@ (8000a54 <MX_I2C1_Init+0x78>)
 80009e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 80009e6:	4b1a      	ldr	r3, [pc, #104]	@ (8000a50 <MX_I2C1_Init+0x74>)
 80009e8:	4a1b      	ldr	r2, [pc, #108]	@ (8000a58 <MX_I2C1_Init+0x7c>)
 80009ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009ec:	4b18      	ldr	r3, [pc, #96]	@ (8000a50 <MX_I2C1_Init+0x74>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009f2:	4b17      	ldr	r3, [pc, #92]	@ (8000a50 <MX_I2C1_Init+0x74>)
 80009f4:	2201      	movs	r2, #1
 80009f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009f8:	4b15      	ldr	r3, [pc, #84]	@ (8000a50 <MX_I2C1_Init+0x74>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009fe:	4b14      	ldr	r3, [pc, #80]	@ (8000a50 <MX_I2C1_Init+0x74>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a04:	4b12      	ldr	r3, [pc, #72]	@ (8000a50 <MX_I2C1_Init+0x74>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a0a:	4b11      	ldr	r3, [pc, #68]	@ (8000a50 <MX_I2C1_Init+0x74>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a10:	4b0f      	ldr	r3, [pc, #60]	@ (8000a50 <MX_I2C1_Init+0x74>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a16:	480e      	ldr	r0, [pc, #56]	@ (8000a50 <MX_I2C1_Init+0x74>)
 8000a18:	f003 f88a 	bl	8003b30 <HAL_I2C_Init>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a22:	f001 fc5f 	bl	80022e4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a26:	2100      	movs	r1, #0
 8000a28:	4809      	ldr	r0, [pc, #36]	@ (8000a50 <MX_I2C1_Init+0x74>)
 8000a2a:	f004 f83f 	bl	8004aac <HAL_I2CEx_ConfigAnalogFilter>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a34:	f001 fc56 	bl	80022e4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a38:	2100      	movs	r1, #0
 8000a3a:	4805      	ldr	r0, [pc, #20]	@ (8000a50 <MX_I2C1_Init+0x74>)
 8000a3c:	f004 f881 	bl	8004b42 <HAL_I2CEx_ConfigDigitalFilter>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a46:	f001 fc4d 	bl	80022e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	200002ec 	.word	0x200002ec
 8000a54:	40005400 	.word	0x40005400
 8000a58:	00808cd2 	.word	0x00808cd2

08000a5c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a60:	4b1b      	ldr	r3, [pc, #108]	@ (8000ad0 <MX_I2C2_Init+0x74>)
 8000a62:	4a1c      	ldr	r2, [pc, #112]	@ (8000ad4 <MX_I2C2_Init+0x78>)
 8000a64:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00301739;
 8000a66:	4b1a      	ldr	r3, [pc, #104]	@ (8000ad0 <MX_I2C2_Init+0x74>)
 8000a68:	4a1b      	ldr	r2, [pc, #108]	@ (8000ad8 <MX_I2C2_Init+0x7c>)
 8000a6a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000a6c:	4b18      	ldr	r3, [pc, #96]	@ (8000ad0 <MX_I2C2_Init+0x74>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a72:	4b17      	ldr	r3, [pc, #92]	@ (8000ad0 <MX_I2C2_Init+0x74>)
 8000a74:	2201      	movs	r2, #1
 8000a76:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a78:	4b15      	ldr	r3, [pc, #84]	@ (8000ad0 <MX_I2C2_Init+0x74>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000a7e:	4b14      	ldr	r3, [pc, #80]	@ (8000ad0 <MX_I2C2_Init+0x74>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a84:	4b12      	ldr	r3, [pc, #72]	@ (8000ad0 <MX_I2C2_Init+0x74>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a8a:	4b11      	ldr	r3, [pc, #68]	@ (8000ad0 <MX_I2C2_Init+0x74>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a90:	4b0f      	ldr	r3, [pc, #60]	@ (8000ad0 <MX_I2C2_Init+0x74>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a96:	480e      	ldr	r0, [pc, #56]	@ (8000ad0 <MX_I2C2_Init+0x74>)
 8000a98:	f003 f84a 	bl	8003b30 <HAL_I2C_Init>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000aa2:	f001 fc1f 	bl	80022e4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	4809      	ldr	r0, [pc, #36]	@ (8000ad0 <MX_I2C2_Init+0x74>)
 8000aaa:	f003 ffff 	bl	8004aac <HAL_I2CEx_ConfigAnalogFilter>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000ab4:	f001 fc16 	bl	80022e4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000ab8:	2100      	movs	r1, #0
 8000aba:	4805      	ldr	r0, [pc, #20]	@ (8000ad0 <MX_I2C2_Init+0x74>)
 8000abc:	f004 f841 	bl	8004b42 <HAL_I2CEx_ConfigDigitalFilter>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000ac6:	f001 fc0d 	bl	80022e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	20000340 	.word	0x20000340
 8000ad4:	40005800 	.word	0x40005800
 8000ad8:	00301739 	.word	0x00301739

08000adc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b0ac      	sub	sp, #176	@ 0xb0
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]
 8000af2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000af4:	f107 0318 	add.w	r3, r7, #24
 8000af8:	2284      	movs	r2, #132	@ 0x84
 8000afa:	2100      	movs	r1, #0
 8000afc:	4618      	mov	r0, r3
 8000afe:	f007 f9c5 	bl	8007e8c <memset>
  if(i2cHandle->Instance==I2C1)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4a43      	ldr	r2, [pc, #268]	@ (8000c14 <HAL_I2C_MspInit+0x138>)
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d13d      	bne.n	8000b88 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000b0c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000b10:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000b12:	2300      	movs	r3, #0
 8000b14:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b16:	f107 0318 	add.w	r3, r7, #24
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f004 fe72 	bl	8005804 <HAL_RCCEx_PeriphCLKConfig>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000b26:	f001 fbdd 	bl	80022e4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2a:	4b3b      	ldr	r3, [pc, #236]	@ (8000c18 <HAL_I2C_MspInit+0x13c>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2e:	4a3a      	ldr	r2, [pc, #232]	@ (8000c18 <HAL_I2C_MspInit+0x13c>)
 8000b30:	f043 0302 	orr.w	r3, r3, #2
 8000b34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b36:	4b38      	ldr	r3, [pc, #224]	@ (8000c18 <HAL_I2C_MspInit+0x13c>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3a:	f003 0302 	and.w	r3, r3, #2
 8000b3e:	617b      	str	r3, [r7, #20]
 8000b40:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b42:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b46:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b4a:	2312      	movs	r3, #18
 8000b4c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b56:	2303      	movs	r3, #3
 8000b58:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b5c:	2304      	movs	r3, #4
 8000b5e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b62:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000b66:	4619      	mov	r1, r3
 8000b68:	482c      	ldr	r0, [pc, #176]	@ (8000c1c <HAL_I2C_MspInit+0x140>)
 8000b6a:	f002 fe03 	bl	8003774 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b6e:	4b2a      	ldr	r3, [pc, #168]	@ (8000c18 <HAL_I2C_MspInit+0x13c>)
 8000b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b72:	4a29      	ldr	r2, [pc, #164]	@ (8000c18 <HAL_I2C_MspInit+0x13c>)
 8000b74:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b78:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b7a:	4b27      	ldr	r3, [pc, #156]	@ (8000c18 <HAL_I2C_MspInit+0x13c>)
 8000b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b7e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b82:	613b      	str	r3, [r7, #16]
 8000b84:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000b86:	e041      	b.n	8000c0c <HAL_I2C_MspInit+0x130>
  else if(i2cHandle->Instance==I2C2)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a24      	ldr	r2, [pc, #144]	@ (8000c20 <HAL_I2C_MspInit+0x144>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d13c      	bne.n	8000c0c <HAL_I2C_MspInit+0x130>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000b92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000b96:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b9e:	f107 0318 	add.w	r3, r7, #24
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f004 fe2e 	bl	8005804 <HAL_RCCEx_PeriphCLKConfig>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8000bae:	f001 fb99 	bl	80022e4 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bb2:	4b19      	ldr	r3, [pc, #100]	@ (8000c18 <HAL_I2C_MspInit+0x13c>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb6:	4a18      	ldr	r2, [pc, #96]	@ (8000c18 <HAL_I2C_MspInit+0x13c>)
 8000bb8:	f043 0320 	orr.w	r3, r3, #32
 8000bbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bbe:	4b16      	ldr	r3, [pc, #88]	@ (8000c18 <HAL_I2C_MspInit+0x13c>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc2:	f003 0320 	and.w	r3, r3, #32
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000bca:	2303      	movs	r3, #3
 8000bcc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bd0:	2312      	movs	r3, #18
 8000bd2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bdc:	2303      	movs	r3, #3
 8000bde:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000be2:	2304      	movs	r3, #4
 8000be4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000be8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000bec:	4619      	mov	r1, r3
 8000bee:	480d      	ldr	r0, [pc, #52]	@ (8000c24 <HAL_I2C_MspInit+0x148>)
 8000bf0:	f002 fdc0 	bl	8003774 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000bf4:	4b08      	ldr	r3, [pc, #32]	@ (8000c18 <HAL_I2C_MspInit+0x13c>)
 8000bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bf8:	4a07      	ldr	r2, [pc, #28]	@ (8000c18 <HAL_I2C_MspInit+0x13c>)
 8000bfa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000bfe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c00:	4b05      	ldr	r3, [pc, #20]	@ (8000c18 <HAL_I2C_MspInit+0x13c>)
 8000c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c04:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c08:	60bb      	str	r3, [r7, #8]
 8000c0a:	68bb      	ldr	r3, [r7, #8]
}
 8000c0c:	bf00      	nop
 8000c0e:	37b0      	adds	r7, #176	@ 0xb0
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	40005400 	.word	0x40005400
 8000c18:	40023800 	.word	0x40023800
 8000c1c:	40020400 	.word	0x40020400
 8000c20:	40005800 	.word	0x40005800
 8000c24:	40021400 	.word	0x40021400

08000c28 <LCD_Enable_Pulse>:
#include "lcd.h"
#include "main.h"
#include "stm32f7xx_hal.h"

void LCD_Enable_Pulse(void) {
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LCD_EN_Port, LCD_EN_Pin, GPIO_PIN_SET);
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	2110      	movs	r1, #16
 8000c30:	4807      	ldr	r0, [pc, #28]	@ (8000c50 <LCD_Enable_Pulse+0x28>)
 8000c32:	f002 ff63 	bl	8003afc <HAL_GPIO_WritePin>
    HAL_Delay(1); // Opóźnienie 1 ms
 8000c36:	2001      	movs	r0, #1
 8000c38:	f002 f944 	bl	8002ec4 <HAL_Delay>
    HAL_GPIO_WritePin(LCD_EN_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	2110      	movs	r1, #16
 8000c40:	4803      	ldr	r0, [pc, #12]	@ (8000c50 <LCD_Enable_Pulse+0x28>)
 8000c42:	f002 ff5b 	bl	8003afc <HAL_GPIO_WritePin>
    HAL_Delay(1); // Opóźnienie 1 ms
 8000c46:	2001      	movs	r0, #1
 8000c48:	f002 f93c 	bl	8002ec4 <HAL_Delay>
}
 8000c4c:	bf00      	nop
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	40021000 	.word	0x40021000

08000c54 <LCD_Send_4Bits>:

void LCD_Send_4Bits(uint8_t data) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_D4_Port, LCD_D4_Pin, (data & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000c5e:	79fb      	ldrb	r3, [r7, #7]
 8000c60:	f003 0301 	and.w	r3, r3, #1
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	461a      	mov	r2, r3
 8000c68:	2120      	movs	r1, #32
 8000c6a:	4815      	ldr	r0, [pc, #84]	@ (8000cc0 <LCD_Send_4Bits+0x6c>)
 8000c6c:	f002 ff46 	bl	8003afc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D5_Port, LCD_D5_Pin, (data & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000c70:	79fb      	ldrb	r3, [r7, #7]
 8000c72:	105b      	asrs	r3, r3, #1
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	f003 0301 	and.w	r3, r3, #1
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	2140      	movs	r1, #64	@ 0x40
 8000c80:	480f      	ldr	r0, [pc, #60]	@ (8000cc0 <LCD_Send_4Bits+0x6c>)
 8000c82:	f002 ff3b 	bl	8003afc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D6_Port, LCD_D6_Pin, (data & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000c86:	79fb      	ldrb	r3, [r7, #7]
 8000c88:	109b      	asrs	r3, r3, #2
 8000c8a:	b2db      	uxtb	r3, r3
 8000c8c:	f003 0301 	and.w	r3, r3, #1
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	461a      	mov	r2, r3
 8000c94:	2108      	movs	r1, #8
 8000c96:	480a      	ldr	r0, [pc, #40]	@ (8000cc0 <LCD_Send_4Bits+0x6c>)
 8000c98:	f002 ff30 	bl	8003afc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D7_Port, LCD_D7_Pin, (data & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000c9c:	79fb      	ldrb	r3, [r7, #7]
 8000c9e:	10db      	asrs	r3, r3, #3
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	f003 0301 	and.w	r3, r3, #1
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	461a      	mov	r2, r3
 8000caa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000cae:	4805      	ldr	r0, [pc, #20]	@ (8000cc4 <LCD_Send_4Bits+0x70>)
 8000cb0:	f002 ff24 	bl	8003afc <HAL_GPIO_WritePin>

    LCD_Enable_Pulse();
 8000cb4:	f7ff ffb8 	bl	8000c28 <LCD_Enable_Pulse>
}
 8000cb8:	bf00      	nop
 8000cba:	3708      	adds	r7, #8
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	40021000 	.word	0x40021000
 8000cc4:	40021400 	.word	0x40021400

08000cc8 <LCD_Send_Command>:

void LCD_Send_Command(uint8_t cmd) {
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_RS_Port, LCD_RS_Pin, GPIO_PIN_RESET); // RS = 0 dla komend
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	2104      	movs	r1, #4
 8000cd6:	480b      	ldr	r0, [pc, #44]	@ (8000d04 <LCD_Send_Command+0x3c>)
 8000cd8:	f002 ff10 	bl	8003afc <HAL_GPIO_WritePin>
    LCD_Send_4Bits(cmd >> 4); // Wysłanie wyższych 4 bitów
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
 8000cde:	091b      	lsrs	r3, r3, #4
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f7ff ffb6 	bl	8000c54 <LCD_Send_4Bits>
    LCD_Send_4Bits(cmd & 0x0F); // Wysłanie niższych 4 bitów
 8000ce8:	79fb      	ldrb	r3, [r7, #7]
 8000cea:	f003 030f 	and.w	r3, r3, #15
 8000cee:	b2db      	uxtb	r3, r3
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff ffaf 	bl	8000c54 <LCD_Send_4Bits>
    HAL_Delay(2); // Opóźnienie dla stabilizacji
 8000cf6:	2002      	movs	r0, #2
 8000cf8:	f002 f8e4 	bl	8002ec4 <HAL_Delay>
}
 8000cfc:	bf00      	nop
 8000cfe:	3708      	adds	r7, #8
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	40021000 	.word	0x40021000

08000d08 <LCD_Write_Char>:

void LCD_Write_Char(char data) {
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_RS_Port, LCD_RS_Pin, GPIO_PIN_SET); // RS = 1 dla danych
 8000d12:	2201      	movs	r2, #1
 8000d14:	2104      	movs	r1, #4
 8000d16:	480b      	ldr	r0, [pc, #44]	@ (8000d44 <LCD_Write_Char+0x3c>)
 8000d18:	f002 fef0 	bl	8003afc <HAL_GPIO_WritePin>
    LCD_Send_4Bits(data >> 4); // Wysłanie wyższych 4 bitów
 8000d1c:	79fb      	ldrb	r3, [r7, #7]
 8000d1e:	091b      	lsrs	r3, r3, #4
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff ff96 	bl	8000c54 <LCD_Send_4Bits>
    LCD_Send_4Bits(data & 0x0F); // Wysłanie niższych 4 bitów
 8000d28:	79fb      	ldrb	r3, [r7, #7]
 8000d2a:	f003 030f 	and.w	r3, r3, #15
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	4618      	mov	r0, r3
 8000d32:	f7ff ff8f 	bl	8000c54 <LCD_Send_4Bits>
    HAL_Delay(2); // Opóźnienie dla stabilizacji
 8000d36:	2002      	movs	r0, #2
 8000d38:	f002 f8c4 	bl	8002ec4 <HAL_Delay>
}
 8000d3c:	bf00      	nop
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	40021000 	.word	0x40021000

08000d48 <LCD_Init>:

void LCD_Init(void) {
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b086      	sub	sp, #24
 8000d4c:	af00      	add	r7, sp, #0
    // Ustawienie trybu GPIO
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4e:	1d3b      	adds	r3, r7, #4
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]
 8000d5a:	611a      	str	r2, [r3, #16]

    // RS i EN
    GPIO_InitStruct.Pin = LCD_RS_Pin | LCD_EN_Pin;
 8000d5c:	2314      	movs	r3, #20
 8000d5e:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d60:	2301      	movs	r3, #1
 8000d62:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d64:	2300      	movs	r3, #0
 8000d66:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(LCD_RS_Port, &GPIO_InitStruct);
 8000d6c:	1d3b      	adds	r3, r7, #4
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4817      	ldr	r0, [pc, #92]	@ (8000dd0 <LCD_Init+0x88>)
 8000d72:	f002 fcff 	bl	8003774 <HAL_GPIO_Init>

    // D4-D7
    GPIO_InitStruct.Pin = LCD_D4_Pin | LCD_D5_Pin | LCD_D6_Pin | LCD_D7_Pin;
 8000d76:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 8000d7a:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(LCD_D4_Port, &GPIO_InitStruct);
 8000d7c:	1d3b      	adds	r3, r7, #4
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4813      	ldr	r0, [pc, #76]	@ (8000dd0 <LCD_Init+0x88>)
 8000d82:	f002 fcf7 	bl	8003774 <HAL_GPIO_Init>

    // Inicjalizacja
    HAL_Delay(50);
 8000d86:	2032      	movs	r0, #50	@ 0x32
 8000d88:	f002 f89c 	bl	8002ec4 <HAL_Delay>
    LCD_Send_4Bits(0x03); // Tryb 8-bitowy
 8000d8c:	2003      	movs	r0, #3
 8000d8e:	f7ff ff61 	bl	8000c54 <LCD_Send_4Bits>
    HAL_Delay(5);
 8000d92:	2005      	movs	r0, #5
 8000d94:	f002 f896 	bl	8002ec4 <HAL_Delay>
    LCD_Send_4Bits(0x03);
 8000d98:	2003      	movs	r0, #3
 8000d9a:	f7ff ff5b 	bl	8000c54 <LCD_Send_4Bits>
    HAL_Delay(1);
 8000d9e:	2001      	movs	r0, #1
 8000da0:	f002 f890 	bl	8002ec4 <HAL_Delay>
    LCD_Send_4Bits(0x03);
 8000da4:	2003      	movs	r0, #3
 8000da6:	f7ff ff55 	bl	8000c54 <LCD_Send_4Bits>
    LCD_Send_4Bits(0x02); // Przełączenie na tryb 4-bitowy
 8000daa:	2002      	movs	r0, #2
 8000dac:	f7ff ff52 	bl	8000c54 <LCD_Send_4Bits>

    // Komendy konfiguracyjne
    LCD_Send_Command(0x28); // Tryb 4-bitowy, 2 linie, 5x8 font
 8000db0:	2028      	movs	r0, #40	@ 0x28
 8000db2:	f7ff ff89 	bl	8000cc8 <LCD_Send_Command>
    LCD_Send_Command(0x0C); // Włącz LCD, brak kursora
 8000db6:	200c      	movs	r0, #12
 8000db8:	f7ff ff86 	bl	8000cc8 <LCD_Send_Command>
    LCD_Send_Command(0x06); // Tryb przesuwania kursora w prawo
 8000dbc:	2006      	movs	r0, #6
 8000dbe:	f7ff ff83 	bl	8000cc8 <LCD_Send_Command>
    LCD_Clear();
 8000dc2:	f000 f807 	bl	8000dd4 <LCD_Clear>
}
 8000dc6:	bf00      	nop
 8000dc8:	3718      	adds	r7, #24
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40021000 	.word	0x40021000

08000dd4 <LCD_Clear>:

void LCD_Clear(void) {
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
    LCD_Send_Command(0x01); // Komenda czyszczenia
 8000dd8:	2001      	movs	r0, #1
 8000dda:	f7ff ff75 	bl	8000cc8 <LCD_Send_Command>
    HAL_Delay(2);
 8000dde:	2002      	movs	r0, #2
 8000de0:	f002 f870 	bl	8002ec4 <HAL_Delay>
}
 8000de4:	bf00      	nop
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <LCD_Set_Cursor>:

void LCD_Set_Cursor(uint8_t row, uint8_t col) {
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	460a      	mov	r2, r1
 8000df2:	71fb      	strb	r3, [r7, #7]
 8000df4:	4613      	mov	r3, r2
 8000df6:	71bb      	strb	r3, [r7, #6]
    uint8_t address = (row == 0) ? 0x00 : 0x40; // Adres linii
 8000df8:	79fb      	ldrb	r3, [r7, #7]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d101      	bne.n	8000e02 <LCD_Set_Cursor+0x1a>
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e000      	b.n	8000e04 <LCD_Set_Cursor+0x1c>
 8000e02:	2340      	movs	r3, #64	@ 0x40
 8000e04:	73fb      	strb	r3, [r7, #15]
    address += col;
 8000e06:	7bfa      	ldrb	r2, [r7, #15]
 8000e08:	79bb      	ldrb	r3, [r7, #6]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	73fb      	strb	r3, [r7, #15]
    LCD_Send_Command(0x80 | address);
 8000e0e:	7bfb      	ldrb	r3, [r7, #15]
 8000e10:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	4618      	mov	r0, r3
 8000e18:	f7ff ff56 	bl	8000cc8 <LCD_Send_Command>
}
 8000e1c:	bf00      	nop
 8000e1e:	3710      	adds	r7, #16
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <LCD_Send_String>:

void LCD_Send_String(char *str) {
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
    while (*str) {
 8000e2c:	e006      	b.n	8000e3c <LCD_Send_String+0x18>
        LCD_Write_Char(*str++);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	1c5a      	adds	r2, r3, #1
 8000e32:	607a      	str	r2, [r7, #4]
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	4618      	mov	r0, r3
 8000e38:	f7ff ff66 	bl	8000d08 <LCD_Write_Char>
    while (*str) {
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d1f4      	bne.n	8000e2e <LCD_Send_String+0xa>
    }
}
 8000e44:	bf00      	nop
 8000e46:	bf00      	nop
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
	...

08000e50 <ISL29125_Init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void ISL29125_Init() {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af02      	add	r7, sp, #8
    uint8_t config_data[2];

    // Ustawienie trybu pracy
    config_data[0] = 0x01;  // Rejestr konfiguracji
 8000e56:	2301      	movs	r3, #1
 8000e58:	713b      	strb	r3, [r7, #4]
    config_data[1] = 0x05;  // RGB mode, high range, 10-bit resolution
 8000e5a:	2305      	movs	r3, #5
 8000e5c:	717b      	strb	r3, [r7, #5]
    if (HAL_I2C_Master_Transmit(&hi2c1, ISL29125_I2C_ADDRESS, config_data, 2, HAL_MAX_DELAY) != HAL_OK) {
 8000e5e:	1d3a      	adds	r2, r7, #4
 8000e60:	f04f 33ff 	mov.w	r3, #4294967295
 8000e64:	9300      	str	r3, [sp, #0]
 8000e66:	2302      	movs	r3, #2
 8000e68:	2188      	movs	r1, #136	@ 0x88
 8000e6a:	4816      	ldr	r0, [pc, #88]	@ (8000ec4 <ISL29125_Init+0x74>)
 8000e6c:	f002 fefc 	bl	8003c68 <HAL_I2C_Master_Transmit>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d008      	beq.n	8000e88 <ISL29125_Init+0x38>
        HAL_UART_Transmit(&huart3, (uint8_t *)"I2C error in step 1\r\n", strlen("I2C error in step 1\r\n"), HAL_MAX_DELAY);
 8000e76:	f04f 33ff 	mov.w	r3, #4294967295
 8000e7a:	2215      	movs	r2, #21
 8000e7c:	4912      	ldr	r1, [pc, #72]	@ (8000ec8 <ISL29125_Init+0x78>)
 8000e7e:	4813      	ldr	r0, [pc, #76]	@ (8000ecc <ISL29125_Init+0x7c>)
 8000e80:	f005 ff1c 	bl	8006cbc <HAL_UART_Transmit>
        Error_Handler();
 8000e84:	f001 fa2e 	bl	80022e4 <Error_Handler>
    }

    // Ustawienie progu pomiarowego (opcjonalne)
    config_data[0] = 0x02;  // Rejestr parametru
 8000e88:	2302      	movs	r3, #2
 8000e8a:	713b      	strb	r3, [r7, #4]
    config_data[1] = 0x00;  // Domyślny próg
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	717b      	strb	r3, [r7, #5]
    if (HAL_I2C_Master_Transmit(&hi2c1, ISL29125_I2C_ADDRESS, config_data, 2, HAL_MAX_DELAY) != HAL_OK) {
 8000e90:	1d3a      	adds	r2, r7, #4
 8000e92:	f04f 33ff 	mov.w	r3, #4294967295
 8000e96:	9300      	str	r3, [sp, #0]
 8000e98:	2302      	movs	r3, #2
 8000e9a:	2188      	movs	r1, #136	@ 0x88
 8000e9c:	4809      	ldr	r0, [pc, #36]	@ (8000ec4 <ISL29125_Init+0x74>)
 8000e9e:	f002 fee3 	bl	8003c68 <HAL_I2C_Master_Transmit>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d009      	beq.n	8000ebc <ISL29125_Init+0x6c>
        HAL_UART_Transmit(&huart3, (uint8_t *)"I2C error in step 2\r\n", strlen("I2C error in step 2\r\n"), HAL_MAX_DELAY);
 8000ea8:	f04f 33ff 	mov.w	r3, #4294967295
 8000eac:	2215      	movs	r2, #21
 8000eae:	4908      	ldr	r1, [pc, #32]	@ (8000ed0 <ISL29125_Init+0x80>)
 8000eb0:	4806      	ldr	r0, [pc, #24]	@ (8000ecc <ISL29125_Init+0x7c>)
 8000eb2:	f005 ff03 	bl	8006cbc <HAL_UART_Transmit>
        Error_Handler();
 8000eb6:	f001 fa15 	bl	80022e4 <Error_Handler>
    }
    return 0;
 8000eba:	bf00      	nop
 8000ebc:	bf00      	nop
}
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	200002ec 	.word	0x200002ec
 8000ec8:	0800876c 	.word	0x0800876c
 8000ecc:	20000888 	.word	0x20000888
 8000ed0:	08008784 	.word	0x08008784

08000ed4 <ISL29125_ReadColor>:

uint16_t ISL29125_ReadColor(uint8_t color_register) {
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b086      	sub	sp, #24
 8000ed8:	af02      	add	r7, sp, #8
 8000eda:	4603      	mov	r3, r0
 8000edc:	71fb      	strb	r3, [r7, #7]
    uint8_t reg = color_register;
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	73fb      	strb	r3, [r7, #15]
    uint8_t data[2];

    // Wyślij adres rejestru do odczytu
    if (HAL_I2C_Master_Transmit(&hi2c1, ISL29125_I2C_ADDRESS, &reg, 1, HAL_MAX_DELAY) != HAL_OK) {
 8000ee2:	f107 020f 	add.w	r2, r7, #15
 8000ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eea:	9300      	str	r3, [sp, #0]
 8000eec:	2301      	movs	r3, #1
 8000eee:	2188      	movs	r1, #136	@ 0x88
 8000ef0:	4818      	ldr	r0, [pc, #96]	@ (8000f54 <ISL29125_ReadColor+0x80>)
 8000ef2:	f002 feb9 	bl	8003c68 <HAL_I2C_Master_Transmit>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d008      	beq.n	8000f0e <ISL29125_ReadColor+0x3a>
        HAL_UART_Transmit(&huart3, (uint8_t *)"I2C error during read transmit\r\n", strlen("I2C error during read transmit\r\n"), HAL_MAX_DELAY);
 8000efc:	f04f 33ff 	mov.w	r3, #4294967295
 8000f00:	2220      	movs	r2, #32
 8000f02:	4915      	ldr	r1, [pc, #84]	@ (8000f58 <ISL29125_ReadColor+0x84>)
 8000f04:	4815      	ldr	r0, [pc, #84]	@ (8000f5c <ISL29125_ReadColor+0x88>)
 8000f06:	f005 fed9 	bl	8006cbc <HAL_UART_Transmit>
        Error_Handler();
 8000f0a:	f001 f9eb 	bl	80022e4 <Error_Handler>
    }

    // Odczytaj dane (2 bajty)
    if (HAL_I2C_Master_Receive(&hi2c1, ISL29125_I2C_ADDRESS, data, 2, HAL_MAX_DELAY) != HAL_OK) {
 8000f0e:	f107 020c 	add.w	r2, r7, #12
 8000f12:	f04f 33ff 	mov.w	r3, #4294967295
 8000f16:	9300      	str	r3, [sp, #0]
 8000f18:	2302      	movs	r3, #2
 8000f1a:	2188      	movs	r1, #136	@ 0x88
 8000f1c:	480d      	ldr	r0, [pc, #52]	@ (8000f54 <ISL29125_ReadColor+0x80>)
 8000f1e:	f002 ffbb 	bl	8003e98 <HAL_I2C_Master_Receive>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d008      	beq.n	8000f3a <ISL29125_ReadColor+0x66>
        HAL_UART_Transmit(&huart3, (uint8_t *)"I2C error during read receive\r\n", strlen("I2C error during read receive\r\n"), HAL_MAX_DELAY);
 8000f28:	f04f 33ff 	mov.w	r3, #4294967295
 8000f2c:	221f      	movs	r2, #31
 8000f2e:	490c      	ldr	r1, [pc, #48]	@ (8000f60 <ISL29125_ReadColor+0x8c>)
 8000f30:	480a      	ldr	r0, [pc, #40]	@ (8000f5c <ISL29125_ReadColor+0x88>)
 8000f32:	f005 fec3 	bl	8006cbc <HAL_UART_Transmit>
        Error_Handler();
 8000f36:	f001 f9d5 	bl	80022e4 <Error_Handler>
    }

    // Połącz 2 bajty w 16-bitową wartość
    return (data[1] << 8) | data[0];
 8000f3a:	7b7b      	ldrb	r3, [r7, #13]
 8000f3c:	b21b      	sxth	r3, r3
 8000f3e:	021b      	lsls	r3, r3, #8
 8000f40:	b21a      	sxth	r2, r3
 8000f42:	7b3b      	ldrb	r3, [r7, #12]
 8000f44:	b21b      	sxth	r3, r3
 8000f46:	4313      	orrs	r3, r2
 8000f48:	b21b      	sxth	r3, r3
 8000f4a:	b29b      	uxth	r3, r3
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3710      	adds	r7, #16
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	200002ec 	.word	0x200002ec
 8000f58:	0800879c 	.word	0x0800879c
 8000f5c:	20000888 	.word	0x20000888
 8000f60:	080087c0 	.word	0x080087c0

08000f64 <map_value>:

uint8_t map_value(uint16_t input_value, uint16_t in_min, uint16_t in_max, uint8_t out_min, uint8_t out_max) {
 8000f64:	b490      	push	{r4, r7}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4604      	mov	r4, r0
 8000f6c:	4608      	mov	r0, r1
 8000f6e:	4611      	mov	r1, r2
 8000f70:	461a      	mov	r2, r3
 8000f72:	4623      	mov	r3, r4
 8000f74:	80fb      	strh	r3, [r7, #6]
 8000f76:	4603      	mov	r3, r0
 8000f78:	80bb      	strh	r3, [r7, #4]
 8000f7a:	460b      	mov	r3, r1
 8000f7c:	807b      	strh	r3, [r7, #2]
 8000f7e:	4613      	mov	r3, r2
 8000f80:	707b      	strb	r3, [r7, #1]
    return (uint8_t)(((input_value - in_min) * (out_max - out_min)) / (in_max - in_min) + out_min);
 8000f82:	88fa      	ldrh	r2, [r7, #6]
 8000f84:	88bb      	ldrh	r3, [r7, #4]
 8000f86:	1ad3      	subs	r3, r2, r3
 8000f88:	7c39      	ldrb	r1, [r7, #16]
 8000f8a:	787a      	ldrb	r2, [r7, #1]
 8000f8c:	1a8a      	subs	r2, r1, r2
 8000f8e:	fb03 f202 	mul.w	r2, r3, r2
 8000f92:	8879      	ldrh	r1, [r7, #2]
 8000f94:	88bb      	ldrh	r3, [r7, #4]
 8000f96:	1acb      	subs	r3, r1, r3
 8000f98:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f9c:	b2da      	uxtb	r2, r3
 8000f9e:	787b      	ldrb	r3, [r7, #1]
 8000fa0:	4413      	add	r3, r2
 8000fa2:	b2db      	uxtb	r3, r3
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bc90      	pop	{r4, r7}
 8000fac:	4770      	bx	lr
	...

08000fb0 <PWM_Config>:

void PWM_Config ( TIM_HandleTypeDef *htim, uint32_t channel, uint32_t frequency, uint32_t duty_cycle ) {
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b090      	sub	sp, #64	@ 0x40
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	60b9      	str	r1, [r7, #8]
 8000fba:	607a      	str	r2, [r7, #4]
 8000fbc:	603b      	str	r3, [r7, #0]
	/* USER CODE BEGIN PWM_Config */
	uint32_t timer_clock = HAL_RCC_GetPCLK1Freq () ; // Zakładamy , że TIM2 jest podłączony do APB1
 8000fbe:	f004 fbf9 	bl	80057b4 <HAL_RCC_GetPCLK1Freq>
 8000fc2:	63f8      	str	r0, [r7, #60]	@ 0x3c
	uint32_t prescaler = ( timer_clock / ( frequency * 1000) ) - 1; // Preskaler ,aby uzyska ć 1 kHz
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000fca:	fb02 f303 	mul.w	r3, r2, r3
 8000fce:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000fd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fd4:	3b01      	subs	r3, #1
 8000fd6:	63bb      	str	r3, [r7, #56]	@ 0x38
	uint32_t period = 1000 - 1; // Okres dla PWM , aby uzyska ć 1000 krok ów ( maks. wypełnienie = 100%)
 8000fd8:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8000fdc:	637b      	str	r3, [r7, #52]	@ 0x34
	uint32_t pulse = ( duty_cycle * ( period + 1) ) / 100; // Wyliczenie wypełnienia na podstawie %
 8000fde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	683a      	ldr	r2, [r7, #0]
 8000fe4:	fb02 f303 	mul.w	r3, r2, r3
 8000fe8:	4a10      	ldr	r2, [pc, #64]	@ (800102c <PWM_Config+0x7c>)
 8000fea:	fba2 2303 	umull	r2, r3, r2, r3
 8000fee:	095b      	lsrs	r3, r3, #5
 8000ff0:	633b      	str	r3, [r7, #48]	@ 0x30

	// Ustawienia preskalera i okresu
	htim -> Init.Prescaler = prescaler;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000ff6:	605a      	str	r2, [r3, #4]
	htim -> Init.Period = period;
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000ffc:	60da      	str	r2, [r3, #12]
	HAL_TIM_PWM_Init(htim);
 8000ffe:	68f8      	ldr	r0, [r7, #12]
 8001000:	f004 fff0 	bl	8005fe4 <HAL_TIM_PWM_Init>

	// Konfiguracja wype ł nienia dla wybranego kana łu
	TIM_OC_InitTypeDef sConfigOC;
	sConfigOC . OCMode = TIM_OCMODE_PWM1;
 8001004:	2360      	movs	r3, #96	@ 0x60
 8001006:	617b      	str	r3, [r7, #20]
	sConfigOC . Pulse = pulse;
 8001008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800100a:	61bb      	str	r3, [r7, #24]
	sConfigOC . OCPolarity = TIM_OCPOLARITY_HIGH;
 800100c:	2300      	movs	r3, #0
 800100e:	61fb      	str	r3, [r7, #28]
	sConfigOC . OCFastMode = TIM_OCFAST_DISABLE;
 8001010:	2300      	movs	r3, #0
 8001012:	627b      	str	r3, [r7, #36]	@ 0x24

	// Konfiguracja wyjś cia PWM dla wybranego kana łu
	HAL_TIM_PWM_ConfigChannel (htim, &sConfigOC , channel);
 8001014:	f107 0314 	add.w	r3, r7, #20
 8001018:	68ba      	ldr	r2, [r7, #8]
 800101a:	4619      	mov	r1, r3
 800101c:	68f8      	ldr	r0, [r7, #12]
 800101e:	f005 f933 	bl	8006288 <HAL_TIM_PWM_ConfigChannel>

/* USER CODE END PWM_Config */
}
 8001022:	bf00      	nop
 8001024:	3740      	adds	r7, #64	@ 0x40
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	51eb851f 	.word	0x51eb851f

08001030 <high_mode_Config>:

void high_mode_Config() {
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
	normal_mode = false;
 8001034:	4b0a      	ldr	r3, [pc, #40]	@ (8001060 <high_mode_Config+0x30>)
 8001036:	2200      	movs	r2, #0
 8001038:	701a      	strb	r2, [r3, #0]
	max_PWM_red_value = 100;
 800103a:	4b0a      	ldr	r3, [pc, #40]	@ (8001064 <high_mode_Config+0x34>)
 800103c:	2264      	movs	r2, #100	@ 0x64
 800103e:	601a      	str	r2, [r3, #0]
	max_PWM_green_value = 100;
 8001040:	4b09      	ldr	r3, [pc, #36]	@ (8001068 <high_mode_Config+0x38>)
 8001042:	2264      	movs	r2, #100	@ 0x64
 8001044:	601a      	str	r2, [r3, #0]
	max_PWM_blue_value = 100;
 8001046:	4b09      	ldr	r3, [pc, #36]	@ (800106c <high_mode_Config+0x3c>)
 8001048:	2264      	movs	r2, #100	@ 0x64
 800104a:	601a      	str	r2, [r3, #0]

	LCD_Set_Cursor(0, 0);
 800104c:	2100      	movs	r1, #0
 800104e:	2000      	movs	r0, #0
 8001050:	f7ff feca 	bl	8000de8 <LCD_Set_Cursor>
	LCD_Send_String("MODE: high  ");
 8001054:	4806      	ldr	r0, [pc, #24]	@ (8001070 <high_mode_Config+0x40>)
 8001056:	f7ff fee5 	bl	8000e24 <LCD_Send_String>
}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	20000020 	.word	0x20000020
 8001064:	20000004 	.word	0x20000004
 8001068:	20000008 	.word	0x20000008
 800106c:	2000000c 	.word	0x2000000c
 8001070:	080087e0 	.word	0x080087e0

08001074 <normal_mode_Config>:

void normal_mode_Config() {
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
	normal_mode = true;
 8001078:	4b19      	ldr	r3, [pc, #100]	@ (80010e0 <normal_mode_Config+0x6c>)
 800107a:	2201      	movs	r2, #1
 800107c:	701a      	strb	r2, [r3, #0]
	max_PWM_red_value = MAX_RED_PWM;
 800107e:	2215      	movs	r2, #21
 8001080:	4b18      	ldr	r3, [pc, #96]	@ (80010e4 <normal_mode_Config+0x70>)
 8001082:	601a      	str	r2, [r3, #0]
	max_PWM_green_value = MAX_GREEN_PWM;
 8001084:	2223      	movs	r2, #35	@ 0x23
 8001086:	4b18      	ldr	r3, [pc, #96]	@ (80010e8 <normal_mode_Config+0x74>)
 8001088:	601a      	str	r2, [r3, #0]
	max_PWM_blue_value = MAX_BLUE_PWM;
 800108a:	2214      	movs	r2, #20
 800108c:	4b17      	ldr	r3, [pc, #92]	@ (80010ec <normal_mode_Config+0x78>)
 800108e:	601a      	str	r2, [r3, #0]
	if(R_PWM_channel > max_PWM_red_value) {
 8001090:	4b17      	ldr	r3, [pc, #92]	@ (80010f0 <normal_mode_Config+0x7c>)
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	4b13      	ldr	r3, [pc, #76]	@ (80010e4 <normal_mode_Config+0x70>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	429a      	cmp	r2, r3
 800109a:	dd03      	ble.n	80010a4 <normal_mode_Config+0x30>
		R_PWM_channel = max_PWM_red_value;
 800109c:	4b11      	ldr	r3, [pc, #68]	@ (80010e4 <normal_mode_Config+0x70>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a13      	ldr	r2, [pc, #76]	@ (80010f0 <normal_mode_Config+0x7c>)
 80010a2:	6013      	str	r3, [r2, #0]
	}
	if(G_PWM_channel > max_PWM_green_value) {
 80010a4:	4b13      	ldr	r3, [pc, #76]	@ (80010f4 <normal_mode_Config+0x80>)
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	4b0f      	ldr	r3, [pc, #60]	@ (80010e8 <normal_mode_Config+0x74>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	dd03      	ble.n	80010b8 <normal_mode_Config+0x44>
		G_PWM_channel = max_PWM_green_value;
 80010b0:	4b0d      	ldr	r3, [pc, #52]	@ (80010e8 <normal_mode_Config+0x74>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a0f      	ldr	r2, [pc, #60]	@ (80010f4 <normal_mode_Config+0x80>)
 80010b6:	6013      	str	r3, [r2, #0]
	}
	if(B_PWM_channel > max_PWM_blue_value) {
 80010b8:	4b0f      	ldr	r3, [pc, #60]	@ (80010f8 <normal_mode_Config+0x84>)
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	4b0b      	ldr	r3, [pc, #44]	@ (80010ec <normal_mode_Config+0x78>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	dd03      	ble.n	80010cc <normal_mode_Config+0x58>
		B_PWM_channel = max_PWM_blue_value;
 80010c4:	4b09      	ldr	r3, [pc, #36]	@ (80010ec <normal_mode_Config+0x78>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a0b      	ldr	r2, [pc, #44]	@ (80010f8 <normal_mode_Config+0x84>)
 80010ca:	6013      	str	r3, [r2, #0]
	}

	LCD_Set_Cursor(0, 0);
 80010cc:	2100      	movs	r1, #0
 80010ce:	2000      	movs	r0, #0
 80010d0:	f7ff fe8a 	bl	8000de8 <LCD_Set_Cursor>
	LCD_Send_String("MODE: normal");
 80010d4:	4809      	ldr	r0, [pc, #36]	@ (80010fc <normal_mode_Config+0x88>)
 80010d6:	f7ff fea5 	bl	8000e24 <LCD_Send_String>
}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	20000020 	.word	0x20000020
 80010e4:	20000004 	.word	0x20000004
 80010e8:	20000008 	.word	0x20000008
 80010ec:	2000000c 	.word	0x2000000c
 80010f0:	200003e0 	.word	0x200003e0
 80010f4:	200003e4 	.word	0x200003e4
 80010f8:	200003e8 	.word	0x200003e8
 80010fc:	080087f0 	.word	0x080087f0

08001100 <rewrite_previous_temp_buffer>:

void rewrite_previous_temp_buffer() {
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
	for(int k = 0; k < 4; k++) {
 8001106:	2300      	movs	r3, #0
 8001108:	607b      	str	r3, [r7, #4]
 800110a:	e00b      	b.n	8001124 <rewrite_previous_temp_buffer+0x24>
		previous_temp_buffer[k] = temp_buffer[k];
 800110c:	4a0a      	ldr	r2, [pc, #40]	@ (8001138 <rewrite_previous_temp_buffer+0x38>)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4413      	add	r3, r2
 8001112:	7819      	ldrb	r1, [r3, #0]
 8001114:	4a09      	ldr	r2, [pc, #36]	@ (800113c <rewrite_previous_temp_buffer+0x3c>)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4413      	add	r3, r2
 800111a:	460a      	mov	r2, r1
 800111c:	701a      	strb	r2, [r3, #0]
	for(int k = 0; k < 4; k++) {
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	3301      	adds	r3, #1
 8001122:	607b      	str	r3, [r7, #4]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2b03      	cmp	r3, #3
 8001128:	ddf0      	ble.n	800110c <rewrite_previous_temp_buffer+0xc>
	}
}
 800112a:	bf00      	nop
 800112c:	bf00      	nop
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	200003c8 	.word	0x200003c8
 800113c:	20000404 	.word	0x20000404

08001140 <check_mode_normal>:

bool check_mode_normal() {
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
	for(int i = 0; i < 11; i++) {
 8001146:	2300      	movs	r3, #0
 8001148:	607b      	str	r3, [r7, #4]
 800114a:	e00e      	b.n	800116a <check_mode_normal+0x2a>
		if(temp_buffer[i] != mode_normal[i]) {
 800114c:	4a0c      	ldr	r2, [pc, #48]	@ (8001180 <check_mode_normal+0x40>)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4413      	add	r3, r2
 8001152:	781a      	ldrb	r2, [r3, #0]
 8001154:	490b      	ldr	r1, [pc, #44]	@ (8001184 <check_mode_normal+0x44>)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	440b      	add	r3, r1
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	429a      	cmp	r2, r3
 800115e:	d001      	beq.n	8001164 <check_mode_normal+0x24>
			return false;
 8001160:	2300      	movs	r3, #0
 8001162:	e006      	b.n	8001172 <check_mode_normal+0x32>
	for(int i = 0; i < 11; i++) {
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	3301      	adds	r3, #1
 8001168:	607b      	str	r3, [r7, #4]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2b0a      	cmp	r3, #10
 800116e:	dded      	ble.n	800114c <check_mode_normal+0xc>
			exit(0);
		}
	}
	return true;
 8001170:	2301      	movs	r3, #1
}
 8001172:	4618      	mov	r0, r3
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	200003c8 	.word	0x200003c8
 8001184:	20000024 	.word	0x20000024

08001188 <check_mode_high>:

int check_mode_high() {
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
	for(int i = 0; i < 9; i++) {
 800118e:	2300      	movs	r3, #0
 8001190:	607b      	str	r3, [r7, #4]
 8001192:	e00e      	b.n	80011b2 <check_mode_high+0x2a>
		if(temp_buffer[i] != mode_high[i]) {
 8001194:	4a0c      	ldr	r2, [pc, #48]	@ (80011c8 <check_mode_high+0x40>)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4413      	add	r3, r2
 800119a:	781a      	ldrb	r2, [r3, #0]
 800119c:	490b      	ldr	r1, [pc, #44]	@ (80011cc <check_mode_high+0x44>)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	440b      	add	r3, r1
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d001      	beq.n	80011ac <check_mode_high+0x24>
			return 0;
 80011a8:	2300      	movs	r3, #0
 80011aa:	e006      	b.n	80011ba <check_mode_high+0x32>
	for(int i = 0; i < 9; i++) {
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	3301      	adds	r3, #1
 80011b0:	607b      	str	r3, [r7, #4]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2b08      	cmp	r3, #8
 80011b6:	dded      	ble.n	8001194 <check_mode_high+0xc>
			exit(0);
		}
	}
	return 1;
 80011b8:	2301      	movs	r3, #1
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	200003c8 	.word	0x200003c8
 80011cc:	20000030 	.word	0x20000030

080011d0 <check_help>:

int check_help() {
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
	for(int i = 0; i < 4; i++) {
 80011d6:	2300      	movs	r3, #0
 80011d8:	607b      	str	r3, [r7, #4]
 80011da:	e00e      	b.n	80011fa <check_help+0x2a>
		if(temp_buffer[i] != help[i]) {
 80011dc:	4a0c      	ldr	r2, [pc, #48]	@ (8001210 <check_help+0x40>)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4413      	add	r3, r2
 80011e2:	781a      	ldrb	r2, [r3, #0]
 80011e4:	490b      	ldr	r1, [pc, #44]	@ (8001214 <check_help+0x44>)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	440b      	add	r3, r1
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d001      	beq.n	80011f4 <check_help+0x24>
			return 0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	e006      	b.n	8001202 <check_help+0x32>
	for(int i = 0; i < 4; i++) {
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3301      	adds	r3, #1
 80011f8:	607b      	str	r3, [r7, #4]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2b03      	cmp	r3, #3
 80011fe:	dded      	ble.n	80011dc <check_help+0xc>
			exit(0);
		}
	}
	return 1;
 8001200:	2301      	movs	r3, #1
}
 8001202:	4618      	mov	r0, r3
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	200003c8 	.word	0x200003c8
 8001214:	2000003c 	.word	0x2000003c

08001218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001218:	b590      	push	{r4, r7, lr}
 800121a:	b08d      	sub	sp, #52	@ 0x34
 800121c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800121e:	f001 fdf4 	bl	8002e0a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001222:	f000 ffab 	bl	800217c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001226:	f7ff fae7 	bl	80007f8 <MX_GPIO_Init>
  MX_ETH_Init();
 800122a:	f7ff f9df 	bl	80005ec <MX_ETH_Init>
  MX_USART3_UART_Init();
 800122e:	f001 fc8b 	bl	8002b48 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001232:	f001 fd19 	bl	8002c68 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8001236:	f7ff fbd1 	bl	80009dc <MX_I2C1_Init>
  MX_TIM3_Init();
 800123a:	f001 fb9b 	bl	8002974 <MX_TIM3_Init>
  MX_I2C2_Init();
 800123e:	f7ff fc0d 	bl	8000a5c <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart3, (uint8_t *)"Starting I2C scan...\r\n", strlen("Starting I2C scan...\r\n"), HAL_MAX_DELAY);
 8001242:	f04f 33ff 	mov.w	r3, #4294967295
 8001246:	2216      	movs	r2, #22
 8001248:	49a5      	ldr	r1, [pc, #660]	@ (80014e0 <main+0x2c8>)
 800124a:	48a6      	ldr	r0, [pc, #664]	@ (80014e4 <main+0x2cc>)
 800124c:	f005 fd36 	bl	8006cbc <HAL_UART_Transmit>
  I2C_Scan();
 8001250:	f000 fffc 	bl	800224c <I2C_Scan>
  LCD_Init();
 8001254:	f7ff fd78 	bl	8000d48 <LCD_Init>

  ssd1306_Init();
 8001258:	f001 f884 	bl	8002364 <ssd1306_Init>

  ISL29125_Init();
 800125c:	f7ff fdf8 	bl	8000e50 <ISL29125_Init>
  snprintf(uart_buffer, sizeof(uart_buffer), "ISL29125 Initialized\r\n");
 8001260:	4aa1      	ldr	r2, [pc, #644]	@ (80014e8 <main+0x2d0>)
 8001262:	2132      	movs	r1, #50	@ 0x32
 8001264:	48a1      	ldr	r0, [pc, #644]	@ (80014ec <main+0x2d4>)
 8001266:	f006 fd9f 	bl	8007da8 <sniprintf>
  HAL_UART_Transmit(&huart3, (uint8_t *)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 800126a:	48a0      	ldr	r0, [pc, #640]	@ (80014ec <main+0x2d4>)
 800126c:	f7fe ffd0 	bl	8000210 <strlen>
 8001270:	4603      	mov	r3, r0
 8001272:	b29a      	uxth	r2, r3
 8001274:	f04f 33ff 	mov.w	r3, #4294967295
 8001278:	499c      	ldr	r1, [pc, #624]	@ (80014ec <main+0x2d4>)
 800127a:	489a      	ldr	r0, [pc, #616]	@ (80014e4 <main+0x2cc>)
 800127c:	f005 fd1e 	bl	8006cbc <HAL_UART_Transmit>

  LCD_Clear();
 8001280:	f7ff fda8 	bl	8000dd4 <LCD_Clear>
  LCD_Set_Cursor(0, 0);
 8001284:	2100      	movs	r1, #0
 8001286:	2000      	movs	r0, #0
 8001288:	f7ff fdae 	bl	8000de8 <LCD_Set_Cursor>
  LCD_Send_String("MODE: normal");
 800128c:	4898      	ldr	r0, [pc, #608]	@ (80014f0 <main+0x2d8>)
 800128e:	f7ff fdc9 	bl	8000e24 <LCD_Send_String>
  LCD_Set_Cursor(0, 13);
 8001292:	210d      	movs	r1, #13
 8001294:	2000      	movs	r0, #0
 8001296:	f7ff fda7 	bl	8000de8 <LCD_Set_Cursor>
  LCD_Send_String("C:R");
 800129a:	4896      	ldr	r0, [pc, #600]	@ (80014f4 <main+0x2dc>)
 800129c:	f7ff fdc2 	bl	8000e24 <LCD_Send_String>
  LCD_Set_Cursor(1, 0);
 80012a0:	2100      	movs	r1, #0
 80012a2:	2001      	movs	r0, #1
 80012a4:	f7ff fda0 	bl	8000de8 <LCD_Set_Cursor>
  LCD_Send_String("R0");
 80012a8:	4893      	ldr	r0, [pc, #588]	@ (80014f8 <main+0x2e0>)
 80012aa:	f7ff fdbb 	bl	8000e24 <LCD_Send_String>
  LCD_Set_Cursor(1, 5);
 80012ae:	2105      	movs	r1, #5
 80012b0:	2001      	movs	r0, #1
 80012b2:	f7ff fd99 	bl	8000de8 <LCD_Set_Cursor>
  LCD_Send_String("G0");
 80012b6:	4891      	ldr	r0, [pc, #580]	@ (80014fc <main+0x2e4>)
 80012b8:	f7ff fdb4 	bl	8000e24 <LCD_Send_String>
  LCD_Set_Cursor(1, 10);
 80012bc:	210a      	movs	r1, #10
 80012be:	2001      	movs	r0, #1
 80012c0:	f7ff fd92 	bl	8000de8 <LCD_Set_Cursor>
  LCD_Send_String("B0");
 80012c4:	488e      	ldr	r0, [pc, #568]	@ (8001500 <main+0x2e8>)
 80012c6:	f7ff fdad 	bl	8000e24 <LCD_Send_String>

  uint32_t last_time_update = HAL_GetTick();
 80012ca:	f001 fdef 	bl	8002eac <HAL_GetTick>
 80012ce:	6278      	str	r0, [r7, #36]	@ 0x24
  sprintf(number_left, "%u", oled_x_number_left);
 80012d0:	4b8c      	ldr	r3, [pc, #560]	@ (8001504 <main+0x2ec>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	461a      	mov	r2, r3
 80012d6:	498c      	ldr	r1, [pc, #560]	@ (8001508 <main+0x2f0>)
 80012d8:	488c      	ldr	r0, [pc, #560]	@ (800150c <main+0x2f4>)
 80012da:	f006 fd9b 	bl	8007e14 <siprintf>
  sprintf(number_right, "%u", oled_x_number_right);
 80012de:	4b8c      	ldr	r3, [pc, #560]	@ (8001510 <main+0x2f8>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	461a      	mov	r2, r3
 80012e4:	4988      	ldr	r1, [pc, #544]	@ (8001508 <main+0x2f0>)
 80012e6:	488b      	ldr	r0, [pc, #556]	@ (8001514 <main+0x2fc>)
 80012e8:	f006 fd94 	bl	8007e14 <siprintf>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //ssd1306_TestAll();
	  uint16_t green_raw = ISL29125_ReadColor(0x09);    // Odczyt RED
 80012ec:	2009      	movs	r0, #9
 80012ee:	f7ff fdf1 	bl	8000ed4 <ISL29125_ReadColor>
 80012f2:	4603      	mov	r3, r0
 80012f4:	81fb      	strh	r3, [r7, #14]
	  uint16_t red_raw = ISL29125_ReadColor(0x0B);  // Odczyt GREEN
 80012f6:	200b      	movs	r0, #11
 80012f8:	f7ff fdec 	bl	8000ed4 <ISL29125_ReadColor>
 80012fc:	4603      	mov	r3, r0
 80012fe:	81bb      	strh	r3, [r7, #12]
	  uint16_t blue_raw = ISL29125_ReadColor(0x0D);   // Odczyt BLUE
 8001300:	200d      	movs	r0, #13
 8001302:	f7ff fde7 	bl	8000ed4 <ISL29125_ReadColor>
 8001306:	4603      	mov	r3, r0
 8001308:	817b      	strh	r3, [r7, #10]

	  // Mapowanie wartości do zakresu 0–255
	  uint8_t red = map_value(red_raw, 0, 65535, 0, 255);
 800130a:	89b8      	ldrh	r0, [r7, #12]
 800130c:	23ff      	movs	r3, #255	@ 0xff
 800130e:	9300      	str	r3, [sp, #0]
 8001310:	2300      	movs	r3, #0
 8001312:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001316:	2100      	movs	r1, #0
 8001318:	f7ff fe24 	bl	8000f64 <map_value>
 800131c:	4603      	mov	r3, r0
 800131e:	727b      	strb	r3, [r7, #9]
	  uint8_t green = map_value(green_raw, 0, 65535, 0, 255);
 8001320:	89f8      	ldrh	r0, [r7, #14]
 8001322:	23ff      	movs	r3, #255	@ 0xff
 8001324:	9300      	str	r3, [sp, #0]
 8001326:	2300      	movs	r3, #0
 8001328:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800132c:	2100      	movs	r1, #0
 800132e:	f7ff fe19 	bl	8000f64 <map_value>
 8001332:	4603      	mov	r3, r0
 8001334:	723b      	strb	r3, [r7, #8]
	  uint8_t blue = map_value(blue_raw, 0, 65535, 0, 255);
 8001336:	8978      	ldrh	r0, [r7, #10]
 8001338:	23ff      	movs	r3, #255	@ 0xff
 800133a:	9300      	str	r3, [sp, #0]
 800133c:	2300      	movs	r3, #0
 800133e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001342:	2100      	movs	r1, #0
 8001344:	f7ff fe0e 	bl	8000f64 <map_value>
 8001348:	4603      	mov	r3, r0
 800134a:	71fb      	strb	r3, [r7, #7]

	  test = HAL_GPIO_ReadPin(MODE_GPIO_Port, MODE_Pin);
 800134c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001350:	4871      	ldr	r0, [pc, #452]	@ (8001518 <main+0x300>)
 8001352:	f002 fbbb 	bl	8003acc <HAL_GPIO_ReadPin>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	bf14      	ite	ne
 800135c:	2301      	movne	r3, #1
 800135e:	2300      	moveq	r3, #0
 8001360:	b2da      	uxtb	r2, r3
 8001362:	4b6e      	ldr	r3, [pc, #440]	@ (800151c <main+0x304>)
 8001364:	701a      	strb	r2, [r3, #0]

	  test_sizeof = sizeof(temp_buffer);
 8001366:	4b6e      	ldr	r3, [pc, #440]	@ (8001520 <main+0x308>)
 8001368:	220a      	movs	r2, #10
 800136a:	601a      	str	r2, [r3, #0]

	  if(HAL_GPIO_ReadPin(MODE_GPIO_Port, MODE_Pin) == 1) {
 800136c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001370:	4869      	ldr	r0, [pc, #420]	@ (8001518 <main+0x300>)
 8001372:	f002 fbab 	bl	8003acc <HAL_GPIO_ReadPin>
 8001376:	4603      	mov	r3, r0
 8001378:	2b01      	cmp	r3, #1
 800137a:	d10f      	bne.n	800139c <main+0x184>
		  if(normal_mode == true) {
 800137c:	4b69      	ldr	r3, [pc, #420]	@ (8001524 <main+0x30c>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d002      	beq.n	800138a <main+0x172>
			  high_mode_Config();
 8001384:	f7ff fe54 	bl	8001030 <high_mode_Config>
 8001388:	e008      	b.n	800139c <main+0x184>
		  } else if (normal_mode == false) {
 800138a:	4b66      	ldr	r3, [pc, #408]	@ (8001524 <main+0x30c>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	f083 0301 	eor.w	r3, r3, #1
 8001392:	b2db      	uxtb	r3, r3
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <main+0x184>
			  normal_mode_Config();
 8001398:	f7ff fe6c 	bl	8001074 <normal_mode_Config>
		  }
	  }

	  if(HAL_GPIO_ReadPin(COLOR_SWITCH_GPIO_Port, COLOR_SWITCH_Pin) == 1) {
 800139c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80013a0:	485d      	ldr	r0, [pc, #372]	@ (8001518 <main+0x300>)
 80013a2:	f002 fb93 	bl	8003acc <HAL_GPIO_ReadPin>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d12b      	bne.n	8001404 <main+0x1ec>
		  if(color_switch == 0) {
 80013ac:	4b5e      	ldr	r3, [pc, #376]	@ (8001528 <main+0x310>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d10a      	bne.n	80013ca <main+0x1b2>
			  color_switch = 1;
 80013b4:	4b5c      	ldr	r3, [pc, #368]	@ (8001528 <main+0x310>)
 80013b6:	2201      	movs	r2, #1
 80013b8:	601a      	str	r2, [r3, #0]
			  LCD_Set_Cursor(0, 15);
 80013ba:	210f      	movs	r1, #15
 80013bc:	2000      	movs	r0, #0
 80013be:	f7ff fd13 	bl	8000de8 <LCD_Set_Cursor>
			  LCD_Send_String("G");
 80013c2:	485a      	ldr	r0, [pc, #360]	@ (800152c <main+0x314>)
 80013c4:	f7ff fd2e 	bl	8000e24 <LCD_Send_String>
 80013c8:	e01c      	b.n	8001404 <main+0x1ec>

		  } else if(color_switch == 1) {
 80013ca:	4b57      	ldr	r3, [pc, #348]	@ (8001528 <main+0x310>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d10a      	bne.n	80013e8 <main+0x1d0>
			  color_switch = 2;
 80013d2:	4b55      	ldr	r3, [pc, #340]	@ (8001528 <main+0x310>)
 80013d4:	2202      	movs	r2, #2
 80013d6:	601a      	str	r2, [r3, #0]
			  LCD_Set_Cursor(0, 15);
 80013d8:	210f      	movs	r1, #15
 80013da:	2000      	movs	r0, #0
 80013dc:	f7ff fd04 	bl	8000de8 <LCD_Set_Cursor>
			  LCD_Send_String("B");
 80013e0:	4853      	ldr	r0, [pc, #332]	@ (8001530 <main+0x318>)
 80013e2:	f7ff fd1f 	bl	8000e24 <LCD_Send_String>
 80013e6:	e00d      	b.n	8001404 <main+0x1ec>
		  } else if(color_switch == 2) {
 80013e8:	4b4f      	ldr	r3, [pc, #316]	@ (8001528 <main+0x310>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d109      	bne.n	8001404 <main+0x1ec>
			  color_switch = 0;
 80013f0:	4b4d      	ldr	r3, [pc, #308]	@ (8001528 <main+0x310>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
		      LCD_Set_Cursor(0, 15);
 80013f6:	210f      	movs	r1, #15
 80013f8:	2000      	movs	r0, #0
 80013fa:	f7ff fcf5 	bl	8000de8 <LCD_Set_Cursor>
			  LCD_Send_String("R");
 80013fe:	484d      	ldr	r0, [pc, #308]	@ (8001534 <main+0x31c>)
 8001400:	f7ff fd10 	bl	8000e24 <LCD_Send_String>
		  }
	  }

	  if(HAL_GPIO_ReadPin(ADD_COLOR_GPIO_Port, ADD_COLOR_Pin) == 1) {
 8001404:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001408:	4843      	ldr	r0, [pc, #268]	@ (8001518 <main+0x300>)
 800140a:	f002 fb5f 	bl	8003acc <HAL_GPIO_ReadPin>
 800140e:	4603      	mov	r3, r0
 8001410:	2b01      	cmp	r3, #1
 8001412:	f040 80cc 	bne.w	80015ae <main+0x396>
		  if(color_switch == 0 && R_value < 255) {
 8001416:	4b44      	ldr	r3, [pc, #272]	@ (8001528 <main+0x310>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d12e      	bne.n	800147c <main+0x264>
 800141e:	4b46      	ldr	r3, [pc, #280]	@ (8001538 <main+0x320>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	2bfe      	cmp	r3, #254	@ 0xfe
 8001424:	dc2a      	bgt.n	800147c <main+0x264>
			  R_value++;
 8001426:	4b44      	ldr	r3, [pc, #272]	@ (8001538 <main+0x320>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	3301      	adds	r3, #1
 800142c:	4a42      	ldr	r2, [pc, #264]	@ (8001538 <main+0x320>)
 800142e:	6013      	str	r3, [r2, #0]
			  sprintf(buffor_for_lcd, "%d", R_value);
 8001430:	4b41      	ldr	r3, [pc, #260]	@ (8001538 <main+0x320>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	461a      	mov	r2, r3
 8001436:	4941      	ldr	r1, [pc, #260]	@ (800153c <main+0x324>)
 8001438:	4841      	ldr	r0, [pc, #260]	@ (8001540 <main+0x328>)
 800143a:	f006 fceb 	bl	8007e14 <siprintf>
			  LCD_Set_Cursor(1, 1);
 800143e:	2101      	movs	r1, #1
 8001440:	2001      	movs	r0, #1
 8001442:	f7ff fcd1 	bl	8000de8 <LCD_Set_Cursor>
			  LCD_Send_String(buffor_for_lcd);
 8001446:	483e      	ldr	r0, [pc, #248]	@ (8001540 <main+0x328>)
 8001448:	f7ff fcec 	bl	8000e24 <LCD_Send_String>
			  if(R_value < 10) {
 800144c:	4b3a      	ldr	r3, [pc, #232]	@ (8001538 <main+0x320>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2b09      	cmp	r3, #9
 8001452:	dc06      	bgt.n	8001462 <main+0x24a>
				  LCD_Set_Cursor(1, 2);
 8001454:	2102      	movs	r1, #2
 8001456:	2001      	movs	r0, #1
 8001458:	f7ff fcc6 	bl	8000de8 <LCD_Set_Cursor>
				  LCD_Send_String(" ");
 800145c:	4839      	ldr	r0, [pc, #228]	@ (8001544 <main+0x32c>)
 800145e:	f7ff fce1 	bl	8000e24 <LCD_Send_String>
			  }
			  if(R_value < 100) {
 8001462:	4b35      	ldr	r3, [pc, #212]	@ (8001538 <main+0x320>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	2b63      	cmp	r3, #99	@ 0x63
 8001468:	f300 80a1 	bgt.w	80015ae <main+0x396>
				  LCD_Set_Cursor(1, 3);
 800146c:	2103      	movs	r1, #3
 800146e:	2001      	movs	r0, #1
 8001470:	f7ff fcba 	bl	8000de8 <LCD_Set_Cursor>
				  LCD_Send_String(" ");
 8001474:	4833      	ldr	r0, [pc, #204]	@ (8001544 <main+0x32c>)
 8001476:	f7ff fcd5 	bl	8000e24 <LCD_Send_String>
			  if(R_value < 100) {
 800147a:	e098      	b.n	80015ae <main+0x396>
			  }
		  } else if (color_switch == 1 && G_value < 255) {
 800147c:	4b2a      	ldr	r3, [pc, #168]	@ (8001528 <main+0x310>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2b01      	cmp	r3, #1
 8001482:	d163      	bne.n	800154c <main+0x334>
 8001484:	4b30      	ldr	r3, [pc, #192]	@ (8001548 <main+0x330>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2bfe      	cmp	r3, #254	@ 0xfe
 800148a:	dc5f      	bgt.n	800154c <main+0x334>
			  G_value++;
 800148c:	4b2e      	ldr	r3, [pc, #184]	@ (8001548 <main+0x330>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	3301      	adds	r3, #1
 8001492:	4a2d      	ldr	r2, [pc, #180]	@ (8001548 <main+0x330>)
 8001494:	6013      	str	r3, [r2, #0]
			  sprintf(buffor_for_lcd, "%d", G_value);
 8001496:	4b2c      	ldr	r3, [pc, #176]	@ (8001548 <main+0x330>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	461a      	mov	r2, r3
 800149c:	4927      	ldr	r1, [pc, #156]	@ (800153c <main+0x324>)
 800149e:	4828      	ldr	r0, [pc, #160]	@ (8001540 <main+0x328>)
 80014a0:	f006 fcb8 	bl	8007e14 <siprintf>
			  LCD_Set_Cursor(1, 6);
 80014a4:	2106      	movs	r1, #6
 80014a6:	2001      	movs	r0, #1
 80014a8:	f7ff fc9e 	bl	8000de8 <LCD_Set_Cursor>
			  LCD_Send_String(buffor_for_lcd);
 80014ac:	4824      	ldr	r0, [pc, #144]	@ (8001540 <main+0x328>)
 80014ae:	f7ff fcb9 	bl	8000e24 <LCD_Send_String>
			  if(G_value < 10) {
 80014b2:	4b25      	ldr	r3, [pc, #148]	@ (8001548 <main+0x330>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	2b09      	cmp	r3, #9
 80014b8:	dc06      	bgt.n	80014c8 <main+0x2b0>
				  LCD_Set_Cursor(1, 7);
 80014ba:	2107      	movs	r1, #7
 80014bc:	2001      	movs	r0, #1
 80014be:	f7ff fc93 	bl	8000de8 <LCD_Set_Cursor>
				  LCD_Send_String(" ");
 80014c2:	4820      	ldr	r0, [pc, #128]	@ (8001544 <main+0x32c>)
 80014c4:	f7ff fcae 	bl	8000e24 <LCD_Send_String>
			  }
			  if(G_value < 100) {
 80014c8:	4b1f      	ldr	r3, [pc, #124]	@ (8001548 <main+0x330>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2b63      	cmp	r3, #99	@ 0x63
 80014ce:	dc6e      	bgt.n	80015ae <main+0x396>
				  LCD_Set_Cursor(1, 8);
 80014d0:	2108      	movs	r1, #8
 80014d2:	2001      	movs	r0, #1
 80014d4:	f7ff fc88 	bl	8000de8 <LCD_Set_Cursor>
				  LCD_Send_String(" ");
 80014d8:	481a      	ldr	r0, [pc, #104]	@ (8001544 <main+0x32c>)
 80014da:	f7ff fca3 	bl	8000e24 <LCD_Send_String>
			  if(G_value < 100) {
 80014de:	e066      	b.n	80015ae <main+0x396>
 80014e0:	08008800 	.word	0x08008800
 80014e4:	20000888 	.word	0x20000888
 80014e8:	08008818 	.word	0x08008818
 80014ec:	20000394 	.word	0x20000394
 80014f0:	080087f0 	.word	0x080087f0
 80014f4:	08008830 	.word	0x08008830
 80014f8:	08008834 	.word	0x08008834
 80014fc:	08008838 	.word	0x08008838
 8001500:	0800883c 	.word	0x0800883c
 8001504:	20000010 	.word	0x20000010
 8001508:	08008840 	.word	0x08008840
 800150c:	20000428 	.word	0x20000428
 8001510:	20000014 	.word	0x20000014
 8001514:	2000042c 	.word	0x2000042c
 8001518:	40020800 	.word	0x40020800
 800151c:	20000400 	.word	0x20000400
 8001520:	200003f4 	.word	0x200003f4
 8001524:	20000020 	.word	0x20000020
 8001528:	200003ec 	.word	0x200003ec
 800152c:	08008844 	.word	0x08008844
 8001530:	08008848 	.word	0x08008848
 8001534:	0800884c 	.word	0x0800884c
 8001538:	200003d4 	.word	0x200003d4
 800153c:	08008850 	.word	0x08008850
 8001540:	20000410 	.word	0x20000410
 8001544:	08008854 	.word	0x08008854
 8001548:	200003d8 	.word	0x200003d8
			  }
		  } else if (color_switch == 2 && B_value < 255) {
 800154c:	4b9c      	ldr	r3, [pc, #624]	@ (80017c0 <main+0x5a8>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2b02      	cmp	r3, #2
 8001552:	d12c      	bne.n	80015ae <main+0x396>
 8001554:	4b9b      	ldr	r3, [pc, #620]	@ (80017c4 <main+0x5ac>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2bfe      	cmp	r3, #254	@ 0xfe
 800155a:	dc28      	bgt.n	80015ae <main+0x396>
			  B_value++;
 800155c:	4b99      	ldr	r3, [pc, #612]	@ (80017c4 <main+0x5ac>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	3301      	adds	r3, #1
 8001562:	4a98      	ldr	r2, [pc, #608]	@ (80017c4 <main+0x5ac>)
 8001564:	6013      	str	r3, [r2, #0]
			  sprintf(buffor_for_lcd, "%d", B_value);
 8001566:	4b97      	ldr	r3, [pc, #604]	@ (80017c4 <main+0x5ac>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	461a      	mov	r2, r3
 800156c:	4996      	ldr	r1, [pc, #600]	@ (80017c8 <main+0x5b0>)
 800156e:	4897      	ldr	r0, [pc, #604]	@ (80017cc <main+0x5b4>)
 8001570:	f006 fc50 	bl	8007e14 <siprintf>
			  LCD_Set_Cursor(1, 11);
 8001574:	210b      	movs	r1, #11
 8001576:	2001      	movs	r0, #1
 8001578:	f7ff fc36 	bl	8000de8 <LCD_Set_Cursor>
			  LCD_Send_String(buffor_for_lcd);
 800157c:	4893      	ldr	r0, [pc, #588]	@ (80017cc <main+0x5b4>)
 800157e:	f7ff fc51 	bl	8000e24 <LCD_Send_String>
			  if(B_value < 10) {
 8001582:	4b90      	ldr	r3, [pc, #576]	@ (80017c4 <main+0x5ac>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	2b09      	cmp	r3, #9
 8001588:	dc06      	bgt.n	8001598 <main+0x380>
				  LCD_Set_Cursor(1, 12);
 800158a:	210c      	movs	r1, #12
 800158c:	2001      	movs	r0, #1
 800158e:	f7ff fc2b 	bl	8000de8 <LCD_Set_Cursor>
				  LCD_Send_String(" ");
 8001592:	488f      	ldr	r0, [pc, #572]	@ (80017d0 <main+0x5b8>)
 8001594:	f7ff fc46 	bl	8000e24 <LCD_Send_String>
			  }
			  if(B_value < 100) {
 8001598:	4b8a      	ldr	r3, [pc, #552]	@ (80017c4 <main+0x5ac>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2b63      	cmp	r3, #99	@ 0x63
 800159e:	dc06      	bgt.n	80015ae <main+0x396>
				  LCD_Set_Cursor(1, 13);
 80015a0:	210d      	movs	r1, #13
 80015a2:	2001      	movs	r0, #1
 80015a4:	f7ff fc20 	bl	8000de8 <LCD_Set_Cursor>
				  LCD_Send_String(" ");
 80015a8:	4889      	ldr	r0, [pc, #548]	@ (80017d0 <main+0x5b8>)
 80015aa:	f7ff fc3b 	bl	8000e24 <LCD_Send_String>
			  }
		  }
	  }

	  if(HAL_GPIO_ReadPin(SUBTRACT_COLOR_GPIO_Port, SUBTRACT_COLOR_Pin) == 1) {
 80015ae:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80015b2:	4888      	ldr	r0, [pc, #544]	@ (80017d4 <main+0x5bc>)
 80015b4:	f002 fa8a 	bl	8003acc <HAL_GPIO_ReadPin>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	f040 8095 	bne.w	80016ea <main+0x4d2>
		  if(color_switch == 0 && R_value > 0) {
 80015c0:	4b7f      	ldr	r3, [pc, #508]	@ (80017c0 <main+0x5a8>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d12d      	bne.n	8001624 <main+0x40c>
 80015c8:	4b83      	ldr	r3, [pc, #524]	@ (80017d8 <main+0x5c0>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	dd29      	ble.n	8001624 <main+0x40c>
			  R_value--;
 80015d0:	4b81      	ldr	r3, [pc, #516]	@ (80017d8 <main+0x5c0>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	3b01      	subs	r3, #1
 80015d6:	4a80      	ldr	r2, [pc, #512]	@ (80017d8 <main+0x5c0>)
 80015d8:	6013      	str	r3, [r2, #0]
			  sprintf(buffor_for_lcd, "%d", R_value);
 80015da:	4b7f      	ldr	r3, [pc, #508]	@ (80017d8 <main+0x5c0>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	461a      	mov	r2, r3
 80015e0:	4979      	ldr	r1, [pc, #484]	@ (80017c8 <main+0x5b0>)
 80015e2:	487a      	ldr	r0, [pc, #488]	@ (80017cc <main+0x5b4>)
 80015e4:	f006 fc16 	bl	8007e14 <siprintf>
			  LCD_Set_Cursor(1, 1);
 80015e8:	2101      	movs	r1, #1
 80015ea:	2001      	movs	r0, #1
 80015ec:	f7ff fbfc 	bl	8000de8 <LCD_Set_Cursor>
			  LCD_Send_String(buffor_for_lcd);
 80015f0:	4876      	ldr	r0, [pc, #472]	@ (80017cc <main+0x5b4>)
 80015f2:	f7ff fc17 	bl	8000e24 <LCD_Send_String>
			  if(R_value < 10) {
 80015f6:	4b78      	ldr	r3, [pc, #480]	@ (80017d8 <main+0x5c0>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2b09      	cmp	r3, #9
 80015fc:	dc06      	bgt.n	800160c <main+0x3f4>
				  LCD_Set_Cursor(1, 2);
 80015fe:	2102      	movs	r1, #2
 8001600:	2001      	movs	r0, #1
 8001602:	f7ff fbf1 	bl	8000de8 <LCD_Set_Cursor>
				  LCD_Send_String(" ");
 8001606:	4872      	ldr	r0, [pc, #456]	@ (80017d0 <main+0x5b8>)
 8001608:	f7ff fc0c 	bl	8000e24 <LCD_Send_String>
			  }
			  if(R_value < 100) {
 800160c:	4b72      	ldr	r3, [pc, #456]	@ (80017d8 <main+0x5c0>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2b63      	cmp	r3, #99	@ 0x63
 8001612:	dc6a      	bgt.n	80016ea <main+0x4d2>
				  LCD_Set_Cursor(1, 3);
 8001614:	2103      	movs	r1, #3
 8001616:	2001      	movs	r0, #1
 8001618:	f7ff fbe6 	bl	8000de8 <LCD_Set_Cursor>
				  LCD_Send_String(" ");
 800161c:	486c      	ldr	r0, [pc, #432]	@ (80017d0 <main+0x5b8>)
 800161e:	f7ff fc01 	bl	8000e24 <LCD_Send_String>
			  if(R_value < 100) {
 8001622:	e062      	b.n	80016ea <main+0x4d2>
			  }
		  } else if(color_switch == 1 && G_value > 0) {
 8001624:	4b66      	ldr	r3, [pc, #408]	@ (80017c0 <main+0x5a8>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2b01      	cmp	r3, #1
 800162a:	d12d      	bne.n	8001688 <main+0x470>
 800162c:	4b6b      	ldr	r3, [pc, #428]	@ (80017dc <main+0x5c4>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2b00      	cmp	r3, #0
 8001632:	dd29      	ble.n	8001688 <main+0x470>
			  G_value--;
 8001634:	4b69      	ldr	r3, [pc, #420]	@ (80017dc <main+0x5c4>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	3b01      	subs	r3, #1
 800163a:	4a68      	ldr	r2, [pc, #416]	@ (80017dc <main+0x5c4>)
 800163c:	6013      	str	r3, [r2, #0]
			  sprintf(buffor_for_lcd, "%d", G_value);
 800163e:	4b67      	ldr	r3, [pc, #412]	@ (80017dc <main+0x5c4>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	461a      	mov	r2, r3
 8001644:	4960      	ldr	r1, [pc, #384]	@ (80017c8 <main+0x5b0>)
 8001646:	4861      	ldr	r0, [pc, #388]	@ (80017cc <main+0x5b4>)
 8001648:	f006 fbe4 	bl	8007e14 <siprintf>
			  LCD_Set_Cursor(1, 6);
 800164c:	2106      	movs	r1, #6
 800164e:	2001      	movs	r0, #1
 8001650:	f7ff fbca 	bl	8000de8 <LCD_Set_Cursor>
			  LCD_Send_String(buffor_for_lcd);
 8001654:	485d      	ldr	r0, [pc, #372]	@ (80017cc <main+0x5b4>)
 8001656:	f7ff fbe5 	bl	8000e24 <LCD_Send_String>
			  if(G_value < 10) {
 800165a:	4b60      	ldr	r3, [pc, #384]	@ (80017dc <main+0x5c4>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	2b09      	cmp	r3, #9
 8001660:	dc06      	bgt.n	8001670 <main+0x458>
				  LCD_Set_Cursor(1, 7);
 8001662:	2107      	movs	r1, #7
 8001664:	2001      	movs	r0, #1
 8001666:	f7ff fbbf 	bl	8000de8 <LCD_Set_Cursor>
				  LCD_Send_String(" ");
 800166a:	4859      	ldr	r0, [pc, #356]	@ (80017d0 <main+0x5b8>)
 800166c:	f7ff fbda 	bl	8000e24 <LCD_Send_String>
			  }
			  if(G_value < 100) {
 8001670:	4b5a      	ldr	r3, [pc, #360]	@ (80017dc <main+0x5c4>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2b63      	cmp	r3, #99	@ 0x63
 8001676:	dc38      	bgt.n	80016ea <main+0x4d2>
				  LCD_Set_Cursor(1, 8);
 8001678:	2108      	movs	r1, #8
 800167a:	2001      	movs	r0, #1
 800167c:	f7ff fbb4 	bl	8000de8 <LCD_Set_Cursor>
				  LCD_Send_String(" ");
 8001680:	4853      	ldr	r0, [pc, #332]	@ (80017d0 <main+0x5b8>)
 8001682:	f7ff fbcf 	bl	8000e24 <LCD_Send_String>
			  if(G_value < 100) {
 8001686:	e030      	b.n	80016ea <main+0x4d2>
			  }

		  } else if(color_switch == 2 && B_value > 0) {
 8001688:	4b4d      	ldr	r3, [pc, #308]	@ (80017c0 <main+0x5a8>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2b02      	cmp	r3, #2
 800168e:	d12c      	bne.n	80016ea <main+0x4d2>
 8001690:	4b4c      	ldr	r3, [pc, #304]	@ (80017c4 <main+0x5ac>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2b00      	cmp	r3, #0
 8001696:	dd28      	ble.n	80016ea <main+0x4d2>
			  B_value--;
 8001698:	4b4a      	ldr	r3, [pc, #296]	@ (80017c4 <main+0x5ac>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	3b01      	subs	r3, #1
 800169e:	4a49      	ldr	r2, [pc, #292]	@ (80017c4 <main+0x5ac>)
 80016a0:	6013      	str	r3, [r2, #0]
			  sprintf(buffor_for_lcd, "%d", B_value);
 80016a2:	4b48      	ldr	r3, [pc, #288]	@ (80017c4 <main+0x5ac>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	461a      	mov	r2, r3
 80016a8:	4947      	ldr	r1, [pc, #284]	@ (80017c8 <main+0x5b0>)
 80016aa:	4848      	ldr	r0, [pc, #288]	@ (80017cc <main+0x5b4>)
 80016ac:	f006 fbb2 	bl	8007e14 <siprintf>
			  LCD_Set_Cursor(1, 11);
 80016b0:	210b      	movs	r1, #11
 80016b2:	2001      	movs	r0, #1
 80016b4:	f7ff fb98 	bl	8000de8 <LCD_Set_Cursor>
			  LCD_Send_String(buffor_for_lcd);
 80016b8:	4844      	ldr	r0, [pc, #272]	@ (80017cc <main+0x5b4>)
 80016ba:	f7ff fbb3 	bl	8000e24 <LCD_Send_String>
			  if(B_value < 10) {
 80016be:	4b41      	ldr	r3, [pc, #260]	@ (80017c4 <main+0x5ac>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2b09      	cmp	r3, #9
 80016c4:	dc06      	bgt.n	80016d4 <main+0x4bc>
				  LCD_Set_Cursor(1, 12);
 80016c6:	210c      	movs	r1, #12
 80016c8:	2001      	movs	r0, #1
 80016ca:	f7ff fb8d 	bl	8000de8 <LCD_Set_Cursor>
				  LCD_Send_String(" ");
 80016ce:	4840      	ldr	r0, [pc, #256]	@ (80017d0 <main+0x5b8>)
 80016d0:	f7ff fba8 	bl	8000e24 <LCD_Send_String>
			  }
			  if(B_value < 100) {
 80016d4:	4b3b      	ldr	r3, [pc, #236]	@ (80017c4 <main+0x5ac>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2b63      	cmp	r3, #99	@ 0x63
 80016da:	dc06      	bgt.n	80016ea <main+0x4d2>
				  LCD_Set_Cursor(1, 13);
 80016dc:	210d      	movs	r1, #13
 80016de:	2001      	movs	r0, #1
 80016e0:	f7ff fb82 	bl	8000de8 <LCD_Set_Cursor>
				  LCD_Send_String(" ");
 80016e4:	483a      	ldr	r0, [pc, #232]	@ (80017d0 <main+0x5b8>)
 80016e6:	f7ff fb9d 	bl	8000e24 <LCD_Send_String>
			  }
		  }
	  }

	  if(HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin) == 1) {
 80016ea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80016ee:	4839      	ldr	r0, [pc, #228]	@ (80017d4 <main+0x5bc>)
 80016f0:	f002 f9ec 	bl	8003acc <HAL_GPIO_ReadPin>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d12c      	bne.n	8001754 <main+0x53c>
		  	  if(oled_screen != 3) {
 80016fa:	4b39      	ldr	r3, [pc, #228]	@ (80017e0 <main+0x5c8>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	2b03      	cmp	r3, #3
 8001700:	d005      	beq.n	800170e <main+0x4f6>
		  		oled_screen++;
 8001702:	4b37      	ldr	r3, [pc, #220]	@ (80017e0 <main+0x5c8>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	3301      	adds	r3, #1
 8001708:	4a35      	ldr	r2, [pc, #212]	@ (80017e0 <main+0x5c8>)
 800170a:	6013      	str	r3, [r2, #0]
 800170c:	e002      	b.n	8001714 <main+0x4fc>
		  	  } else {
		  		  oled_screen = 0;
 800170e:	4b34      	ldr	r3, [pc, #208]	@ (80017e0 <main+0x5c8>)
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
		  	  }
	  		  oled_x_counter = 0;
 8001714:	4b33      	ldr	r3, [pc, #204]	@ (80017e4 <main+0x5cc>)
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
	  		  ssd1306_Fill(Black);
 800171a:	2000      	movs	r0, #0
 800171c:	f000 fe8c 	bl	8002438 <ssd1306_Fill>
	  		  oled_x_number_left = 10;
 8001720:	4b31      	ldr	r3, [pc, #196]	@ (80017e8 <main+0x5d0>)
 8001722:	220a      	movs	r2, #10
 8001724:	601a      	str	r2, [r3, #0]
	  		  oled_x_number_right = 20;
 8001726:	4b31      	ldr	r3, [pc, #196]	@ (80017ec <main+0x5d4>)
 8001728:	2214      	movs	r2, #20
 800172a:	601a      	str	r2, [r3, #0]
	  		  sprintf(number_left, "%u", oled_x_number_left);
 800172c:	4b2e      	ldr	r3, [pc, #184]	@ (80017e8 <main+0x5d0>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	461a      	mov	r2, r3
 8001732:	492f      	ldr	r1, [pc, #188]	@ (80017f0 <main+0x5d8>)
 8001734:	482f      	ldr	r0, [pc, #188]	@ (80017f4 <main+0x5dc>)
 8001736:	f006 fb6d 	bl	8007e14 <siprintf>
	  		  sprintf(number_right, "%u", oled_x_number_right);
 800173a:	4b2c      	ldr	r3, [pc, #176]	@ (80017ec <main+0x5d4>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	461a      	mov	r2, r3
 8001740:	492b      	ldr	r1, [pc, #172]	@ (80017f0 <main+0x5d8>)
 8001742:	482d      	ldr	r0, [pc, #180]	@ (80017f8 <main+0x5e0>)
 8001744:	f006 fb66 	bl	8007e14 <siprintf>
	  		  oled_x_coordinate_left = 57;
 8001748:	4b2c      	ldr	r3, [pc, #176]	@ (80017fc <main+0x5e4>)
 800174a:	2239      	movs	r2, #57	@ 0x39
 800174c:	601a      	str	r2, [r3, #0]
	  		  oled_x_coordinate_right = 115;
 800174e:	4b2c      	ldr	r3, [pc, #176]	@ (8001800 <main+0x5e8>)
 8001750:	2273      	movs	r2, #115	@ 0x73
 8001752:	601a      	str	r2, [r3, #0]
	  	  }

	  if(pause_for_led >= 500) {
 8001754:	4b2b      	ldr	r3, [pc, #172]	@ (8001804 <main+0x5ec>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800175c:	f2c0 808d 	blt.w	800187a <main+0x662>
		  if(red < R_value) {
 8001760:	7a7a      	ldrb	r2, [r7, #9]
 8001762:	4b1d      	ldr	r3, [pc, #116]	@ (80017d8 <main+0x5c0>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	429a      	cmp	r2, r3
 8001768:	da0b      	bge.n	8001782 <main+0x56a>
			  if(R_PWM_channel < max_PWM_red_value) {
 800176a:	4b27      	ldr	r3, [pc, #156]	@ (8001808 <main+0x5f0>)
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	4b27      	ldr	r3, [pc, #156]	@ (800180c <main+0x5f4>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	429a      	cmp	r2, r3
 8001774:	da13      	bge.n	800179e <main+0x586>
				  R_PWM_channel++;
 8001776:	4b24      	ldr	r3, [pc, #144]	@ (8001808 <main+0x5f0>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	3301      	adds	r3, #1
 800177c:	4a22      	ldr	r2, [pc, #136]	@ (8001808 <main+0x5f0>)
 800177e:	6013      	str	r3, [r2, #0]
 8001780:	e00d      	b.n	800179e <main+0x586>
			  }
		  } else if(red > R_value) {
 8001782:	7a7a      	ldrb	r2, [r7, #9]
 8001784:	4b14      	ldr	r3, [pc, #80]	@ (80017d8 <main+0x5c0>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	429a      	cmp	r2, r3
 800178a:	dd08      	ble.n	800179e <main+0x586>
			  if(R_PWM_channel > 0) {
 800178c:	4b1e      	ldr	r3, [pc, #120]	@ (8001808 <main+0x5f0>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2b00      	cmp	r3, #0
 8001792:	dd04      	ble.n	800179e <main+0x586>
				  R_PWM_channel--;
 8001794:	4b1c      	ldr	r3, [pc, #112]	@ (8001808 <main+0x5f0>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	3b01      	subs	r3, #1
 800179a:	4a1b      	ldr	r2, [pc, #108]	@ (8001808 <main+0x5f0>)
 800179c:	6013      	str	r3, [r2, #0]
			  }
		  }

		  if(green < G_value) {
 800179e:	7a3a      	ldrb	r2, [r7, #8]
 80017a0:	4b0e      	ldr	r3, [pc, #56]	@ (80017dc <main+0x5c4>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	da37      	bge.n	8001818 <main+0x600>
			  if(G_PWM_channel < max_PWM_green_value) {
 80017a8:	4b19      	ldr	r3, [pc, #100]	@ (8001810 <main+0x5f8>)
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	4b19      	ldr	r3, [pc, #100]	@ (8001814 <main+0x5fc>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	da3f      	bge.n	8001834 <main+0x61c>
				  G_PWM_channel++;
 80017b4:	4b16      	ldr	r3, [pc, #88]	@ (8001810 <main+0x5f8>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	3301      	adds	r3, #1
 80017ba:	4a15      	ldr	r2, [pc, #84]	@ (8001810 <main+0x5f8>)
 80017bc:	6013      	str	r3, [r2, #0]
 80017be:	e039      	b.n	8001834 <main+0x61c>
 80017c0:	200003ec 	.word	0x200003ec
 80017c4:	200003dc 	.word	0x200003dc
 80017c8:	08008850 	.word	0x08008850
 80017cc:	20000410 	.word	0x20000410
 80017d0:	08008854 	.word	0x08008854
 80017d4:	40020800 	.word	0x40020800
 80017d8:	200003d4 	.word	0x200003d4
 80017dc:	200003d8 	.word	0x200003d8
 80017e0:	200003f8 	.word	0x200003f8
 80017e4:	200003fc 	.word	0x200003fc
 80017e8:	20000010 	.word	0x20000010
 80017ec:	20000014 	.word	0x20000014
 80017f0:	08008840 	.word	0x08008840
 80017f4:	20000428 	.word	0x20000428
 80017f8:	2000042c 	.word	0x2000042c
 80017fc:	20000018 	.word	0x20000018
 8001800:	2000001c 	.word	0x2000001c
 8001804:	200003f0 	.word	0x200003f0
 8001808:	200003e0 	.word	0x200003e0
 800180c:	20000004 	.word	0x20000004
 8001810:	200003e4 	.word	0x200003e4
 8001814:	20000008 	.word	0x20000008
			  }
		  } else if(green > G_value) {
 8001818:	7a3a      	ldrb	r2, [r7, #8]
 800181a:	4b95      	ldr	r3, [pc, #596]	@ (8001a70 <main+0x858>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	429a      	cmp	r2, r3
 8001820:	dd08      	ble.n	8001834 <main+0x61c>
			  if(G_PWM_channel > 0) {
 8001822:	4b94      	ldr	r3, [pc, #592]	@ (8001a74 <main+0x85c>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2b00      	cmp	r3, #0
 8001828:	dd04      	ble.n	8001834 <main+0x61c>
				  G_PWM_channel--;
 800182a:	4b92      	ldr	r3, [pc, #584]	@ (8001a74 <main+0x85c>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	3b01      	subs	r3, #1
 8001830:	4a90      	ldr	r2, [pc, #576]	@ (8001a74 <main+0x85c>)
 8001832:	6013      	str	r3, [r2, #0]
			  }
		  }

		  if(blue < B_value) {
 8001834:	79fa      	ldrb	r2, [r7, #7]
 8001836:	4b90      	ldr	r3, [pc, #576]	@ (8001a78 <main+0x860>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	429a      	cmp	r2, r3
 800183c:	da0b      	bge.n	8001856 <main+0x63e>
			  if(B_PWM_channel < max_PWM_blue_value) {
 800183e:	4b8f      	ldr	r3, [pc, #572]	@ (8001a7c <main+0x864>)
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	4b8f      	ldr	r3, [pc, #572]	@ (8001a80 <main+0x868>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	429a      	cmp	r2, r3
 8001848:	da13      	bge.n	8001872 <main+0x65a>
				  B_PWM_channel++;
 800184a:	4b8c      	ldr	r3, [pc, #560]	@ (8001a7c <main+0x864>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	3301      	adds	r3, #1
 8001850:	4a8a      	ldr	r2, [pc, #552]	@ (8001a7c <main+0x864>)
 8001852:	6013      	str	r3, [r2, #0]
 8001854:	e00d      	b.n	8001872 <main+0x65a>
			  }
		  } else if(blue > B_value) {
 8001856:	79fa      	ldrb	r2, [r7, #7]
 8001858:	4b87      	ldr	r3, [pc, #540]	@ (8001a78 <main+0x860>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	429a      	cmp	r2, r3
 800185e:	dd08      	ble.n	8001872 <main+0x65a>
			  if(B_PWM_channel > 0) {
 8001860:	4b86      	ldr	r3, [pc, #536]	@ (8001a7c <main+0x864>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2b00      	cmp	r3, #0
 8001866:	dd04      	ble.n	8001872 <main+0x65a>
				  B_PWM_channel--;
 8001868:	4b84      	ldr	r3, [pc, #528]	@ (8001a7c <main+0x864>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	3b01      	subs	r3, #1
 800186e:	4a83      	ldr	r2, [pc, #524]	@ (8001a7c <main+0x864>)
 8001870:	6013      	str	r3, [r2, #0]
			  }
		  }
		  pause_for_led = 0;
 8001872:	4b84      	ldr	r3, [pc, #528]	@ (8001a84 <main+0x86c>)
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	e006      	b.n	8001888 <main+0x670>
	  } else {
		  pause_for_led = pause_for_led + pause_for_user_input;
 800187a:	4b82      	ldr	r3, [pc, #520]	@ (8001a84 <main+0x86c>)
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	4b82      	ldr	r3, [pc, #520]	@ (8001a88 <main+0x870>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4413      	add	r3, r2
 8001884:	4a7f      	ldr	r2, [pc, #508]	@ (8001a84 <main+0x86c>)
 8001886:	6013      	str	r3, [r2, #0]
	  }

	  PWM_Config (&htim3 , TIM_CHANNEL_1 , PWM_FREQUENCY , R_PWM_channel ) ;
 8001888:	4b80      	ldr	r3, [pc, #512]	@ (8001a8c <main+0x874>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001890:	2100      	movs	r1, #0
 8001892:	487f      	ldr	r0, [pc, #508]	@ (8001a90 <main+0x878>)
 8001894:	f7ff fb8c 	bl	8000fb0 <PWM_Config>
	  PWM_Config (&htim3 , TIM_CHANNEL_2 , PWM_FREQUENCY , G_PWM_channel ) ;
 8001898:	4b76      	ldr	r3, [pc, #472]	@ (8001a74 <main+0x85c>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80018a0:	2104      	movs	r1, #4
 80018a2:	487b      	ldr	r0, [pc, #492]	@ (8001a90 <main+0x878>)
 80018a4:	f7ff fb84 	bl	8000fb0 <PWM_Config>
	  PWM_Config (&htim3 , TIM_CHANNEL_3 , PWM_FREQUENCY , B_PWM_channel ) ;
 80018a8:	4b74      	ldr	r3, [pc, #464]	@ (8001a7c <main+0x864>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80018b0:	2108      	movs	r1, #8
 80018b2:	4877      	ldr	r0, [pc, #476]	@ (8001a90 <main+0x878>)
 80018b4:	f7ff fb7c 	bl	8000fb0 <PWM_Config>

	  HAL_TIM_PWM_Start (&htim3 , TIM_CHANNEL_1 ) ;
 80018b8:	2100      	movs	r1, #0
 80018ba:	4875      	ldr	r0, [pc, #468]	@ (8001a90 <main+0x878>)
 80018bc:	f004 fbea 	bl	8006094 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start (&htim3 , TIM_CHANNEL_2 ) ;
 80018c0:	2104      	movs	r1, #4
 80018c2:	4873      	ldr	r0, [pc, #460]	@ (8001a90 <main+0x878>)
 80018c4:	f004 fbe6 	bl	8006094 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start (&htim3 , TIM_CHANNEL_3 ) ;
 80018c8:	2108      	movs	r1, #8
 80018ca:	4871      	ldr	r0, [pc, #452]	@ (8001a90 <main+0x878>)
 80018cc:	f004 fbe2 	bl	8006094 <HAL_TIM_PWM_Start>

	  snprintf(uart_buffer, sizeof(uart_buffer), "R: %u, G: %u, B: %u\r\n", red, green, blue);
 80018d0:	7a79      	ldrb	r1, [r7, #9]
 80018d2:	7a3b      	ldrb	r3, [r7, #8]
 80018d4:	79fa      	ldrb	r2, [r7, #7]
 80018d6:	9201      	str	r2, [sp, #4]
 80018d8:	9300      	str	r3, [sp, #0]
 80018da:	460b      	mov	r3, r1
 80018dc:	4a6d      	ldr	r2, [pc, #436]	@ (8001a94 <main+0x87c>)
 80018de:	2132      	movs	r1, #50	@ 0x32
 80018e0:	486d      	ldr	r0, [pc, #436]	@ (8001a98 <main+0x880>)
 80018e2:	f006 fa61 	bl	8007da8 <sniprintf>
	  HAL_UART_Transmit(&huart3, (uint8_t *)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 80018e6:	486c      	ldr	r0, [pc, #432]	@ (8001a98 <main+0x880>)
 80018e8:	f7fe fc92 	bl	8000210 <strlen>
 80018ec:	4603      	mov	r3, r0
 80018ee:	b29a      	uxth	r2, r3
 80018f0:	f04f 33ff 	mov.w	r3, #4294967295
 80018f4:	4968      	ldr	r1, [pc, #416]	@ (8001a98 <main+0x880>)
 80018f6:	4869      	ldr	r0, [pc, #420]	@ (8001a9c <main+0x884>)
 80018f8:	f005 f9e0 	bl	8006cbc <HAL_UART_Transmit>


	  HAL_UART_Receive(&huart3, (uint8_t *)temp_buffer, 11, pause_for_user_input);
 80018fc:	4b62      	ldr	r3, [pc, #392]	@ (8001a88 <main+0x870>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	220b      	movs	r2, #11
 8001902:	4967      	ldr	r1, [pc, #412]	@ (8001aa0 <main+0x888>)
 8001904:	4865      	ldr	r0, [pc, #404]	@ (8001a9c <main+0x884>)
 8001906:	f005 fa62 	bl	8006dce <HAL_UART_Receive>
	  // Wyślij odebrane dane z powrotem
	  HAL_UART_Transmit(&huart3, (uint8_t *)"Received: ", strlen("Received: "), HAL_MAX_DELAY);
 800190a:	f04f 33ff 	mov.w	r3, #4294967295
 800190e:	220a      	movs	r2, #10
 8001910:	4964      	ldr	r1, [pc, #400]	@ (8001aa4 <main+0x88c>)
 8001912:	4862      	ldr	r0, [pc, #392]	@ (8001a9c <main+0x884>)
 8001914:	f005 f9d2 	bl	8006cbc <HAL_UART_Transmit>

	  HAL_UART_Transmit(&huart3, (uint8_t *)temp_buffer, 11, HAL_MAX_DELAY);
 8001918:	f04f 33ff 	mov.w	r3, #4294967295
 800191c:	220b      	movs	r2, #11
 800191e:	4960      	ldr	r1, [pc, #384]	@ (8001aa0 <main+0x888>)
 8001920:	485e      	ldr	r0, [pc, #376]	@ (8001a9c <main+0x884>)
 8001922:	f005 f9cb 	bl	8006cbc <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart3, (uint8_t *)"\r\n", 2, HAL_MAX_DELAY);
 8001926:	f04f 33ff 	mov.w	r3, #4294967295
 800192a:	2202      	movs	r2, #2
 800192c:	495e      	ldr	r1, [pc, #376]	@ (8001aa8 <main+0x890>)
 800192e:	485b      	ldr	r0, [pc, #364]	@ (8001a9c <main+0x884>)
 8001930:	f005 f9c4 	bl	8006cbc <HAL_UART_Transmit>

	  if(normal_mode == 1) {
 8001934:	4b5d      	ldr	r3, [pc, #372]	@ (8001aac <main+0x894>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d007      	beq.n	800194c <main+0x734>
		  HAL_UART_Transmit(&huart3, (uint8_t *)"MODE: normal\r\n", strlen("MODE: normal\r\n"), HAL_MAX_DELAY);
 800193c:	f04f 33ff 	mov.w	r3, #4294967295
 8001940:	220e      	movs	r2, #14
 8001942:	495b      	ldr	r1, [pc, #364]	@ (8001ab0 <main+0x898>)
 8001944:	4855      	ldr	r0, [pc, #340]	@ (8001a9c <main+0x884>)
 8001946:	f005 f9b9 	bl	8006cbc <HAL_UART_Transmit>
 800194a:	e00d      	b.n	8001968 <main+0x750>
	  }
	  else if(normal_mode == 0) {
 800194c:	4b57      	ldr	r3, [pc, #348]	@ (8001aac <main+0x894>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	f083 0301 	eor.w	r3, r3, #1
 8001954:	b2db      	uxtb	r3, r3
 8001956:	2b00      	cmp	r3, #0
 8001958:	d006      	beq.n	8001968 <main+0x750>
		  HAL_UART_Transmit(&huart3, (uint8_t *)"MODE: high\r\n", strlen("MODE: high\r\n"), HAL_MAX_DELAY);
 800195a:	f04f 33ff 	mov.w	r3, #4294967295
 800195e:	220c      	movs	r2, #12
 8001960:	4954      	ldr	r1, [pc, #336]	@ (8001ab4 <main+0x89c>)
 8001962:	484e      	ldr	r0, [pc, #312]	@ (8001a9c <main+0x884>)
 8001964:	f005 f9aa 	bl	8006cbc <HAL_UART_Transmit>
	  }

	  for(int i = 0; i < 11; i++) {
 8001968:	2300      	movs	r3, #0
 800196a:	623b      	str	r3, [r7, #32]
 800196c:	e1cf      	b.n	8001d0e <main+0xaf6>
		  if (previous_temp_buffer[i] != temp_buffer[i]) {
 800196e:	4a52      	ldr	r2, [pc, #328]	@ (8001ab8 <main+0x8a0>)
 8001970:	6a3b      	ldr	r3, [r7, #32]
 8001972:	4413      	add	r3, r2
 8001974:	781a      	ldrb	r2, [r3, #0]
 8001976:	494a      	ldr	r1, [pc, #296]	@ (8001aa0 <main+0x888>)
 8001978:	6a3b      	ldr	r3, [r7, #32]
 800197a:	440b      	add	r3, r1
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	429a      	cmp	r2, r3
 8001980:	f000 81c2 	beq.w	8001d08 <main+0xaf0>
			  if(temp_buffer[11] != '\000' || temp_buffer[0] == '\000' || temp_buffer[1] == '\000' || temp_buffer[2] == '\000' || temp_buffer[3] == '\000') {
 8001984:	4b46      	ldr	r3, [pc, #280]	@ (8001aa0 <main+0x888>)
 8001986:	7adb      	ldrb	r3, [r3, #11]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d10f      	bne.n	80019ac <main+0x794>
 800198c:	4b44      	ldr	r3, [pc, #272]	@ (8001aa0 <main+0x888>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d00b      	beq.n	80019ac <main+0x794>
 8001994:	4b42      	ldr	r3, [pc, #264]	@ (8001aa0 <main+0x888>)
 8001996:	785b      	ldrb	r3, [r3, #1]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d007      	beq.n	80019ac <main+0x794>
 800199c:	4b40      	ldr	r3, [pc, #256]	@ (8001aa0 <main+0x888>)
 800199e:	789b      	ldrb	r3, [r3, #2]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d003      	beq.n	80019ac <main+0x794>
 80019a4:	4b3e      	ldr	r3, [pc, #248]	@ (8001aa0 <main+0x888>)
 80019a6:	78db      	ldrb	r3, [r3, #3]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d107      	bne.n	80019bc <main+0x7a4>
				  HAL_UART_Transmit(&huart3, (uint8_t *)"incorrect commnand\r\n", strlen("incorrect commnand\r\n"), HAL_MAX_DELAY);
 80019ac:	f04f 33ff 	mov.w	r3, #4294967295
 80019b0:	2214      	movs	r2, #20
 80019b2:	4942      	ldr	r1, [pc, #264]	@ (8001abc <main+0x8a4>)
 80019b4:	4839      	ldr	r0, [pc, #228]	@ (8001a9c <main+0x884>)
 80019b6:	f005 f981 	bl	8006cbc <HAL_UART_Transmit>
				  break;
 80019ba:	e1ac      	b.n	8001d16 <main+0xafe>
			  }
			  if(check_mode_normal() == 1) {
 80019bc:	f7ff fbc0 	bl	8001140 <check_mode_normal>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d004      	beq.n	80019d0 <main+0x7b8>
				  normal_mode_Config();
 80019c6:	f7ff fb55 	bl	8001074 <normal_mode_Config>
				  rewrite_previous_temp_buffer();
 80019ca:	f7ff fb99 	bl	8001100 <rewrite_previous_temp_buffer>
				  break;
 80019ce:	e1a2      	b.n	8001d16 <main+0xafe>
			  }
			  else if(check_mode_high() == 1) {
 80019d0:	f7ff fbda 	bl	8001188 <check_mode_high>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d10a      	bne.n	80019f0 <main+0x7d8>
				  high_mode_Config();
 80019da:	f7ff fb29 	bl	8001030 <high_mode_Config>
				  temp_buffer[9] = '\000';
 80019de:	4b30      	ldr	r3, [pc, #192]	@ (8001aa0 <main+0x888>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	725a      	strb	r2, [r3, #9]
				  temp_buffer[10] = '\000';
 80019e4:	4b2e      	ldr	r3, [pc, #184]	@ (8001aa0 <main+0x888>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	729a      	strb	r2, [r3, #10]
				  rewrite_previous_temp_buffer();
 80019ea:	f7ff fb89 	bl	8001100 <rewrite_previous_temp_buffer>
				  break;
 80019ee:	e192      	b.n	8001d16 <main+0xafe>
			  }
			  else if(check_help() == 1) {
 80019f0:	f7ff fbee 	bl	80011d0 <check_help>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d16e      	bne.n	8001ad8 <main+0x8c0>
				  HAL_UART_Transmit(&huart3, (uint8_t *)"mode:normal - enter normal mode\r\n", strlen("mode:normal - enter normal mode\r\n"), HAL_MAX_DELAY);
 80019fa:	f04f 33ff 	mov.w	r3, #4294967295
 80019fe:	2221      	movs	r2, #33	@ 0x21
 8001a00:	492f      	ldr	r1, [pc, #188]	@ (8001ac0 <main+0x8a8>)
 8001a02:	4826      	ldr	r0, [pc, #152]	@ (8001a9c <main+0x884>)
 8001a04:	f005 f95a 	bl	8006cbc <HAL_UART_Transmit>
				  HAL_UART_Transmit(&huart3, (uint8_t *)"mode:high - enter high mode\r\n", strlen("mode:high - enter high mode\r\n"), HAL_MAX_DELAY);
 8001a08:	f04f 33ff 	mov.w	r3, #4294967295
 8001a0c:	221d      	movs	r2, #29
 8001a0e:	492d      	ldr	r1, [pc, #180]	@ (8001ac4 <main+0x8ac>)
 8001a10:	4822      	ldr	r0, [pc, #136]	@ (8001a9c <main+0x884>)
 8001a12:	f005 f953 	bl	8006cbc <HAL_UART_Transmit>
				  HAL_UART_Transmit(&huart3, (uint8_t *)"COLORXXX - enter parameter to special color, where:\r\n", strlen("COLORXXX - enter parameter to special color, where:\r\n"), HAL_MAX_DELAY);
 8001a16:	f04f 33ff 	mov.w	r3, #4294967295
 8001a1a:	2235      	movs	r2, #53	@ 0x35
 8001a1c:	492a      	ldr	r1, [pc, #168]	@ (8001ac8 <main+0x8b0>)
 8001a1e:	481f      	ldr	r0, [pc, #124]	@ (8001a9c <main+0x884>)
 8001a20:	f005 f94c 	bl	8006cbc <HAL_UART_Transmit>
				  HAL_UART_Transmit(&huart3, (uint8_t *)"in the place COLOR - enter your desired color (R, G, B)\r\n", strlen("in the place COLOR - enter your desired color (R, G, B)\r\n"), HAL_MAX_DELAY);
 8001a24:	f04f 33ff 	mov.w	r3, #4294967295
 8001a28:	2239      	movs	r2, #57	@ 0x39
 8001a2a:	4928      	ldr	r1, [pc, #160]	@ (8001acc <main+0x8b4>)
 8001a2c:	481b      	ldr	r0, [pc, #108]	@ (8001a9c <main+0x884>)
 8001a2e:	f005 f945 	bl	8006cbc <HAL_UART_Transmit>
				  //HAL_UART_Transmit(&huart3, (uint8_t *)"color (R, G, B)\r\n", strlen("color (R, G, B)\r\n"), HAL_MAX_DELAY);
				  HAL_UART_Transmit(&huart3, (uint8_t *)"in the place XXX - enter your desired color value (0 - 255)\r\n", strlen("in the place XXX - enter your desired color value (0 - 255)\r\n"), HAL_MAX_DELAY);
 8001a32:	f04f 33ff 	mov.w	r3, #4294967295
 8001a36:	223d      	movs	r2, #61	@ 0x3d
 8001a38:	4925      	ldr	r1, [pc, #148]	@ (8001ad0 <main+0x8b8>)
 8001a3a:	4818      	ldr	r0, [pc, #96]	@ (8001a9c <main+0x884>)
 8001a3c:	f005 f93e 	bl	8006cbc <HAL_UART_Transmit>
				  HAL_UART_Transmit(&huart3, (uint8_t *)"for example: R175\r\n", strlen("for example: R175\r\n"), HAL_MAX_DELAY);
 8001a40:	f04f 33ff 	mov.w	r3, #4294967295
 8001a44:	2213      	movs	r2, #19
 8001a46:	4923      	ldr	r1, [pc, #140]	@ (8001ad4 <main+0x8bc>)
 8001a48:	4814      	ldr	r0, [pc, #80]	@ (8001a9c <main+0x884>)
 8001a4a:	f005 f937 	bl	8006cbc <HAL_UART_Transmit>
				  //HAL_UART_Transmit(&huart3, (uint8_t *)"R175\r\n", strlen("R175\r\n"), HAL_MAX_DELAY);
				  for(int k = 4; k < 11; k++) {
 8001a4e:	2304      	movs	r3, #4
 8001a50:	61fb      	str	r3, [r7, #28]
 8001a52:	e007      	b.n	8001a64 <main+0x84c>
					  temp_buffer[k] = '\000';
 8001a54:	4a12      	ldr	r2, [pc, #72]	@ (8001aa0 <main+0x888>)
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	4413      	add	r3, r2
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	701a      	strb	r2, [r3, #0]
				  for(int k = 4; k < 11; k++) {
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	3301      	adds	r3, #1
 8001a62:	61fb      	str	r3, [r7, #28]
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	2b0a      	cmp	r3, #10
 8001a68:	ddf4      	ble.n	8001a54 <main+0x83c>
				  }
				  rewrite_previous_temp_buffer();
 8001a6a:	f7ff fb49 	bl	8001100 <rewrite_previous_temp_buffer>
				  break;
 8001a6e:	e152      	b.n	8001d16 <main+0xafe>
 8001a70:	200003d8 	.word	0x200003d8
 8001a74:	200003e4 	.word	0x200003e4
 8001a78:	200003dc 	.word	0x200003dc
 8001a7c:	200003e8 	.word	0x200003e8
 8001a80:	2000000c 	.word	0x2000000c
 8001a84:	200003f0 	.word	0x200003f0
 8001a88:	20000000 	.word	0x20000000
 8001a8c:	200003e0 	.word	0x200003e0
 8001a90:	2000083c 	.word	0x2000083c
 8001a94:	08008858 	.word	0x08008858
 8001a98:	20000394 	.word	0x20000394
 8001a9c:	20000888 	.word	0x20000888
 8001aa0:	200003c8 	.word	0x200003c8
 8001aa4:	08008870 	.word	0x08008870
 8001aa8:	0800887c 	.word	0x0800887c
 8001aac:	20000020 	.word	0x20000020
 8001ab0:	08008880 	.word	0x08008880
 8001ab4:	08008890 	.word	0x08008890
 8001ab8:	20000404 	.word	0x20000404
 8001abc:	080088a0 	.word	0x080088a0
 8001ac0:	080088b8 	.word	0x080088b8
 8001ac4:	080088dc 	.word	0x080088dc
 8001ac8:	080088fc 	.word	0x080088fc
 8001acc:	08008934 	.word	0x08008934
 8001ad0:	08008970 	.word	0x08008970
 8001ad4:	080089b0 	.word	0x080089b0
			  }
			  else if(((temp_buffer[1] - '0') * 100 + (temp_buffer[2] - '0') * 10 + temp_buffer[3] - '0') > 255 || ((temp_buffer[1] - '0') * 100 + (temp_buffer[2] - '0') * 10 + temp_buffer[3] - '0') < 0) {
 8001ad8:	4b82      	ldr	r3, [pc, #520]	@ (8001ce4 <main+0xacc>)
 8001ada:	785b      	ldrb	r3, [r3, #1]
 8001adc:	3b30      	subs	r3, #48	@ 0x30
 8001ade:	2264      	movs	r2, #100	@ 0x64
 8001ae0:	fb02 f103 	mul.w	r1, r2, r3
 8001ae4:	4b7f      	ldr	r3, [pc, #508]	@ (8001ce4 <main+0xacc>)
 8001ae6:	789b      	ldrb	r3, [r3, #2]
 8001ae8:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8001aec:	4613      	mov	r3, r2
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	4413      	add	r3, r2
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	440b      	add	r3, r1
 8001af6:	4a7b      	ldr	r2, [pc, #492]	@ (8001ce4 <main+0xacc>)
 8001af8:	78d2      	ldrb	r2, [r2, #3]
 8001afa:	4413      	add	r3, r2
 8001afc:	f5b3 7f98 	cmp.w	r3, #304	@ 0x130
 8001b00:	da13      	bge.n	8001b2a <main+0x912>
 8001b02:	4b78      	ldr	r3, [pc, #480]	@ (8001ce4 <main+0xacc>)
 8001b04:	785b      	ldrb	r3, [r3, #1]
 8001b06:	3b30      	subs	r3, #48	@ 0x30
 8001b08:	2264      	movs	r2, #100	@ 0x64
 8001b0a:	fb02 f103 	mul.w	r1, r2, r3
 8001b0e:	4b75      	ldr	r3, [pc, #468]	@ (8001ce4 <main+0xacc>)
 8001b10:	789b      	ldrb	r3, [r3, #2]
 8001b12:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8001b16:	4613      	mov	r3, r2
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	4413      	add	r3, r2
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	440b      	add	r3, r1
 8001b20:	4a70      	ldr	r2, [pc, #448]	@ (8001ce4 <main+0xacc>)
 8001b22:	78d2      	ldrb	r2, [r2, #3]
 8001b24:	4413      	add	r3, r2
 8001b26:	2b2f      	cmp	r3, #47	@ 0x2f
 8001b28:	dc07      	bgt.n	8001b3a <main+0x922>
				  HAL_UART_Transmit(&huart3, (uint8_t *)"incorrect commnand\r\n", strlen("incorrect commnand\r\n"), HAL_MAX_DELAY);
 8001b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b2e:	2214      	movs	r2, #20
 8001b30:	496d      	ldr	r1, [pc, #436]	@ (8001ce8 <main+0xad0>)
 8001b32:	486e      	ldr	r0, [pc, #440]	@ (8001cec <main+0xad4>)
 8001b34:	f005 f8c2 	bl	8006cbc <HAL_UART_Transmit>
				  break;
 8001b38:	e0ed      	b.n	8001d16 <main+0xafe>
			  }
			  if (temp_buffer[0] == 'R') {
 8001b3a:	4b6a      	ldr	r3, [pc, #424]	@ (8001ce4 <main+0xacc>)
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	2b52      	cmp	r3, #82	@ 0x52
 8001b40:	d13a      	bne.n	8001bb8 <main+0x9a0>
				  R_value = (temp_buffer[1] - '0') * 100 + (temp_buffer[2] - '0') * 10 + temp_buffer[3] - '0';
 8001b42:	4b68      	ldr	r3, [pc, #416]	@ (8001ce4 <main+0xacc>)
 8001b44:	785b      	ldrb	r3, [r3, #1]
 8001b46:	3b30      	subs	r3, #48	@ 0x30
 8001b48:	2264      	movs	r2, #100	@ 0x64
 8001b4a:	fb02 f103 	mul.w	r1, r2, r3
 8001b4e:	4b65      	ldr	r3, [pc, #404]	@ (8001ce4 <main+0xacc>)
 8001b50:	789b      	ldrb	r3, [r3, #2]
 8001b52:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8001b56:	4613      	mov	r3, r2
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	4413      	add	r3, r2
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	440b      	add	r3, r1
 8001b60:	4a60      	ldr	r2, [pc, #384]	@ (8001ce4 <main+0xacc>)
 8001b62:	78d2      	ldrb	r2, [r2, #3]
 8001b64:	4413      	add	r3, r2
 8001b66:	3b30      	subs	r3, #48	@ 0x30
 8001b68:	4a61      	ldr	r2, [pc, #388]	@ (8001cf0 <main+0xad8>)
 8001b6a:	6013      	str	r3, [r2, #0]
				  sprintf(buffor_for_lcd, "%d", R_value);
 8001b6c:	4b60      	ldr	r3, [pc, #384]	@ (8001cf0 <main+0xad8>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	461a      	mov	r2, r3
 8001b72:	4960      	ldr	r1, [pc, #384]	@ (8001cf4 <main+0xadc>)
 8001b74:	4860      	ldr	r0, [pc, #384]	@ (8001cf8 <main+0xae0>)
 8001b76:	f006 f94d 	bl	8007e14 <siprintf>
				  LCD_Set_Cursor(1, 1);
 8001b7a:	2101      	movs	r1, #1
 8001b7c:	2001      	movs	r0, #1
 8001b7e:	f7ff f933 	bl	8000de8 <LCD_Set_Cursor>
				  LCD_Send_String(buffor_for_lcd);
 8001b82:	485d      	ldr	r0, [pc, #372]	@ (8001cf8 <main+0xae0>)
 8001b84:	f7ff f94e 	bl	8000e24 <LCD_Send_String>
				  if(R_value < 10) {
 8001b88:	4b59      	ldr	r3, [pc, #356]	@ (8001cf0 <main+0xad8>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2b09      	cmp	r3, #9
 8001b8e:	dc06      	bgt.n	8001b9e <main+0x986>
					  LCD_Set_Cursor(1, 2);
 8001b90:	2102      	movs	r1, #2
 8001b92:	2001      	movs	r0, #1
 8001b94:	f7ff f928 	bl	8000de8 <LCD_Set_Cursor>
					  LCD_Send_String(" ");
 8001b98:	4858      	ldr	r0, [pc, #352]	@ (8001cfc <main+0xae4>)
 8001b9a:	f7ff f943 	bl	8000e24 <LCD_Send_String>
				  }
				  if(R_value < 100) {
 8001b9e:	4b54      	ldr	r3, [pc, #336]	@ (8001cf0 <main+0xad8>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2b63      	cmp	r3, #99	@ 0x63
 8001ba4:	f300 808c 	bgt.w	8001cc0 <main+0xaa8>
					  LCD_Set_Cursor(1, 3);
 8001ba8:	2103      	movs	r1, #3
 8001baa:	2001      	movs	r0, #1
 8001bac:	f7ff f91c 	bl	8000de8 <LCD_Set_Cursor>
					  LCD_Send_String(" ");
 8001bb0:	4852      	ldr	r0, [pc, #328]	@ (8001cfc <main+0xae4>)
 8001bb2:	f7ff f937 	bl	8000e24 <LCD_Send_String>
 8001bb6:	e083      	b.n	8001cc0 <main+0xaa8>
				  }
			  } else if (temp_buffer[0] == 'G') {
 8001bb8:	4b4a      	ldr	r3, [pc, #296]	@ (8001ce4 <main+0xacc>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	2b47      	cmp	r3, #71	@ 0x47
 8001bbe:	d139      	bne.n	8001c34 <main+0xa1c>
				  G_value = (temp_buffer[1] - '0') * 100 + (temp_buffer[2] - '0') * 10 + temp_buffer[3] - '0';
 8001bc0:	4b48      	ldr	r3, [pc, #288]	@ (8001ce4 <main+0xacc>)
 8001bc2:	785b      	ldrb	r3, [r3, #1]
 8001bc4:	3b30      	subs	r3, #48	@ 0x30
 8001bc6:	2264      	movs	r2, #100	@ 0x64
 8001bc8:	fb02 f103 	mul.w	r1, r2, r3
 8001bcc:	4b45      	ldr	r3, [pc, #276]	@ (8001ce4 <main+0xacc>)
 8001bce:	789b      	ldrb	r3, [r3, #2]
 8001bd0:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	4413      	add	r3, r2
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	440b      	add	r3, r1
 8001bde:	4a41      	ldr	r2, [pc, #260]	@ (8001ce4 <main+0xacc>)
 8001be0:	78d2      	ldrb	r2, [r2, #3]
 8001be2:	4413      	add	r3, r2
 8001be4:	3b30      	subs	r3, #48	@ 0x30
 8001be6:	4a46      	ldr	r2, [pc, #280]	@ (8001d00 <main+0xae8>)
 8001be8:	6013      	str	r3, [r2, #0]
				  sprintf(buffor_for_lcd, "%d", G_value);
 8001bea:	4b45      	ldr	r3, [pc, #276]	@ (8001d00 <main+0xae8>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	461a      	mov	r2, r3
 8001bf0:	4940      	ldr	r1, [pc, #256]	@ (8001cf4 <main+0xadc>)
 8001bf2:	4841      	ldr	r0, [pc, #260]	@ (8001cf8 <main+0xae0>)
 8001bf4:	f006 f90e 	bl	8007e14 <siprintf>
				  LCD_Set_Cursor(1, 6);
 8001bf8:	2106      	movs	r1, #6
 8001bfa:	2001      	movs	r0, #1
 8001bfc:	f7ff f8f4 	bl	8000de8 <LCD_Set_Cursor>
				  LCD_Send_String(buffor_for_lcd);
 8001c00:	483d      	ldr	r0, [pc, #244]	@ (8001cf8 <main+0xae0>)
 8001c02:	f7ff f90f 	bl	8000e24 <LCD_Send_String>
				  if(G_value < 10) {
 8001c06:	4b3e      	ldr	r3, [pc, #248]	@ (8001d00 <main+0xae8>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2b09      	cmp	r3, #9
 8001c0c:	dc06      	bgt.n	8001c1c <main+0xa04>
					  LCD_Set_Cursor(1, 7);
 8001c0e:	2107      	movs	r1, #7
 8001c10:	2001      	movs	r0, #1
 8001c12:	f7ff f8e9 	bl	8000de8 <LCD_Set_Cursor>
					  LCD_Send_String(" ");
 8001c16:	4839      	ldr	r0, [pc, #228]	@ (8001cfc <main+0xae4>)
 8001c18:	f7ff f904 	bl	8000e24 <LCD_Send_String>
				  }
				  if(G_value < 100) {
 8001c1c:	4b38      	ldr	r3, [pc, #224]	@ (8001d00 <main+0xae8>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2b63      	cmp	r3, #99	@ 0x63
 8001c22:	dc4d      	bgt.n	8001cc0 <main+0xaa8>
					  LCD_Set_Cursor(1, 8);
 8001c24:	2108      	movs	r1, #8
 8001c26:	2001      	movs	r0, #1
 8001c28:	f7ff f8de 	bl	8000de8 <LCD_Set_Cursor>
					  LCD_Send_String(" ");
 8001c2c:	4833      	ldr	r0, [pc, #204]	@ (8001cfc <main+0xae4>)
 8001c2e:	f7ff f8f9 	bl	8000e24 <LCD_Send_String>
 8001c32:	e045      	b.n	8001cc0 <main+0xaa8>
				  }
			  } else if (temp_buffer[0] == 'B'){
 8001c34:	4b2b      	ldr	r3, [pc, #172]	@ (8001ce4 <main+0xacc>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	2b42      	cmp	r3, #66	@ 0x42
 8001c3a:	d139      	bne.n	8001cb0 <main+0xa98>
				  B_value = (temp_buffer[1] - '0') * 100 + (temp_buffer[2] - '0') * 10 + temp_buffer[3] - '0';
 8001c3c:	4b29      	ldr	r3, [pc, #164]	@ (8001ce4 <main+0xacc>)
 8001c3e:	785b      	ldrb	r3, [r3, #1]
 8001c40:	3b30      	subs	r3, #48	@ 0x30
 8001c42:	2264      	movs	r2, #100	@ 0x64
 8001c44:	fb02 f103 	mul.w	r1, r2, r3
 8001c48:	4b26      	ldr	r3, [pc, #152]	@ (8001ce4 <main+0xacc>)
 8001c4a:	789b      	ldrb	r3, [r3, #2]
 8001c4c:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8001c50:	4613      	mov	r3, r2
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	4413      	add	r3, r2
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	440b      	add	r3, r1
 8001c5a:	4a22      	ldr	r2, [pc, #136]	@ (8001ce4 <main+0xacc>)
 8001c5c:	78d2      	ldrb	r2, [r2, #3]
 8001c5e:	4413      	add	r3, r2
 8001c60:	3b30      	subs	r3, #48	@ 0x30
 8001c62:	4a28      	ldr	r2, [pc, #160]	@ (8001d04 <main+0xaec>)
 8001c64:	6013      	str	r3, [r2, #0]
				  sprintf(buffor_for_lcd, "%d", B_value);
 8001c66:	4b27      	ldr	r3, [pc, #156]	@ (8001d04 <main+0xaec>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	4921      	ldr	r1, [pc, #132]	@ (8001cf4 <main+0xadc>)
 8001c6e:	4822      	ldr	r0, [pc, #136]	@ (8001cf8 <main+0xae0>)
 8001c70:	f006 f8d0 	bl	8007e14 <siprintf>
				  LCD_Set_Cursor(1, 11);
 8001c74:	210b      	movs	r1, #11
 8001c76:	2001      	movs	r0, #1
 8001c78:	f7ff f8b6 	bl	8000de8 <LCD_Set_Cursor>
				  LCD_Send_String(buffor_for_lcd);
 8001c7c:	481e      	ldr	r0, [pc, #120]	@ (8001cf8 <main+0xae0>)
 8001c7e:	f7ff f8d1 	bl	8000e24 <LCD_Send_String>
				  if(B_value < 10) {
 8001c82:	4b20      	ldr	r3, [pc, #128]	@ (8001d04 <main+0xaec>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2b09      	cmp	r3, #9
 8001c88:	dc06      	bgt.n	8001c98 <main+0xa80>
					  LCD_Set_Cursor(1, 12);
 8001c8a:	210c      	movs	r1, #12
 8001c8c:	2001      	movs	r0, #1
 8001c8e:	f7ff f8ab 	bl	8000de8 <LCD_Set_Cursor>
					  LCD_Send_String(" ");
 8001c92:	481a      	ldr	r0, [pc, #104]	@ (8001cfc <main+0xae4>)
 8001c94:	f7ff f8c6 	bl	8000e24 <LCD_Send_String>
				  }
				  if(B_value < 100) {
 8001c98:	4b1a      	ldr	r3, [pc, #104]	@ (8001d04 <main+0xaec>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2b63      	cmp	r3, #99	@ 0x63
 8001c9e:	dc0f      	bgt.n	8001cc0 <main+0xaa8>
					  LCD_Set_Cursor(1, 13);
 8001ca0:	210d      	movs	r1, #13
 8001ca2:	2001      	movs	r0, #1
 8001ca4:	f7ff f8a0 	bl	8000de8 <LCD_Set_Cursor>
					  LCD_Send_String(" ");
 8001ca8:	4814      	ldr	r0, [pc, #80]	@ (8001cfc <main+0xae4>)
 8001caa:	f7ff f8bb 	bl	8000e24 <LCD_Send_String>
 8001cae:	e007      	b.n	8001cc0 <main+0xaa8>
				  }
			  } else {
				  HAL_UART_Transmit(&huart3, (uint8_t *)"incorrect commnand\r\n", strlen("incorrect commnand\r\n"), HAL_MAX_DELAY);
 8001cb0:	f04f 33ff 	mov.w	r3, #4294967295
 8001cb4:	2214      	movs	r2, #20
 8001cb6:	490c      	ldr	r1, [pc, #48]	@ (8001ce8 <main+0xad0>)
 8001cb8:	480c      	ldr	r0, [pc, #48]	@ (8001cec <main+0xad4>)
 8001cba:	f004 ffff 	bl	8006cbc <HAL_UART_Transmit>
				  break;
 8001cbe:	e02a      	b.n	8001d16 <main+0xafe>
			  }
			  for(int k = 4; k < 11; k++) {
 8001cc0:	2304      	movs	r3, #4
 8001cc2:	61bb      	str	r3, [r7, #24]
 8001cc4:	e007      	b.n	8001cd6 <main+0xabe>
				  temp_buffer[k] = '\000';
 8001cc6:	4a07      	ldr	r2, [pc, #28]	@ (8001ce4 <main+0xacc>)
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	4413      	add	r3, r2
 8001ccc:	2200      	movs	r2, #0
 8001cce:	701a      	strb	r2, [r3, #0]
			  for(int k = 4; k < 11; k++) {
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	61bb      	str	r3, [r7, #24]
 8001cd6:	69bb      	ldr	r3, [r7, #24]
 8001cd8:	2b0a      	cmp	r3, #10
 8001cda:	ddf4      	ble.n	8001cc6 <main+0xaae>
			  }
			  rewrite_previous_temp_buffer();
 8001cdc:	f7ff fa10 	bl	8001100 <rewrite_previous_temp_buffer>
			  break;
 8001ce0:	e019      	b.n	8001d16 <main+0xafe>
 8001ce2:	bf00      	nop
 8001ce4:	200003c8 	.word	0x200003c8
 8001ce8:	080088a0 	.word	0x080088a0
 8001cec:	20000888 	.word	0x20000888
 8001cf0:	200003d4 	.word	0x200003d4
 8001cf4:	08008850 	.word	0x08008850
 8001cf8:	20000410 	.word	0x20000410
 8001cfc:	08008854 	.word	0x08008854
 8001d00:	200003d8 	.word	0x200003d8
 8001d04:	200003dc 	.word	0x200003dc
	  for(int i = 0; i < 11; i++) {
 8001d08:	6a3b      	ldr	r3, [r7, #32]
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	623b      	str	r3, [r7, #32]
 8001d0e:	6a3b      	ldr	r3, [r7, #32]
 8001d10:	2b0a      	cmp	r3, #10
 8001d12:	f77f ae2c 	ble.w	800196e <main+0x756>
		  }
	  }

	  if ( HAL_GetTick() - last_time_update >= 100) {
 8001d16:	f001 f8c9 	bl	8002eac <HAL_GetTick>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	2b63      	cmp	r3, #99	@ 0x63
 8001d22:	f67f aae3 	bls.w	80012ec <main+0xd4>
		  if (oled_screen == 0) {
 8001d26:	4b7d      	ldr	r3, [pc, #500]	@ (8001f1c <main+0xd04>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d14d      	bne.n	8001dca <main+0xbb2>
			  sprintf(red_str, "%u", red);
 8001d2e:	7a7b      	ldrb	r3, [r7, #9]
 8001d30:	461a      	mov	r2, r3
 8001d32:	497b      	ldr	r1, [pc, #492]	@ (8001f20 <main+0xd08>)
 8001d34:	487b      	ldr	r0, [pc, #492]	@ (8001f24 <main+0xd0c>)
 8001d36:	f006 f86d 	bl	8007e14 <siprintf>
			  sprintf(green_str, "%u", green);
 8001d3a:	7a3b      	ldrb	r3, [r7, #8]
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	4978      	ldr	r1, [pc, #480]	@ (8001f20 <main+0xd08>)
 8001d40:	4879      	ldr	r0, [pc, #484]	@ (8001f28 <main+0xd10>)
 8001d42:	f006 f867 	bl	8007e14 <siprintf>
			  sprintf(blue_str, "%u", blue);
 8001d46:	79fb      	ldrb	r3, [r7, #7]
 8001d48:	461a      	mov	r2, r3
 8001d4a:	4975      	ldr	r1, [pc, #468]	@ (8001f20 <main+0xd08>)
 8001d4c:	4877      	ldr	r0, [pc, #476]	@ (8001f2c <main+0xd14>)
 8001d4e:	f006 f861 	bl	8007e14 <siprintf>
			  ssd1306_Fill(Black);
 8001d52:	2000      	movs	r0, #0
 8001d54:	f000 fb70 	bl	8002438 <ssd1306_Fill>

			  ssd1306_SetCursor(31, 1);
 8001d58:	2101      	movs	r1, #1
 8001d5a:	201f      	movs	r0, #31
 8001d5c:	f000 fcb8 	bl	80026d0 <ssd1306_SetCursor>
			  ssd1306_WriteString("Red:", Font_11x18, White);
 8001d60:	4b73      	ldr	r3, [pc, #460]	@ (8001f30 <main+0xd18>)
 8001d62:	2201      	movs	r2, #1
 8001d64:	9200      	str	r2, [sp, #0]
 8001d66:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d68:	4872      	ldr	r0, [pc, #456]	@ (8001f34 <main+0xd1c>)
 8001d6a:	f000 fc8b 	bl	8002684 <ssd1306_WriteString>
			  ssd1306_WriteString(red_str, Font_11x18, White);
 8001d6e:	4b70      	ldr	r3, [pc, #448]	@ (8001f30 <main+0xd18>)
 8001d70:	2201      	movs	r2, #1
 8001d72:	9200      	str	r2, [sp, #0]
 8001d74:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d76:	486b      	ldr	r0, [pc, #428]	@ (8001f24 <main+0xd0c>)
 8001d78:	f000 fc84 	bl	8002684 <ssd1306_WriteString>

			  ssd1306_SetCursor(29, 20);
 8001d7c:	2114      	movs	r1, #20
 8001d7e:	201d      	movs	r0, #29
 8001d80:	f000 fca6 	bl	80026d0 <ssd1306_SetCursor>
			  ssd1306_WriteString("Green:", Font_11x18, White);
 8001d84:	4b6a      	ldr	r3, [pc, #424]	@ (8001f30 <main+0xd18>)
 8001d86:	2201      	movs	r2, #1
 8001d88:	9200      	str	r2, [sp, #0]
 8001d8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d8c:	486a      	ldr	r0, [pc, #424]	@ (8001f38 <main+0xd20>)
 8001d8e:	f000 fc79 	bl	8002684 <ssd1306_WriteString>
			  ssd1306_WriteString(green_str, Font_11x18, White);
 8001d92:	4b67      	ldr	r3, [pc, #412]	@ (8001f30 <main+0xd18>)
 8001d94:	2201      	movs	r2, #1
 8001d96:	9200      	str	r2, [sp, #0]
 8001d98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d9a:	4863      	ldr	r0, [pc, #396]	@ (8001f28 <main+0xd10>)
 8001d9c:	f000 fc72 	bl	8002684 <ssd1306_WriteString>

			  ssd1306_SetCursor(30, 40);
 8001da0:	2128      	movs	r1, #40	@ 0x28
 8001da2:	201e      	movs	r0, #30
 8001da4:	f000 fc94 	bl	80026d0 <ssd1306_SetCursor>
			  ssd1306_WriteString("Blue:", Font_11x18, White);
 8001da8:	4b61      	ldr	r3, [pc, #388]	@ (8001f30 <main+0xd18>)
 8001daa:	2201      	movs	r2, #1
 8001dac:	9200      	str	r2, [sp, #0]
 8001dae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001db0:	4862      	ldr	r0, [pc, #392]	@ (8001f3c <main+0xd24>)
 8001db2:	f000 fc67 	bl	8002684 <ssd1306_WriteString>
			  ssd1306_WriteString(blue_str, Font_11x18, White);
 8001db6:	4b5e      	ldr	r3, [pc, #376]	@ (8001f30 <main+0xd18>)
 8001db8:	2201      	movs	r2, #1
 8001dba:	9200      	str	r2, [sp, #0]
 8001dbc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001dbe:	485b      	ldr	r0, [pc, #364]	@ (8001f2c <main+0xd14>)
 8001dc0:	f000 fc60 	bl	8002684 <ssd1306_WriteString>

			  ssd1306_UpdateScreen();
 8001dc4:	f000 fb50 	bl	8002468 <ssd1306_UpdateScreen>
 8001dc8:	e1b8      	b.n	800213c <main+0xf24>
		  }	else if(oled_screen == 1 || oled_screen == 2 || oled_screen == 3) {
 8001dca:	4b54      	ldr	r3, [pc, #336]	@ (8001f1c <main+0xd04>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d008      	beq.n	8001de4 <main+0xbcc>
 8001dd2:	4b52      	ldr	r3, [pc, #328]	@ (8001f1c <main+0xd04>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d004      	beq.n	8001de4 <main+0xbcc>
 8001dda:	4b50      	ldr	r3, [pc, #320]	@ (8001f1c <main+0xd04>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2b03      	cmp	r3, #3
 8001de0:	f040 81ac 	bne.w	800213c <main+0xf24>
			  ssd1306_Line(22, 1, 22, 64, White);
 8001de4:	2301      	movs	r3, #1
 8001de6:	9300      	str	r3, [sp, #0]
 8001de8:	2340      	movs	r3, #64	@ 0x40
 8001dea:	2216      	movs	r2, #22
 8001dec:	2101      	movs	r1, #1
 8001dee:	2016      	movs	r0, #22
 8001df0:	f000 fc86 	bl	8002700 <ssd1306_Line>
			  ssd1306_Line(19, 4, 22, 1, White);
 8001df4:	2301      	movs	r3, #1
 8001df6:	9300      	str	r3, [sp, #0]
 8001df8:	2301      	movs	r3, #1
 8001dfa:	2216      	movs	r2, #22
 8001dfc:	2104      	movs	r1, #4
 8001dfe:	2013      	movs	r0, #19
 8001e00:	f000 fc7e 	bl	8002700 <ssd1306_Line>
			  ssd1306_Line(22, 1, 25, 4, White);
 8001e04:	2301      	movs	r3, #1
 8001e06:	9300      	str	r3, [sp, #0]
 8001e08:	2304      	movs	r3, #4
 8001e0a:	2219      	movs	r2, #25
 8001e0c:	2101      	movs	r1, #1
 8001e0e:	2016      	movs	r0, #22
 8001e10:	f000 fc76 	bl	8002700 <ssd1306_Line>
			  ssd1306_SetCursor(1, 10);
 8001e14:	210a      	movs	r1, #10
 8001e16:	2001      	movs	r0, #1
 8001e18:	f000 fc5a 	bl	80026d0 <ssd1306_SetCursor>
			  ssd1306_WriteString("255", Font_6x8, White);
 8001e1c:	4b48      	ldr	r3, [pc, #288]	@ (8001f40 <main+0xd28>)
 8001e1e:	2201      	movs	r2, #1
 8001e20:	9200      	str	r2, [sp, #0]
 8001e22:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e24:	4847      	ldr	r0, [pc, #284]	@ (8001f44 <main+0xd2c>)
 8001e26:	f000 fc2d 	bl	8002684 <ssd1306_WriteString>
			  ssd1306_SetCursor(1, 22);
 8001e2a:	2116      	movs	r1, #22
 8001e2c:	2001      	movs	r0, #1
 8001e2e:	f000 fc4f 	bl	80026d0 <ssd1306_SetCursor>
			  ssd1306_WriteString("170", Font_6x8, White);
 8001e32:	4b43      	ldr	r3, [pc, #268]	@ (8001f40 <main+0xd28>)
 8001e34:	2201      	movs	r2, #1
 8001e36:	9200      	str	r2, [sp, #0]
 8001e38:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e3a:	4843      	ldr	r0, [pc, #268]	@ (8001f48 <main+0xd30>)
 8001e3c:	f000 fc22 	bl	8002684 <ssd1306_WriteString>
			  ssd1306_SetCursor(6, 35);
 8001e40:	2123      	movs	r1, #35	@ 0x23
 8001e42:	2006      	movs	r0, #6
 8001e44:	f000 fc44 	bl	80026d0 <ssd1306_SetCursor>
			  ssd1306_WriteString("85", Font_6x8, White);
 8001e48:	4b3d      	ldr	r3, [pc, #244]	@ (8001f40 <main+0xd28>)
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	9200      	str	r2, [sp, #0]
 8001e4e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e50:	483e      	ldr	r0, [pc, #248]	@ (8001f4c <main+0xd34>)
 8001e52:	f000 fc17 	bl	8002684 <ssd1306_WriteString>
			  ssd1306_SetCursor(oled_x_coordinate_left, 56);
 8001e56:	4b3e      	ldr	r3, [pc, #248]	@ (8001f50 <main+0xd38>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	2138      	movs	r1, #56	@ 0x38
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f000 fc36 	bl	80026d0 <ssd1306_SetCursor>
			  ssd1306_WriteString(number_left, Font_6x8, White);
 8001e64:	4b36      	ldr	r3, [pc, #216]	@ (8001f40 <main+0xd28>)
 8001e66:	2201      	movs	r2, #1
 8001e68:	9200      	str	r2, [sp, #0]
 8001e6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e6c:	4839      	ldr	r0, [pc, #228]	@ (8001f54 <main+0xd3c>)
 8001e6e:	f000 fc09 	bl	8002684 <ssd1306_WriteString>
			  ssd1306_SetCursor(oled_x_coordinate_right, 56);
 8001e72:	4b39      	ldr	r3, [pc, #228]	@ (8001f58 <main+0xd40>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	2138      	movs	r1, #56	@ 0x38
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f000 fc28 	bl	80026d0 <ssd1306_SetCursor>
			  ssd1306_WriteString(number_right, Font_6x8, White);
 8001e80:	4b2f      	ldr	r3, [pc, #188]	@ (8001f40 <main+0xd28>)
 8001e82:	2201      	movs	r2, #1
 8001e84:	9200      	str	r2, [sp, #0]
 8001e86:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e88:	4834      	ldr	r0, [pc, #208]	@ (8001f5c <main+0xd44>)
 8001e8a:	f000 fbfb 	bl	8002684 <ssd1306_WriteString>
			  ssd1306_Line(1, 50, 128, 50, White);
 8001e8e:	2301      	movs	r3, #1
 8001e90:	9300      	str	r3, [sp, #0]
 8001e92:	2332      	movs	r3, #50	@ 0x32
 8001e94:	2280      	movs	r2, #128	@ 0x80
 8001e96:	2132      	movs	r1, #50	@ 0x32
 8001e98:	2001      	movs	r0, #1
 8001e9a:	f000 fc31 	bl	8002700 <ssd1306_Line>
			  ssd1306_Line(125, 47, 128, 50, White);
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	9300      	str	r3, [sp, #0]
 8001ea2:	2332      	movs	r3, #50	@ 0x32
 8001ea4:	2280      	movs	r2, #128	@ 0x80
 8001ea6:	212f      	movs	r1, #47	@ 0x2f
 8001ea8:	207d      	movs	r0, #125	@ 0x7d
 8001eaa:	f000 fc29 	bl	8002700 <ssd1306_Line>
			  ssd1306_Line(125, 53, 128, 50, White);
 8001eae:	2301      	movs	r3, #1
 8001eb0:	9300      	str	r3, [sp, #0]
 8001eb2:	2332      	movs	r3, #50	@ 0x32
 8001eb4:	2280      	movs	r2, #128	@ 0x80
 8001eb6:	2135      	movs	r1, #53	@ 0x35
 8001eb8:	207d      	movs	r0, #125	@ 0x7d
 8001eba:	f000 fc21 	bl	8002700 <ssd1306_Line>
			  ssd1306_SetCursor(122, 38);
 8001ebe:	2126      	movs	r1, #38	@ 0x26
 8001ec0:	207a      	movs	r0, #122	@ 0x7a
 8001ec2:	f000 fc05 	bl	80026d0 <ssd1306_SetCursor>
			  ssd1306_WriteString("t", Font_6x8, White);
 8001ec6:	4b1e      	ldr	r3, [pc, #120]	@ (8001f40 <main+0xd28>)
 8001ec8:	2201      	movs	r2, #1
 8001eca:	9200      	str	r2, [sp, #0]
 8001ecc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ece:	4824      	ldr	r0, [pc, #144]	@ (8001f60 <main+0xd48>)
 8001ed0:	f000 fbd8 	bl	8002684 <ssd1306_WriteString>

			  for (int i = 1; i < 11; i++) {
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	617b      	str	r3, [r7, #20]
 8001ed8:	e01a      	b.n	8001f10 <main+0xcf8>
				  ssd1306_Line(22 + i * 10, 48, 22 + i * 10, 52, White);
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	461a      	mov	r2, r3
 8001ee0:	0092      	lsls	r2, r2, #2
 8001ee2:	4413      	add	r3, r2
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	3316      	adds	r3, #22
 8001eea:	b2d8      	uxtb	r0, r3
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	0092      	lsls	r2, r2, #2
 8001ef4:	4413      	add	r3, r2
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	3316      	adds	r3, #22
 8001efc:	b2da      	uxtb	r2, r3
 8001efe:	2301      	movs	r3, #1
 8001f00:	9300      	str	r3, [sp, #0]
 8001f02:	2334      	movs	r3, #52	@ 0x34
 8001f04:	2130      	movs	r1, #48	@ 0x30
 8001f06:	f000 fbfb 	bl	8002700 <ssd1306_Line>
			  for (int i = 1; i < 11; i++) {
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	617b      	str	r3, [r7, #20]
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	2b0a      	cmp	r3, #10
 8001f14:	dde1      	ble.n	8001eda <main+0xcc2>
			  }
			  for (int i = 1; i < 4; i++) {
 8001f16:	2301      	movs	r3, #1
 8001f18:	613b      	str	r3, [r7, #16]
 8001f1a:	e03c      	b.n	8001f96 <main+0xd7e>
 8001f1c:	200003f8 	.word	0x200003f8
 8001f20:	08008840 	.word	0x08008840
 8001f24:	2000041c 	.word	0x2000041c
 8001f28:	20000420 	.word	0x20000420
 8001f2c:	20000424 	.word	0x20000424
 8001f30:	08009dac 	.word	0x08009dac
 8001f34:	080089c4 	.word	0x080089c4
 8001f38:	080089cc 	.word	0x080089cc
 8001f3c:	080089d4 	.word	0x080089d4
 8001f40:	08009da0 	.word	0x08009da0
 8001f44:	080089dc 	.word	0x080089dc
 8001f48:	080089e0 	.word	0x080089e0
 8001f4c:	080089e4 	.word	0x080089e4
 8001f50:	20000018 	.word	0x20000018
 8001f54:	20000428 	.word	0x20000428
 8001f58:	2000001c 	.word	0x2000001c
 8001f5c:	2000042c 	.word	0x2000042c
 8001f60:	080089e8 	.word	0x080089e8
				  ssd1306_Line(20, 13 * i, 24, 13 * i, White);
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	461a      	mov	r2, r3
 8001f6a:	0052      	lsls	r2, r2, #1
 8001f6c:	441a      	add	r2, r3
 8001f6e:	0092      	lsls	r2, r2, #2
 8001f70:	4413      	add	r3, r2
 8001f72:	b2d9      	uxtb	r1, r3
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	461a      	mov	r2, r3
 8001f7a:	0052      	lsls	r2, r2, #1
 8001f7c:	441a      	add	r2, r3
 8001f7e:	0092      	lsls	r2, r2, #2
 8001f80:	4413      	add	r3, r2
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	2201      	movs	r2, #1
 8001f86:	9200      	str	r2, [sp, #0]
 8001f88:	2218      	movs	r2, #24
 8001f8a:	2014      	movs	r0, #20
 8001f8c:	f000 fbb8 	bl	8002700 <ssd1306_Line>
			  for (int i = 1; i < 4; i++) {
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	3301      	adds	r3, #1
 8001f94:	613b      	str	r3, [r7, #16]
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	2b03      	cmp	r3, #3
 8001f9a:	dde3      	ble.n	8001f64 <main+0xd4c>
			  }

			  if(oled_x_counter + 23 == 129) {
 8001f9c:	4b6a      	ldr	r3, [pc, #424]	@ (8002148 <main+0xf30>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2b6a      	cmp	r3, #106	@ 0x6a
 8001fa2:	d14a      	bne.n	800203a <main+0xe22>
				  ssd1306_Fill(Black);
 8001fa4:	2000      	movs	r0, #0
 8001fa6:	f000 fa47 	bl	8002438 <ssd1306_Fill>
				  oled_x_counter = 0;
 8001faa:	4b67      	ldr	r3, [pc, #412]	@ (8002148 <main+0xf30>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	601a      	str	r2, [r3, #0]
				  oled_x_number_left = oled_x_number_left + 20;
 8001fb0:	4b66      	ldr	r3, [pc, #408]	@ (800214c <main+0xf34>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	3314      	adds	r3, #20
 8001fb6:	4a65      	ldr	r2, [pc, #404]	@ (800214c <main+0xf34>)
 8001fb8:	6013      	str	r3, [r2, #0]
				  oled_x_number_right = oled_x_number_right + 20;
 8001fba:	4b65      	ldr	r3, [pc, #404]	@ (8002150 <main+0xf38>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	3314      	adds	r3, #20
 8001fc0:	4a63      	ldr	r2, [pc, #396]	@ (8002150 <main+0xf38>)
 8001fc2:	6013      	str	r3, [r2, #0]
				  sprintf(number_left, "%u", oled_x_number_left);
 8001fc4:	4b61      	ldr	r3, [pc, #388]	@ (800214c <main+0xf34>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	461a      	mov	r2, r3
 8001fca:	4962      	ldr	r1, [pc, #392]	@ (8002154 <main+0xf3c>)
 8001fcc:	4862      	ldr	r0, [pc, #392]	@ (8002158 <main+0xf40>)
 8001fce:	f005 ff21 	bl	8007e14 <siprintf>
				  sprintf(number_right, "%u", oled_x_number_right);
 8001fd2:	4b5f      	ldr	r3, [pc, #380]	@ (8002150 <main+0xf38>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	495e      	ldr	r1, [pc, #376]	@ (8002154 <main+0xf3c>)
 8001fda:	4860      	ldr	r0, [pc, #384]	@ (800215c <main+0xf44>)
 8001fdc:	f005 ff1a 	bl	8007e14 <siprintf>

				  if(oled_x_number_right >= 100) {
 8001fe0:	4b5b      	ldr	r3, [pc, #364]	@ (8002150 <main+0xf38>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2b63      	cmp	r3, #99	@ 0x63
 8001fe6:	dd02      	ble.n	8001fee <main+0xdd6>
					  oled_x_coordinate_right = 109;
 8001fe8:	4b5d      	ldr	r3, [pc, #372]	@ (8002160 <main+0xf48>)
 8001fea:	226d      	movs	r2, #109	@ 0x6d
 8001fec:	601a      	str	r2, [r3, #0]
				  }
				  if(oled_x_number_left >= 100) {
 8001fee:	4b57      	ldr	r3, [pc, #348]	@ (800214c <main+0xf34>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2b63      	cmp	r3, #99	@ 0x63
 8001ff4:	dd02      	ble.n	8001ffc <main+0xde4>
					  oled_x_coordinate_left = 54;
 8001ff6:	4b5b      	ldr	r3, [pc, #364]	@ (8002164 <main+0xf4c>)
 8001ff8:	2236      	movs	r2, #54	@ 0x36
 8001ffa:	601a      	str	r2, [r3, #0]
				  }
				  if(oled_x_number_right >= 980) {
 8001ffc:	4b54      	ldr	r3, [pc, #336]	@ (8002150 <main+0xf38>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f5b3 7f75 	cmp.w	r3, #980	@ 0x3d4
 8002004:	db19      	blt.n	800203a <main+0xe22>
					  oled_x_number_left = 10;
 8002006:	4b51      	ldr	r3, [pc, #324]	@ (800214c <main+0xf34>)
 8002008:	220a      	movs	r2, #10
 800200a:	601a      	str	r2, [r3, #0]
					  oled_x_number_right = 20;
 800200c:	4b50      	ldr	r3, [pc, #320]	@ (8002150 <main+0xf38>)
 800200e:	2214      	movs	r2, #20
 8002010:	601a      	str	r2, [r3, #0]
					  oled_x_coordinate_left = 57;
 8002012:	4b54      	ldr	r3, [pc, #336]	@ (8002164 <main+0xf4c>)
 8002014:	2239      	movs	r2, #57	@ 0x39
 8002016:	601a      	str	r2, [r3, #0]
					  oled_x_coordinate_right = 115;
 8002018:	4b51      	ldr	r3, [pc, #324]	@ (8002160 <main+0xf48>)
 800201a:	2273      	movs	r2, #115	@ 0x73
 800201c:	601a      	str	r2, [r3, #0]
					  sprintf(number_left, "%u", oled_x_number_left);
 800201e:	4b4b      	ldr	r3, [pc, #300]	@ (800214c <main+0xf34>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	461a      	mov	r2, r3
 8002024:	494b      	ldr	r1, [pc, #300]	@ (8002154 <main+0xf3c>)
 8002026:	484c      	ldr	r0, [pc, #304]	@ (8002158 <main+0xf40>)
 8002028:	f005 fef4 	bl	8007e14 <siprintf>
					  sprintf(number_right, "%u", oled_x_number_right);
 800202c:	4b48      	ldr	r3, [pc, #288]	@ (8002150 <main+0xf38>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	461a      	mov	r2, r3
 8002032:	4948      	ldr	r1, [pc, #288]	@ (8002154 <main+0xf3c>)
 8002034:	4849      	ldr	r0, [pc, #292]	@ (800215c <main+0xf44>)
 8002036:	f005 feed 	bl	8007e14 <siprintf>
				  }
			  }

			  ssd1306_SetCursor(31, 1);
 800203a:	2101      	movs	r1, #1
 800203c:	201f      	movs	r0, #31
 800203e:	f000 fb47 	bl	80026d0 <ssd1306_SetCursor>
			  if (oled_screen == 1) {
 8002042:	4b49      	ldr	r3, [pc, #292]	@ (8002168 <main+0xf50>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	2b01      	cmp	r3, #1
 8002048:	d107      	bne.n	800205a <main+0xe42>
				  ssd1306_WriteString("Red", Font_6x8, White);
 800204a:	4b48      	ldr	r3, [pc, #288]	@ (800216c <main+0xf54>)
 800204c:	2201      	movs	r2, #1
 800204e:	9200      	str	r2, [sp, #0]
 8002050:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002052:	4847      	ldr	r0, [pc, #284]	@ (8002170 <main+0xf58>)
 8002054:	f000 fb16 	bl	8002684 <ssd1306_WriteString>
 8002058:	e016      	b.n	8002088 <main+0xe70>
			  } else if (oled_screen == 2) {
 800205a:	4b43      	ldr	r3, [pc, #268]	@ (8002168 <main+0xf50>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2b02      	cmp	r3, #2
 8002060:	d107      	bne.n	8002072 <main+0xe5a>
				  ssd1306_WriteString("Green", Font_6x8, White);
 8002062:	4b42      	ldr	r3, [pc, #264]	@ (800216c <main+0xf54>)
 8002064:	2201      	movs	r2, #1
 8002066:	9200      	str	r2, [sp, #0]
 8002068:	cb0e      	ldmia	r3, {r1, r2, r3}
 800206a:	4842      	ldr	r0, [pc, #264]	@ (8002174 <main+0xf5c>)
 800206c:	f000 fb0a 	bl	8002684 <ssd1306_WriteString>
 8002070:	e00a      	b.n	8002088 <main+0xe70>
			  } else if (oled_screen == 3) {
 8002072:	4b3d      	ldr	r3, [pc, #244]	@ (8002168 <main+0xf50>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2b03      	cmp	r3, #3
 8002078:	d106      	bne.n	8002088 <main+0xe70>
				  ssd1306_WriteString("Blue", Font_6x8, White);
 800207a:	4b3c      	ldr	r3, [pc, #240]	@ (800216c <main+0xf54>)
 800207c:	2201      	movs	r2, #1
 800207e:	9200      	str	r2, [sp, #0]
 8002080:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002082:	483d      	ldr	r0, [pc, #244]	@ (8002178 <main+0xf60>)
 8002084:	f000 fafe 	bl	8002684 <ssd1306_WriteString>
			  }
			  if (oled_screen == 1) {
 8002088:	4b37      	ldr	r3, [pc, #220]	@ (8002168 <main+0xf50>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2b01      	cmp	r3, #1
 800208e:	d117      	bne.n	80020c0 <main+0xea8>
				  ssd1306_DrawPixel(oled_x_counter + 23, 63 - map_value(red, 0, 255, 13, 50), White);
 8002090:	4b2d      	ldr	r3, [pc, #180]	@ (8002148 <main+0xf30>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	b2db      	uxtb	r3, r3
 8002096:	3317      	adds	r3, #23
 8002098:	b2dc      	uxtb	r4, r3
 800209a:	7a7b      	ldrb	r3, [r7, #9]
 800209c:	b298      	uxth	r0, r3
 800209e:	2332      	movs	r3, #50	@ 0x32
 80020a0:	9300      	str	r3, [sp, #0]
 80020a2:	230d      	movs	r3, #13
 80020a4:	22ff      	movs	r2, #255	@ 0xff
 80020a6:	2100      	movs	r1, #0
 80020a8:	f7fe ff5c 	bl	8000f64 <map_value>
 80020ac:	4603      	mov	r3, r0
 80020ae:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	2201      	movs	r2, #1
 80020b6:	4619      	mov	r1, r3
 80020b8:	4620      	mov	r0, r4
 80020ba:	f000 f9fd 	bl	80024b8 <ssd1306_DrawPixel>
 80020be:	e036      	b.n	800212e <main+0xf16>
			  } else if (oled_screen == 2) {
 80020c0:	4b29      	ldr	r3, [pc, #164]	@ (8002168 <main+0xf50>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d117      	bne.n	80020f8 <main+0xee0>
				  ssd1306_DrawPixel(oled_x_counter + 23, 63 - map_value(green, 0, 255, 13, 50), White);
 80020c8:	4b1f      	ldr	r3, [pc, #124]	@ (8002148 <main+0xf30>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	3317      	adds	r3, #23
 80020d0:	b2dc      	uxtb	r4, r3
 80020d2:	7a3b      	ldrb	r3, [r7, #8]
 80020d4:	b298      	uxth	r0, r3
 80020d6:	2332      	movs	r3, #50	@ 0x32
 80020d8:	9300      	str	r3, [sp, #0]
 80020da:	230d      	movs	r3, #13
 80020dc:	22ff      	movs	r2, #255	@ 0xff
 80020de:	2100      	movs	r1, #0
 80020e0:	f7fe ff40 	bl	8000f64 <map_value>
 80020e4:	4603      	mov	r3, r0
 80020e6:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	2201      	movs	r2, #1
 80020ee:	4619      	mov	r1, r3
 80020f0:	4620      	mov	r0, r4
 80020f2:	f000 f9e1 	bl	80024b8 <ssd1306_DrawPixel>
 80020f6:	e01a      	b.n	800212e <main+0xf16>
			  } else if (oled_screen == 3) {
 80020f8:	4b1b      	ldr	r3, [pc, #108]	@ (8002168 <main+0xf50>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2b03      	cmp	r3, #3
 80020fe:	d116      	bne.n	800212e <main+0xf16>
				  ssd1306_DrawPixel(oled_x_counter + 23, 63 - map_value(blue, 0, 255, 13, 50), White);
 8002100:	4b11      	ldr	r3, [pc, #68]	@ (8002148 <main+0xf30>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	b2db      	uxtb	r3, r3
 8002106:	3317      	adds	r3, #23
 8002108:	b2dc      	uxtb	r4, r3
 800210a:	79fb      	ldrb	r3, [r7, #7]
 800210c:	b298      	uxth	r0, r3
 800210e:	2332      	movs	r3, #50	@ 0x32
 8002110:	9300      	str	r3, [sp, #0]
 8002112:	230d      	movs	r3, #13
 8002114:	22ff      	movs	r2, #255	@ 0xff
 8002116:	2100      	movs	r1, #0
 8002118:	f7fe ff24 	bl	8000f64 <map_value>
 800211c:	4603      	mov	r3, r0
 800211e:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 8002122:	b2db      	uxtb	r3, r3
 8002124:	2201      	movs	r2, #1
 8002126:	4619      	mov	r1, r3
 8002128:	4620      	mov	r0, r4
 800212a:	f000 f9c5 	bl	80024b8 <ssd1306_DrawPixel>
			  }
			  oled_x_counter++;
 800212e:	4b06      	ldr	r3, [pc, #24]	@ (8002148 <main+0xf30>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	3301      	adds	r3, #1
 8002134:	4a04      	ldr	r2, [pc, #16]	@ (8002148 <main+0xf30>)
 8002136:	6013      	str	r3, [r2, #0]

			  ssd1306_UpdateScreen();
 8002138:	f000 f996 	bl	8002468 <ssd1306_UpdateScreen>
		  }
		  last_time_update = HAL_GetTick();
 800213c:	f000 feb6 	bl	8002eac <HAL_GetTick>
 8002140:	6278      	str	r0, [r7, #36]	@ 0x24
  {
 8002142:	f7ff b8d3 	b.w	80012ec <main+0xd4>
 8002146:	bf00      	nop
 8002148:	200003fc 	.word	0x200003fc
 800214c:	20000010 	.word	0x20000010
 8002150:	20000014 	.word	0x20000014
 8002154:	08008840 	.word	0x08008840
 8002158:	20000428 	.word	0x20000428
 800215c:	2000042c 	.word	0x2000042c
 8002160:	2000001c 	.word	0x2000001c
 8002164:	20000018 	.word	0x20000018
 8002168:	200003f8 	.word	0x200003f8
 800216c:	08009da0 	.word	0x08009da0
 8002170:	080089ec 	.word	0x080089ec
 8002174:	080089f0 	.word	0x080089f0
 8002178:	080089f8 	.word	0x080089f8

0800217c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b094      	sub	sp, #80	@ 0x50
 8002180:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002182:	f107 0320 	add.w	r3, r7, #32
 8002186:	2230      	movs	r2, #48	@ 0x30
 8002188:	2100      	movs	r1, #0
 800218a:	4618      	mov	r0, r3
 800218c:	f005 fe7e 	bl	8007e8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002190:	f107 030c 	add.w	r3, r7, #12
 8002194:	2200      	movs	r2, #0
 8002196:	601a      	str	r2, [r3, #0]
 8002198:	605a      	str	r2, [r3, #4]
 800219a:	609a      	str	r2, [r3, #8]
 800219c:	60da      	str	r2, [r3, #12]
 800219e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80021a0:	f002 fe56 	bl	8004e50 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80021a4:	4b27      	ldr	r3, [pc, #156]	@ (8002244 <SystemClock_Config+0xc8>)
 80021a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a8:	4a26      	ldr	r2, [pc, #152]	@ (8002244 <SystemClock_Config+0xc8>)
 80021aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80021b0:	4b24      	ldr	r3, [pc, #144]	@ (8002244 <SystemClock_Config+0xc8>)
 80021b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021b8:	60bb      	str	r3, [r7, #8]
 80021ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80021bc:	4b22      	ldr	r3, [pc, #136]	@ (8002248 <SystemClock_Config+0xcc>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80021c4:	4a20      	ldr	r2, [pc, #128]	@ (8002248 <SystemClock_Config+0xcc>)
 80021c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021ca:	6013      	str	r3, [r2, #0]
 80021cc:	4b1e      	ldr	r3, [pc, #120]	@ (8002248 <SystemClock_Config+0xcc>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80021d4:	607b      	str	r3, [r7, #4]
 80021d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80021d8:	2301      	movs	r3, #1
 80021da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80021dc:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80021e0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021e2:	2302      	movs	r3, #2
 80021e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80021e6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80021ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80021ec:	2304      	movs	r3, #4
 80021ee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80021f0:	2348      	movs	r3, #72	@ 0x48
 80021f2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80021f4:	2302      	movs	r3, #2
 80021f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80021f8:	2303      	movs	r3, #3
 80021fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021fc:	f107 0320 	add.w	r3, r7, #32
 8002200:	4618      	mov	r0, r3
 8002202:	f002 fe35 	bl	8004e70 <HAL_RCC_OscConfig>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800220c:	f000 f86a 	bl	80022e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002210:	230f      	movs	r3, #15
 8002212:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002214:	2302      	movs	r3, #2
 8002216:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002218:	2300      	movs	r3, #0
 800221a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800221c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002220:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002222:	2300      	movs	r3, #0
 8002224:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002226:	f107 030c 	add.w	r3, r7, #12
 800222a:	2102      	movs	r1, #2
 800222c:	4618      	mov	r0, r3
 800222e:	f003 f8c3 	bl	80053b8 <HAL_RCC_ClockConfig>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002238:	f000 f854 	bl	80022e4 <Error_Handler>
  }
}
 800223c:	bf00      	nop
 800223e:	3750      	adds	r7, #80	@ 0x50
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	40023800 	.word	0x40023800
 8002248:	40007000 	.word	0x40007000

0800224c <I2C_Scan>:

/* USER CODE BEGIN 4 */
void I2C_Scan() {
 800224c:	b580      	push	{r7, lr}
 800224e:	b092      	sub	sp, #72	@ 0x48
 8002250:	af00      	add	r7, sp, #0
    char msg[64];
    HAL_UART_Transmit(&huart3, (uint8_t *)"Scanning I2C bus...\r\n", strlen("Scanning I2C bus...\r\n"), HAL_MAX_DELAY);
 8002252:	f04f 33ff 	mov.w	r3, #4294967295
 8002256:	2215      	movs	r2, #21
 8002258:	491d      	ldr	r1, [pc, #116]	@ (80022d0 <I2C_Scan+0x84>)
 800225a:	481e      	ldr	r0, [pc, #120]	@ (80022d4 <I2C_Scan+0x88>)
 800225c:	f004 fd2e 	bl	8006cbc <HAL_UART_Transmit>

    for (uint8_t address = 1; address < 128; address++) {
 8002260:	2301      	movs	r3, #1
 8002262:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8002266:	e024      	b.n	80022b2 <I2C_Scan+0x66>
        // Sprawdź, czy urządzenie odpowiada na dany adres
        if (HAL_I2C_IsDeviceReady(&hi2c1, (address << 1), 1, 10) == HAL_OK) {
 8002268:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800226c:	b29b      	uxth	r3, r3
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	b299      	uxth	r1, r3
 8002272:	230a      	movs	r3, #10
 8002274:	2201      	movs	r2, #1
 8002276:	4818      	ldr	r0, [pc, #96]	@ (80022d8 <I2C_Scan+0x8c>)
 8002278:	f002 f818 	bl	80042ac <HAL_I2C_IsDeviceReady>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d112      	bne.n	80022a8 <I2C_Scan+0x5c>
            snprintf(msg, sizeof(msg), "Device found at address: 0x%02X\r\n", address);
 8002282:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002286:	1d38      	adds	r0, r7, #4
 8002288:	4a14      	ldr	r2, [pc, #80]	@ (80022dc <I2C_Scan+0x90>)
 800228a:	2140      	movs	r1, #64	@ 0x40
 800228c:	f005 fd8c 	bl	8007da8 <sniprintf>
            HAL_UART_Transmit(&huart3, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8002290:	1d3b      	adds	r3, r7, #4
 8002292:	4618      	mov	r0, r3
 8002294:	f7fd ffbc 	bl	8000210 <strlen>
 8002298:	4603      	mov	r3, r0
 800229a:	b29a      	uxth	r2, r3
 800229c:	1d39      	adds	r1, r7, #4
 800229e:	f04f 33ff 	mov.w	r3, #4294967295
 80022a2:	480c      	ldr	r0, [pc, #48]	@ (80022d4 <I2C_Scan+0x88>)
 80022a4:	f004 fd0a 	bl	8006cbc <HAL_UART_Transmit>
    for (uint8_t address = 1; address < 128; address++) {
 80022a8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80022ac:	3301      	adds	r3, #1
 80022ae:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80022b2:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	dad6      	bge.n	8002268 <I2C_Scan+0x1c>
        }
    }

    HAL_UART_Transmit(&huart3, (uint8_t *)"I2C scan complete.\r\n", strlen("I2C scan complete.\r\n"), HAL_MAX_DELAY);
 80022ba:	f04f 33ff 	mov.w	r3, #4294967295
 80022be:	2214      	movs	r2, #20
 80022c0:	4907      	ldr	r1, [pc, #28]	@ (80022e0 <I2C_Scan+0x94>)
 80022c2:	4804      	ldr	r0, [pc, #16]	@ (80022d4 <I2C_Scan+0x88>)
 80022c4:	f004 fcfa 	bl	8006cbc <HAL_UART_Transmit>
}
 80022c8:	bf00      	nop
 80022ca:	3748      	adds	r7, #72	@ 0x48
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	08008a00 	.word	0x08008a00
 80022d4:	20000888 	.word	0x20000888
 80022d8:	200002ec 	.word	0x200002ec
 80022dc:	08008a18 	.word	0x08008a18
 80022e0:	08008a3c 	.word	0x08008a3c

080022e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022e8:	b672      	cpsid	i
}
 80022ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022ec:	bf00      	nop
 80022ee:	e7fd      	b.n	80022ec <Error_Handler+0x8>

080022f0 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80022f4:	bf00      	nop
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
	...

08002300 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002300:	b580      	push	{r7, lr}
 8002302:	b086      	sub	sp, #24
 8002304:	af04      	add	r7, sp, #16
 8002306:	4603      	mov	r3, r0
 8002308:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800230a:	f04f 33ff 	mov.w	r3, #4294967295
 800230e:	9302      	str	r3, [sp, #8]
 8002310:	2301      	movs	r3, #1
 8002312:	9301      	str	r3, [sp, #4]
 8002314:	1dfb      	adds	r3, r7, #7
 8002316:	9300      	str	r3, [sp, #0]
 8002318:	2301      	movs	r3, #1
 800231a:	2200      	movs	r2, #0
 800231c:	2178      	movs	r1, #120	@ 0x78
 800231e:	4803      	ldr	r0, [pc, #12]	@ (800232c <ssd1306_WriteCommand+0x2c>)
 8002320:	f001 feb0 	bl	8004084 <HAL_I2C_Mem_Write>
}
 8002324:	bf00      	nop
 8002326:	3708      	adds	r7, #8
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	20000340 	.word	0x20000340

08002330 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002330:	b580      	push	{r7, lr}
 8002332:	b086      	sub	sp, #24
 8002334:	af04      	add	r7, sp, #16
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	b29b      	uxth	r3, r3
 800233e:	f04f 32ff 	mov.w	r2, #4294967295
 8002342:	9202      	str	r2, [sp, #8]
 8002344:	9301      	str	r3, [sp, #4]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	9300      	str	r3, [sp, #0]
 800234a:	2301      	movs	r3, #1
 800234c:	2240      	movs	r2, #64	@ 0x40
 800234e:	2178      	movs	r1, #120	@ 0x78
 8002350:	4803      	ldr	r0, [pc, #12]	@ (8002360 <ssd1306_WriteData+0x30>)
 8002352:	f001 fe97 	bl	8004084 <HAL_I2C_Mem_Write>
}
 8002356:	bf00      	nop
 8002358:	3708      	adds	r7, #8
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	20000340 	.word	0x20000340

08002364 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8002368:	f7ff ffc2 	bl	80022f0 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 800236c:	2064      	movs	r0, #100	@ 0x64
 800236e:	f000 fda9 	bl	8002ec4 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8002372:	2000      	movs	r0, #0
 8002374:	f000 fa44 	bl	8002800 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8002378:	2020      	movs	r0, #32
 800237a:	f7ff ffc1 	bl	8002300 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800237e:	2000      	movs	r0, #0
 8002380:	f7ff ffbe 	bl	8002300 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002384:	20b0      	movs	r0, #176	@ 0xb0
 8002386:	f7ff ffbb 	bl	8002300 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800238a:	20c8      	movs	r0, #200	@ 0xc8
 800238c:	f7ff ffb8 	bl	8002300 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8002390:	2000      	movs	r0, #0
 8002392:	f7ff ffb5 	bl	8002300 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8002396:	2010      	movs	r0, #16
 8002398:	f7ff ffb2 	bl	8002300 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800239c:	2040      	movs	r0, #64	@ 0x40
 800239e:	f7ff ffaf 	bl	8002300 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80023a2:	20ff      	movs	r0, #255	@ 0xff
 80023a4:	f000 fa18 	bl	80027d8 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80023a8:	20a1      	movs	r0, #161	@ 0xa1
 80023aa:	f7ff ffa9 	bl	8002300 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80023ae:	20a6      	movs	r0, #166	@ 0xa6
 80023b0:	f7ff ffa6 	bl	8002300 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80023b4:	20a8      	movs	r0, #168	@ 0xa8
 80023b6:	f7ff ffa3 	bl	8002300 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80023ba:	203f      	movs	r0, #63	@ 0x3f
 80023bc:	f7ff ffa0 	bl	8002300 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80023c0:	20a4      	movs	r0, #164	@ 0xa4
 80023c2:	f7ff ff9d 	bl	8002300 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80023c6:	20d3      	movs	r0, #211	@ 0xd3
 80023c8:	f7ff ff9a 	bl	8002300 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80023cc:	2000      	movs	r0, #0
 80023ce:	f7ff ff97 	bl	8002300 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80023d2:	20d5      	movs	r0, #213	@ 0xd5
 80023d4:	f7ff ff94 	bl	8002300 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80023d8:	20f0      	movs	r0, #240	@ 0xf0
 80023da:	f7ff ff91 	bl	8002300 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80023de:	20d9      	movs	r0, #217	@ 0xd9
 80023e0:	f7ff ff8e 	bl	8002300 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80023e4:	2022      	movs	r0, #34	@ 0x22
 80023e6:	f7ff ff8b 	bl	8002300 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80023ea:	20da      	movs	r0, #218	@ 0xda
 80023ec:	f7ff ff88 	bl	8002300 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80023f0:	2012      	movs	r0, #18
 80023f2:	f7ff ff85 	bl	8002300 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80023f6:	20db      	movs	r0, #219	@ 0xdb
 80023f8:	f7ff ff82 	bl	8002300 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80023fc:	2020      	movs	r0, #32
 80023fe:	f7ff ff7f 	bl	8002300 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8002402:	208d      	movs	r0, #141	@ 0x8d
 8002404:	f7ff ff7c 	bl	8002300 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8002408:	2014      	movs	r0, #20
 800240a:	f7ff ff79 	bl	8002300 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800240e:	2001      	movs	r0, #1
 8002410:	f000 f9f6 	bl	8002800 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8002414:	2000      	movs	r0, #0
 8002416:	f000 f80f 	bl	8002438 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800241a:	f000 f825 	bl	8002468 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800241e:	4b05      	ldr	r3, [pc, #20]	@ (8002434 <ssd1306_Init+0xd0>)
 8002420:	2200      	movs	r2, #0
 8002422:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002424:	4b03      	ldr	r3, [pc, #12]	@ (8002434 <ssd1306_Init+0xd0>)
 8002426:	2200      	movs	r2, #0
 8002428:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800242a:	4b02      	ldr	r3, [pc, #8]	@ (8002434 <ssd1306_Init+0xd0>)
 800242c:	2201      	movs	r2, #1
 800242e:	711a      	strb	r2, [r3, #4]
}
 8002430:	bf00      	nop
 8002432:	bd80      	pop	{r7, pc}
 8002434:	20000830 	.word	0x20000830

08002438 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	4603      	mov	r3, r0
 8002440:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002442:	79fb      	ldrb	r3, [r7, #7]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d101      	bne.n	800244c <ssd1306_Fill+0x14>
 8002448:	2300      	movs	r3, #0
 800244a:	e000      	b.n	800244e <ssd1306_Fill+0x16>
 800244c:	23ff      	movs	r3, #255	@ 0xff
 800244e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002452:	4619      	mov	r1, r3
 8002454:	4803      	ldr	r0, [pc, #12]	@ (8002464 <ssd1306_Fill+0x2c>)
 8002456:	f005 fd19 	bl	8007e8c <memset>
}
 800245a:	bf00      	nop
 800245c:	3708      	adds	r7, #8
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	20000430 	.word	0x20000430

08002468 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800246e:	2300      	movs	r3, #0
 8002470:	71fb      	strb	r3, [r7, #7]
 8002472:	e016      	b.n	80024a2 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002474:	79fb      	ldrb	r3, [r7, #7]
 8002476:	3b50      	subs	r3, #80	@ 0x50
 8002478:	b2db      	uxtb	r3, r3
 800247a:	4618      	mov	r0, r3
 800247c:	f7ff ff40 	bl	8002300 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8002480:	2000      	movs	r0, #0
 8002482:	f7ff ff3d 	bl	8002300 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8002486:	2010      	movs	r0, #16
 8002488:	f7ff ff3a 	bl	8002300 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 800248c:	79fb      	ldrb	r3, [r7, #7]
 800248e:	01db      	lsls	r3, r3, #7
 8002490:	4a08      	ldr	r2, [pc, #32]	@ (80024b4 <ssd1306_UpdateScreen+0x4c>)
 8002492:	4413      	add	r3, r2
 8002494:	2180      	movs	r1, #128	@ 0x80
 8002496:	4618      	mov	r0, r3
 8002498:	f7ff ff4a 	bl	8002330 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800249c:	79fb      	ldrb	r3, [r7, #7]
 800249e:	3301      	adds	r3, #1
 80024a0:	71fb      	strb	r3, [r7, #7]
 80024a2:	79fb      	ldrb	r3, [r7, #7]
 80024a4:	2b07      	cmp	r3, #7
 80024a6:	d9e5      	bls.n	8002474 <ssd1306_UpdateScreen+0xc>
    }
}
 80024a8:	bf00      	nop
 80024aa:	bf00      	nop
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	20000430 	.word	0x20000430

080024b8 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	4603      	mov	r3, r0
 80024c0:	71fb      	strb	r3, [r7, #7]
 80024c2:	460b      	mov	r3, r1
 80024c4:	71bb      	strb	r3, [r7, #6]
 80024c6:	4613      	mov	r3, r2
 80024c8:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80024ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	db3d      	blt.n	800254e <ssd1306_DrawPixel+0x96>
 80024d2:	79bb      	ldrb	r3, [r7, #6]
 80024d4:	2b3f      	cmp	r3, #63	@ 0x3f
 80024d6:	d83a      	bhi.n	800254e <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80024d8:	797b      	ldrb	r3, [r7, #5]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d11a      	bne.n	8002514 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80024de:	79fa      	ldrb	r2, [r7, #7]
 80024e0:	79bb      	ldrb	r3, [r7, #6]
 80024e2:	08db      	lsrs	r3, r3, #3
 80024e4:	b2d8      	uxtb	r0, r3
 80024e6:	4603      	mov	r3, r0
 80024e8:	01db      	lsls	r3, r3, #7
 80024ea:	4413      	add	r3, r2
 80024ec:	4a1b      	ldr	r2, [pc, #108]	@ (800255c <ssd1306_DrawPixel+0xa4>)
 80024ee:	5cd3      	ldrb	r3, [r2, r3]
 80024f0:	b25a      	sxtb	r2, r3
 80024f2:	79bb      	ldrb	r3, [r7, #6]
 80024f4:	f003 0307 	and.w	r3, r3, #7
 80024f8:	2101      	movs	r1, #1
 80024fa:	fa01 f303 	lsl.w	r3, r1, r3
 80024fe:	b25b      	sxtb	r3, r3
 8002500:	4313      	orrs	r3, r2
 8002502:	b259      	sxtb	r1, r3
 8002504:	79fa      	ldrb	r2, [r7, #7]
 8002506:	4603      	mov	r3, r0
 8002508:	01db      	lsls	r3, r3, #7
 800250a:	4413      	add	r3, r2
 800250c:	b2c9      	uxtb	r1, r1
 800250e:	4a13      	ldr	r2, [pc, #76]	@ (800255c <ssd1306_DrawPixel+0xa4>)
 8002510:	54d1      	strb	r1, [r2, r3]
 8002512:	e01d      	b.n	8002550 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002514:	79fa      	ldrb	r2, [r7, #7]
 8002516:	79bb      	ldrb	r3, [r7, #6]
 8002518:	08db      	lsrs	r3, r3, #3
 800251a:	b2d8      	uxtb	r0, r3
 800251c:	4603      	mov	r3, r0
 800251e:	01db      	lsls	r3, r3, #7
 8002520:	4413      	add	r3, r2
 8002522:	4a0e      	ldr	r2, [pc, #56]	@ (800255c <ssd1306_DrawPixel+0xa4>)
 8002524:	5cd3      	ldrb	r3, [r2, r3]
 8002526:	b25a      	sxtb	r2, r3
 8002528:	79bb      	ldrb	r3, [r7, #6]
 800252a:	f003 0307 	and.w	r3, r3, #7
 800252e:	2101      	movs	r1, #1
 8002530:	fa01 f303 	lsl.w	r3, r1, r3
 8002534:	b25b      	sxtb	r3, r3
 8002536:	43db      	mvns	r3, r3
 8002538:	b25b      	sxtb	r3, r3
 800253a:	4013      	ands	r3, r2
 800253c:	b259      	sxtb	r1, r3
 800253e:	79fa      	ldrb	r2, [r7, #7]
 8002540:	4603      	mov	r3, r0
 8002542:	01db      	lsls	r3, r3, #7
 8002544:	4413      	add	r3, r2
 8002546:	b2c9      	uxtb	r1, r1
 8002548:	4a04      	ldr	r2, [pc, #16]	@ (800255c <ssd1306_DrawPixel+0xa4>)
 800254a:	54d1      	strb	r1, [r2, r3]
 800254c:	e000      	b.n	8002550 <ssd1306_DrawPixel+0x98>
        return;
 800254e:	bf00      	nop
    }
}
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	20000430 	.word	0x20000430

08002560 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8002560:	b590      	push	{r4, r7, lr}
 8002562:	b089      	sub	sp, #36	@ 0x24
 8002564:	af00      	add	r7, sp, #0
 8002566:	4604      	mov	r4, r0
 8002568:	4638      	mov	r0, r7
 800256a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800256e:	4623      	mov	r3, r4
 8002570:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8002572:	7bfb      	ldrb	r3, [r7, #15]
 8002574:	2b1f      	cmp	r3, #31
 8002576:	d902      	bls.n	800257e <ssd1306_WriteChar+0x1e>
 8002578:	7bfb      	ldrb	r3, [r7, #15]
 800257a:	2b7e      	cmp	r3, #126	@ 0x7e
 800257c:	d901      	bls.n	8002582 <ssd1306_WriteChar+0x22>
        return 0;
 800257e:	2300      	movs	r3, #0
 8002580:	e079      	b.n	8002676 <ssd1306_WriteChar+0x116>
    
    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d005      	beq.n	8002594 <ssd1306_WriteChar+0x34>
 8002588:	68ba      	ldr	r2, [r7, #8]
 800258a:	7bfb      	ldrb	r3, [r7, #15]
 800258c:	3b20      	subs	r3, #32
 800258e:	4413      	add	r3, r2
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	e000      	b.n	8002596 <ssd1306_WriteChar+0x36>
 8002594:	783b      	ldrb	r3, [r7, #0]
 8002596:	75fb      	strb	r3, [r7, #23]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8002598:	4b39      	ldr	r3, [pc, #228]	@ (8002680 <ssd1306_WriteChar+0x120>)
 800259a:	881b      	ldrh	r3, [r3, #0]
 800259c:	461a      	mov	r2, r3
 800259e:	7dfb      	ldrb	r3, [r7, #23]
 80025a0:	4413      	add	r3, r2
 80025a2:	2b80      	cmp	r3, #128	@ 0x80
 80025a4:	dc06      	bgt.n	80025b4 <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 80025a6:	4b36      	ldr	r3, [pc, #216]	@ (8002680 <ssd1306_WriteChar+0x120>)
 80025a8:	885b      	ldrh	r3, [r3, #2]
 80025aa:	461a      	mov	r2, r3
 80025ac:	787b      	ldrb	r3, [r7, #1]
 80025ae:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 80025b0:	2b40      	cmp	r3, #64	@ 0x40
 80025b2:	dd01      	ble.n	80025b8 <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 80025b4:	2300      	movs	r3, #0
 80025b6:	e05e      	b.n	8002676 <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 80025b8:	2300      	movs	r3, #0
 80025ba:	61fb      	str	r3, [r7, #28]
 80025bc:	e04d      	b.n	800265a <ssd1306_WriteChar+0xfa>
        b = Font.data[(ch - 32) * Font.height + i];
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	7bfb      	ldrb	r3, [r7, #15]
 80025c2:	3b20      	subs	r3, #32
 80025c4:	7879      	ldrb	r1, [r7, #1]
 80025c6:	fb01 f303 	mul.w	r3, r1, r3
 80025ca:	4619      	mov	r1, r3
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	440b      	add	r3, r1
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	4413      	add	r3, r2
 80025d4:	881b      	ldrh	r3, [r3, #0]
 80025d6:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 80025d8:	2300      	movs	r3, #0
 80025da:	61bb      	str	r3, [r7, #24]
 80025dc:	e036      	b.n	800264c <ssd1306_WriteChar+0xec>
            if((b << j) & 0x8000)  {
 80025de:	693a      	ldr	r2, [r7, #16]
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	fa02 f303 	lsl.w	r3, r2, r3
 80025e6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d013      	beq.n	8002616 <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80025ee:	4b24      	ldr	r3, [pc, #144]	@ (8002680 <ssd1306_WriteChar+0x120>)
 80025f0:	881b      	ldrh	r3, [r3, #0]
 80025f2:	b2da      	uxtb	r2, r3
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	4413      	add	r3, r2
 80025fa:	b2d8      	uxtb	r0, r3
 80025fc:	4b20      	ldr	r3, [pc, #128]	@ (8002680 <ssd1306_WriteChar+0x120>)
 80025fe:	885b      	ldrh	r3, [r3, #2]
 8002600:	b2da      	uxtb	r2, r3
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	b2db      	uxtb	r3, r3
 8002606:	4413      	add	r3, r2
 8002608:	b2db      	uxtb	r3, r3
 800260a:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800260e:	4619      	mov	r1, r3
 8002610:	f7ff ff52 	bl	80024b8 <ssd1306_DrawPixel>
 8002614:	e017      	b.n	8002646 <ssd1306_WriteChar+0xe6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002616:	4b1a      	ldr	r3, [pc, #104]	@ (8002680 <ssd1306_WriteChar+0x120>)
 8002618:	881b      	ldrh	r3, [r3, #0]
 800261a:	b2da      	uxtb	r2, r3
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	b2db      	uxtb	r3, r3
 8002620:	4413      	add	r3, r2
 8002622:	b2d8      	uxtb	r0, r3
 8002624:	4b16      	ldr	r3, [pc, #88]	@ (8002680 <ssd1306_WriteChar+0x120>)
 8002626:	885b      	ldrh	r3, [r3, #2]
 8002628:	b2da      	uxtb	r2, r3
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	b2db      	uxtb	r3, r3
 800262e:	4413      	add	r3, r2
 8002630:	b2d9      	uxtb	r1, r3
 8002632:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002636:	2b00      	cmp	r3, #0
 8002638:	bf0c      	ite	eq
 800263a:	2301      	moveq	r3, #1
 800263c:	2300      	movne	r3, #0
 800263e:	b2db      	uxtb	r3, r3
 8002640:	461a      	mov	r2, r3
 8002642:	f7ff ff39 	bl	80024b8 <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	3301      	adds	r3, #1
 800264a:	61bb      	str	r3, [r7, #24]
 800264c:	7dfb      	ldrb	r3, [r7, #23]
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	429a      	cmp	r2, r3
 8002652:	d3c4      	bcc.n	80025de <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	3301      	adds	r3, #1
 8002658:	61fb      	str	r3, [r7, #28]
 800265a:	787b      	ldrb	r3, [r7, #1]
 800265c:	461a      	mov	r2, r3
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	4293      	cmp	r3, r2
 8002662:	d3ac      	bcc.n	80025be <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += char_width;
 8002664:	4b06      	ldr	r3, [pc, #24]	@ (8002680 <ssd1306_WriteChar+0x120>)
 8002666:	881a      	ldrh	r2, [r3, #0]
 8002668:	7dfb      	ldrb	r3, [r7, #23]
 800266a:	b29b      	uxth	r3, r3
 800266c:	4413      	add	r3, r2
 800266e:	b29a      	uxth	r2, r3
 8002670:	4b03      	ldr	r3, [pc, #12]	@ (8002680 <ssd1306_WriteChar+0x120>)
 8002672:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8002674:	7bfb      	ldrb	r3, [r7, #15]
}
 8002676:	4618      	mov	r0, r3
 8002678:	3724      	adds	r7, #36	@ 0x24
 800267a:	46bd      	mov	sp, r7
 800267c:	bd90      	pop	{r4, r7, pc}
 800267e:	bf00      	nop
 8002680:	20000830 	.word	0x20000830

08002684 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8002684:	b580      	push	{r7, lr}
 8002686:	b086      	sub	sp, #24
 8002688:	af02      	add	r7, sp, #8
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	4638      	mov	r0, r7
 800268e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8002692:	e013      	b.n	80026bc <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	7818      	ldrb	r0, [r3, #0]
 8002698:	7e3b      	ldrb	r3, [r7, #24]
 800269a:	9300      	str	r3, [sp, #0]
 800269c:	463b      	mov	r3, r7
 800269e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026a0:	f7ff ff5e 	bl	8002560 <ssd1306_WriteChar>
 80026a4:	4603      	mov	r3, r0
 80026a6:	461a      	mov	r2, r3
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d002      	beq.n	80026b6 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	e008      	b.n	80026c8 <ssd1306_WriteString+0x44>
        }
        str++;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	3301      	adds	r3, #1
 80026ba:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d1e7      	bne.n	8002694 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	781b      	ldrb	r3, [r3, #0]
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3710      	adds	r7, #16
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	4603      	mov	r3, r0
 80026d8:	460a      	mov	r2, r1
 80026da:	71fb      	strb	r3, [r7, #7]
 80026dc:	4613      	mov	r3, r2
 80026de:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80026e0:	79fb      	ldrb	r3, [r7, #7]
 80026e2:	b29a      	uxth	r2, r3
 80026e4:	4b05      	ldr	r3, [pc, #20]	@ (80026fc <ssd1306_SetCursor+0x2c>)
 80026e6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80026e8:	79bb      	ldrb	r3, [r7, #6]
 80026ea:	b29a      	uxth	r2, r3
 80026ec:	4b03      	ldr	r3, [pc, #12]	@ (80026fc <ssd1306_SetCursor+0x2c>)
 80026ee:	805a      	strh	r2, [r3, #2]
}
 80026f0:	bf00      	nop
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr
 80026fc:	20000830 	.word	0x20000830

08002700 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8002700:	b590      	push	{r4, r7, lr}
 8002702:	b089      	sub	sp, #36	@ 0x24
 8002704:	af00      	add	r7, sp, #0
 8002706:	4604      	mov	r4, r0
 8002708:	4608      	mov	r0, r1
 800270a:	4611      	mov	r1, r2
 800270c:	461a      	mov	r2, r3
 800270e:	4623      	mov	r3, r4
 8002710:	71fb      	strb	r3, [r7, #7]
 8002712:	4603      	mov	r3, r0
 8002714:	71bb      	strb	r3, [r7, #6]
 8002716:	460b      	mov	r3, r1
 8002718:	717b      	strb	r3, [r7, #5]
 800271a:	4613      	mov	r3, r2
 800271c:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 800271e:	797a      	ldrb	r2, [r7, #5]
 8002720:	79fb      	ldrb	r3, [r7, #7]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	2b00      	cmp	r3, #0
 8002726:	bfb8      	it	lt
 8002728:	425b      	neglt	r3, r3
 800272a:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 800272c:	793a      	ldrb	r2, [r7, #4]
 800272e:	79bb      	ldrb	r3, [r7, #6]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b00      	cmp	r3, #0
 8002734:	bfb8      	it	lt
 8002736:	425b      	neglt	r3, r3
 8002738:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 800273a:	79fa      	ldrb	r2, [r7, #7]
 800273c:	797b      	ldrb	r3, [r7, #5]
 800273e:	429a      	cmp	r2, r3
 8002740:	d201      	bcs.n	8002746 <ssd1306_Line+0x46>
 8002742:	2301      	movs	r3, #1
 8002744:	e001      	b.n	800274a <ssd1306_Line+0x4a>
 8002746:	f04f 33ff 	mov.w	r3, #4294967295
 800274a:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 800274c:	79ba      	ldrb	r2, [r7, #6]
 800274e:	793b      	ldrb	r3, [r7, #4]
 8002750:	429a      	cmp	r2, r3
 8002752:	d201      	bcs.n	8002758 <ssd1306_Line+0x58>
 8002754:	2301      	movs	r3, #1
 8002756:	e001      	b.n	800275c <ssd1306_Line+0x5c>
 8002758:	f04f 33ff 	mov.w	r3, #4294967295
 800275c:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 8002766:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800276a:	7939      	ldrb	r1, [r7, #4]
 800276c:	797b      	ldrb	r3, [r7, #5]
 800276e:	4618      	mov	r0, r3
 8002770:	f7ff fea2 	bl	80024b8 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 8002774:	e024      	b.n	80027c0 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 8002776:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800277a:	79b9      	ldrb	r1, [r7, #6]
 800277c:	79fb      	ldrb	r3, [r7, #7]
 800277e:	4618      	mov	r0, r3
 8002780:	f7ff fe9a 	bl	80024b8 <ssd1306_DrawPixel>
        error2 = error * 2;
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	425b      	negs	r3, r3
 800278e:	68ba      	ldr	r2, [r7, #8]
 8002790:	429a      	cmp	r2, r3
 8002792:	dd08      	ble.n	80027a6 <ssd1306_Line+0xa6>
            error -= deltaY;
 8002794:	69fa      	ldr	r2, [r7, #28]
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	b2da      	uxtb	r2, r3
 80027a0:	79fb      	ldrb	r3, [r7, #7]
 80027a2:	4413      	add	r3, r2
 80027a4:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 80027a6:	68ba      	ldr	r2, [r7, #8]
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	da08      	bge.n	80027c0 <ssd1306_Line+0xc0>
            error += deltaX;
 80027ae:	69fa      	ldr	r2, [r7, #28]
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	4413      	add	r3, r2
 80027b4:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	b2da      	uxtb	r2, r3
 80027ba:	79bb      	ldrb	r3, [r7, #6]
 80027bc:	4413      	add	r3, r2
 80027be:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 80027c0:	79fa      	ldrb	r2, [r7, #7]
 80027c2:	797b      	ldrb	r3, [r7, #5]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d1d6      	bne.n	8002776 <ssd1306_Line+0x76>
 80027c8:	79ba      	ldrb	r2, [r7, #6]
 80027ca:	793b      	ldrb	r3, [r7, #4]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d1d2      	bne.n	8002776 <ssd1306_Line+0x76>
        }
    }
    return;
 80027d0:	bf00      	nop
}
 80027d2:	3724      	adds	r7, #36	@ 0x24
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd90      	pop	{r4, r7, pc}

080027d8 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	4603      	mov	r3, r0
 80027e0:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80027e2:	2381      	movs	r3, #129	@ 0x81
 80027e4:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80027e6:	7bfb      	ldrb	r3, [r7, #15]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7ff fd89 	bl	8002300 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80027ee:	79fb      	ldrb	r3, [r7, #7]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7ff fd85 	bl	8002300 <ssd1306_WriteCommand>
}
 80027f6:	bf00      	nop
 80027f8:	3710      	adds	r7, #16
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
	...

08002800 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	4603      	mov	r3, r0
 8002808:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800280a:	79fb      	ldrb	r3, [r7, #7]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d005      	beq.n	800281c <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8002810:	23af      	movs	r3, #175	@ 0xaf
 8002812:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002814:	4b08      	ldr	r3, [pc, #32]	@ (8002838 <ssd1306_SetDisplayOn+0x38>)
 8002816:	2201      	movs	r2, #1
 8002818:	715a      	strb	r2, [r3, #5]
 800281a:	e004      	b.n	8002826 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 800281c:	23ae      	movs	r3, #174	@ 0xae
 800281e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8002820:	4b05      	ldr	r3, [pc, #20]	@ (8002838 <ssd1306_SetDisplayOn+0x38>)
 8002822:	2200      	movs	r2, #0
 8002824:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8002826:	7bfb      	ldrb	r3, [r7, #15]
 8002828:	4618      	mov	r0, r3
 800282a:	f7ff fd69 	bl	8002300 <ssd1306_WriteCommand>
}
 800282e:	bf00      	nop
 8002830:	3710      	adds	r7, #16
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	20000830 	.word	0x20000830

0800283c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002842:	4b0f      	ldr	r3, [pc, #60]	@ (8002880 <HAL_MspInit+0x44>)
 8002844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002846:	4a0e      	ldr	r2, [pc, #56]	@ (8002880 <HAL_MspInit+0x44>)
 8002848:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800284c:	6413      	str	r3, [r2, #64]	@ 0x40
 800284e:	4b0c      	ldr	r3, [pc, #48]	@ (8002880 <HAL_MspInit+0x44>)
 8002850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002852:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002856:	607b      	str	r3, [r7, #4]
 8002858:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800285a:	4b09      	ldr	r3, [pc, #36]	@ (8002880 <HAL_MspInit+0x44>)
 800285c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800285e:	4a08      	ldr	r2, [pc, #32]	@ (8002880 <HAL_MspInit+0x44>)
 8002860:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002864:	6453      	str	r3, [r2, #68]	@ 0x44
 8002866:	4b06      	ldr	r3, [pc, #24]	@ (8002880 <HAL_MspInit+0x44>)
 8002868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800286a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800286e:	603b      	str	r3, [r7, #0]
 8002870:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002872:	bf00      	nop
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	40023800 	.word	0x40023800

08002884 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002888:	bf00      	nop
 800288a:	e7fd      	b.n	8002888 <NMI_Handler+0x4>

0800288c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002890:	bf00      	nop
 8002892:	e7fd      	b.n	8002890 <HardFault_Handler+0x4>

08002894 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002898:	bf00      	nop
 800289a:	e7fd      	b.n	8002898 <MemManage_Handler+0x4>

0800289c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028a0:	bf00      	nop
 80028a2:	e7fd      	b.n	80028a0 <BusFault_Handler+0x4>

080028a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028a4:	b480      	push	{r7}
 80028a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028a8:	bf00      	nop
 80028aa:	e7fd      	b.n	80028a8 <UsageFault_Handler+0x4>

080028ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028b0:	bf00      	nop
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr

080028ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028ba:	b480      	push	{r7}
 80028bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028be:	bf00      	nop
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr

080028c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028cc:	bf00      	nop
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr

080028d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028d6:	b580      	push	{r7, lr}
 80028d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028da:	f000 fad3 	bl	8002e84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028de:	bf00      	nop
 80028e0:	bd80      	pop	{r7, pc}
	...

080028e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b086      	sub	sp, #24
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028ec:	4a14      	ldr	r2, [pc, #80]	@ (8002940 <_sbrk+0x5c>)
 80028ee:	4b15      	ldr	r3, [pc, #84]	@ (8002944 <_sbrk+0x60>)
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028f8:	4b13      	ldr	r3, [pc, #76]	@ (8002948 <_sbrk+0x64>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d102      	bne.n	8002906 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002900:	4b11      	ldr	r3, [pc, #68]	@ (8002948 <_sbrk+0x64>)
 8002902:	4a12      	ldr	r2, [pc, #72]	@ (800294c <_sbrk+0x68>)
 8002904:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002906:	4b10      	ldr	r3, [pc, #64]	@ (8002948 <_sbrk+0x64>)
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4413      	add	r3, r2
 800290e:	693a      	ldr	r2, [r7, #16]
 8002910:	429a      	cmp	r2, r3
 8002912:	d207      	bcs.n	8002924 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002914:	f005 fac2 	bl	8007e9c <__errno>
 8002918:	4603      	mov	r3, r0
 800291a:	220c      	movs	r2, #12
 800291c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800291e:	f04f 33ff 	mov.w	r3, #4294967295
 8002922:	e009      	b.n	8002938 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002924:	4b08      	ldr	r3, [pc, #32]	@ (8002948 <_sbrk+0x64>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800292a:	4b07      	ldr	r3, [pc, #28]	@ (8002948 <_sbrk+0x64>)
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4413      	add	r3, r2
 8002932:	4a05      	ldr	r2, [pc, #20]	@ (8002948 <_sbrk+0x64>)
 8002934:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002936:	68fb      	ldr	r3, [r7, #12]
}
 8002938:	4618      	mov	r0, r3
 800293a:	3718      	adds	r7, #24
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	20050000 	.word	0x20050000
 8002944:	00000400 	.word	0x00000400
 8002948:	20000838 	.word	0x20000838
 800294c:	20000f40 	.word	0x20000f40

08002950 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002950:	b480      	push	{r7}
 8002952:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002954:	4b06      	ldr	r3, [pc, #24]	@ (8002970 <SystemInit+0x20>)
 8002956:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800295a:	4a05      	ldr	r2, [pc, #20]	@ (8002970 <SystemInit+0x20>)
 800295c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002960:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002964:	bf00      	nop
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	e000ed00 	.word	0xe000ed00

08002974 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b08a      	sub	sp, #40	@ 0x28
 8002978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800297a:	f107 031c 	add.w	r3, r7, #28
 800297e:	2200      	movs	r2, #0
 8002980:	601a      	str	r2, [r3, #0]
 8002982:	605a      	str	r2, [r3, #4]
 8002984:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002986:	463b      	mov	r3, r7
 8002988:	2200      	movs	r2, #0
 800298a:	601a      	str	r2, [r3, #0]
 800298c:	605a      	str	r2, [r3, #4]
 800298e:	609a      	str	r2, [r3, #8]
 8002990:	60da      	str	r2, [r3, #12]
 8002992:	611a      	str	r2, [r3, #16]
 8002994:	615a      	str	r2, [r3, #20]
 8002996:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002998:	4b2e      	ldr	r3, [pc, #184]	@ (8002a54 <MX_TIM3_Init+0xe0>)
 800299a:	4a2f      	ldr	r2, [pc, #188]	@ (8002a58 <MX_TIM3_Init+0xe4>)
 800299c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 800299e:	4b2d      	ldr	r3, [pc, #180]	@ (8002a54 <MX_TIM3_Init+0xe0>)
 80029a0:	2247      	movs	r2, #71	@ 0x47
 80029a2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029a4:	4b2b      	ldr	r3, [pc, #172]	@ (8002a54 <MX_TIM3_Init+0xe0>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80029aa:	4b2a      	ldr	r3, [pc, #168]	@ (8002a54 <MX_TIM3_Init+0xe0>)
 80029ac:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80029b0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029b2:	4b28      	ldr	r3, [pc, #160]	@ (8002a54 <MX_TIM3_Init+0xe0>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029b8:	4b26      	ldr	r3, [pc, #152]	@ (8002a54 <MX_TIM3_Init+0xe0>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80029be:	4825      	ldr	r0, [pc, #148]	@ (8002a54 <MX_TIM3_Init+0xe0>)
 80029c0:	f003 fb10 	bl	8005fe4 <HAL_TIM_PWM_Init>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80029ca:	f7ff fc8b 	bl	80022e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029ce:	2300      	movs	r3, #0
 80029d0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029d2:	2300      	movs	r3, #0
 80029d4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80029d6:	f107 031c 	add.w	r3, r7, #28
 80029da:	4619      	mov	r1, r3
 80029dc:	481d      	ldr	r0, [pc, #116]	@ (8002a54 <MX_TIM3_Init+0xe0>)
 80029de:	f004 f891 	bl	8006b04 <HAL_TIMEx_MasterConfigSynchronization>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d001      	beq.n	80029ec <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80029e8:	f7ff fc7c 	bl	80022e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029ec:	2360      	movs	r3, #96	@ 0x60
 80029ee:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80029f0:	2300      	movs	r3, #0
 80029f2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029f4:	2300      	movs	r3, #0
 80029f6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029f8:	2300      	movs	r3, #0
 80029fa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80029fc:	463b      	mov	r3, r7
 80029fe:	2200      	movs	r2, #0
 8002a00:	4619      	mov	r1, r3
 8002a02:	4814      	ldr	r0, [pc, #80]	@ (8002a54 <MX_TIM3_Init+0xe0>)
 8002a04:	f003 fc40 	bl	8006288 <HAL_TIM_PWM_ConfigChannel>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8002a0e:	f7ff fc69 	bl	80022e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002a12:	463b      	mov	r3, r7
 8002a14:	2204      	movs	r2, #4
 8002a16:	4619      	mov	r1, r3
 8002a18:	480e      	ldr	r0, [pc, #56]	@ (8002a54 <MX_TIM3_Init+0xe0>)
 8002a1a:	f003 fc35 	bl	8006288 <HAL_TIM_PWM_ConfigChannel>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d001      	beq.n	8002a28 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8002a24:	f7ff fc5e 	bl	80022e4 <Error_Handler>
  }
  sConfigOC.Pulse = 500;
 8002a28:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002a2c:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002a2e:	463b      	mov	r3, r7
 8002a30:	2208      	movs	r2, #8
 8002a32:	4619      	mov	r1, r3
 8002a34:	4807      	ldr	r0, [pc, #28]	@ (8002a54 <MX_TIM3_Init+0xe0>)
 8002a36:	f003 fc27 	bl	8006288 <HAL_TIM_PWM_ConfigChannel>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d001      	beq.n	8002a44 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8002a40:	f7ff fc50 	bl	80022e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002a44:	4803      	ldr	r0, [pc, #12]	@ (8002a54 <MX_TIM3_Init+0xe0>)
 8002a46:	f000 f829 	bl	8002a9c <HAL_TIM_MspPostInit>

}
 8002a4a:	bf00      	nop
 8002a4c:	3728      	adds	r7, #40	@ 0x28
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	2000083c 	.word	0x2000083c
 8002a58:	40000400 	.word	0x40000400

08002a5c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b085      	sub	sp, #20
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a0a      	ldr	r2, [pc, #40]	@ (8002a94 <HAL_TIM_PWM_MspInit+0x38>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d10b      	bne.n	8002a86 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a6e:	4b0a      	ldr	r3, [pc, #40]	@ (8002a98 <HAL_TIM_PWM_MspInit+0x3c>)
 8002a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a72:	4a09      	ldr	r2, [pc, #36]	@ (8002a98 <HAL_TIM_PWM_MspInit+0x3c>)
 8002a74:	f043 0302 	orr.w	r3, r3, #2
 8002a78:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a7a:	4b07      	ldr	r3, [pc, #28]	@ (8002a98 <HAL_TIM_PWM_MspInit+0x3c>)
 8002a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	60fb      	str	r3, [r7, #12]
 8002a84:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002a86:	bf00      	nop
 8002a88:	3714      	adds	r7, #20
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	40000400 	.word	0x40000400
 8002a98:	40023800 	.word	0x40023800

08002a9c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b08a      	sub	sp, #40	@ 0x28
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aa4:	f107 0314 	add.w	r3, r7, #20
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	601a      	str	r2, [r3, #0]
 8002aac:	605a      	str	r2, [r3, #4]
 8002aae:	609a      	str	r2, [r3, #8]
 8002ab0:	60da      	str	r2, [r3, #12]
 8002ab2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a1f      	ldr	r2, [pc, #124]	@ (8002b38 <HAL_TIM_MspPostInit+0x9c>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d138      	bne.n	8002b30 <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002abe:	4b1f      	ldr	r3, [pc, #124]	@ (8002b3c <HAL_TIM_MspPostInit+0xa0>)
 8002ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac2:	4a1e      	ldr	r2, [pc, #120]	@ (8002b3c <HAL_TIM_MspPostInit+0xa0>)
 8002ac4:	f043 0301 	orr.w	r3, r3, #1
 8002ac8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002aca:	4b1c      	ldr	r3, [pc, #112]	@ (8002b3c <HAL_TIM_MspPostInit+0xa0>)
 8002acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ace:	f003 0301 	and.w	r3, r3, #1
 8002ad2:	613b      	str	r3, [r7, #16]
 8002ad4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ad6:	4b19      	ldr	r3, [pc, #100]	@ (8002b3c <HAL_TIM_MspPostInit+0xa0>)
 8002ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ada:	4a18      	ldr	r2, [pc, #96]	@ (8002b3c <HAL_TIM_MspPostInit+0xa0>)
 8002adc:	f043 0304 	orr.w	r3, r3, #4
 8002ae0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ae2:	4b16      	ldr	r3, [pc, #88]	@ (8002b3c <HAL_TIM_MspPostInit+0xa0>)
 8002ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ae6:	f003 0304 	and.w	r3, r3, #4
 8002aea:	60fb      	str	r3, [r7, #12]
 8002aec:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002aee:	2340      	movs	r3, #64	@ 0x40
 8002af0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af2:	2302      	movs	r3, #2
 8002af4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af6:	2300      	movs	r3, #0
 8002af8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002afa:	2300      	movs	r3, #0
 8002afc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002afe:	2302      	movs	r3, #2
 8002b00:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b02:	f107 0314 	add.w	r3, r7, #20
 8002b06:	4619      	mov	r1, r3
 8002b08:	480d      	ldr	r0, [pc, #52]	@ (8002b40 <HAL_TIM_MspPostInit+0xa4>)
 8002b0a:	f000 fe33 	bl	8003774 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002b0e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002b12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b14:	2302      	movs	r3, #2
 8002b16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b20:	2302      	movs	r3, #2
 8002b22:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b24:	f107 0314 	add.w	r3, r7, #20
 8002b28:	4619      	mov	r1, r3
 8002b2a:	4806      	ldr	r0, [pc, #24]	@ (8002b44 <HAL_TIM_MspPostInit+0xa8>)
 8002b2c:	f000 fe22 	bl	8003774 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002b30:	bf00      	nop
 8002b32:	3728      	adds	r7, #40	@ 0x28
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	40000400 	.word	0x40000400
 8002b3c:	40023800 	.word	0x40023800
 8002b40:	40020000 	.word	0x40020000
 8002b44:	40020800 	.word	0x40020800

08002b48 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002b4c:	4b14      	ldr	r3, [pc, #80]	@ (8002ba0 <MX_USART3_UART_Init+0x58>)
 8002b4e:	4a15      	ldr	r2, [pc, #84]	@ (8002ba4 <MX_USART3_UART_Init+0x5c>)
 8002b50:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002b52:	4b13      	ldr	r3, [pc, #76]	@ (8002ba0 <MX_USART3_UART_Init+0x58>)
 8002b54:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002b58:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002b5a:	4b11      	ldr	r3, [pc, #68]	@ (8002ba0 <MX_USART3_UART_Init+0x58>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002b60:	4b0f      	ldr	r3, [pc, #60]	@ (8002ba0 <MX_USART3_UART_Init+0x58>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002b66:	4b0e      	ldr	r3, [pc, #56]	@ (8002ba0 <MX_USART3_UART_Init+0x58>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002b6c:	4b0c      	ldr	r3, [pc, #48]	@ (8002ba0 <MX_USART3_UART_Init+0x58>)
 8002b6e:	220c      	movs	r2, #12
 8002b70:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b72:	4b0b      	ldr	r3, [pc, #44]	@ (8002ba0 <MX_USART3_UART_Init+0x58>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b78:	4b09      	ldr	r3, [pc, #36]	@ (8002ba0 <MX_USART3_UART_Init+0x58>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b7e:	4b08      	ldr	r3, [pc, #32]	@ (8002ba0 <MX_USART3_UART_Init+0x58>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b84:	4b06      	ldr	r3, [pc, #24]	@ (8002ba0 <MX_USART3_UART_Init+0x58>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002b8a:	4805      	ldr	r0, [pc, #20]	@ (8002ba0 <MX_USART3_UART_Init+0x58>)
 8002b8c:	f004 f848 	bl	8006c20 <HAL_UART_Init>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002b96:	f7ff fba5 	bl	80022e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002b9a:	bf00      	nop
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	20000888 	.word	0x20000888
 8002ba4:	40004800 	.word	0x40004800

08002ba8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b0aa      	sub	sp, #168	@ 0xa8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bb0:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	601a      	str	r2, [r3, #0]
 8002bb8:	605a      	str	r2, [r3, #4]
 8002bba:	609a      	str	r2, [r3, #8]
 8002bbc:	60da      	str	r2, [r3, #12]
 8002bbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002bc0:	f107 0310 	add.w	r3, r7, #16
 8002bc4:	2284      	movs	r2, #132	@ 0x84
 8002bc6:	2100      	movs	r1, #0
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f005 f95f 	bl	8007e8c <memset>
  if(uartHandle->Instance==USART3)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a22      	ldr	r2, [pc, #136]	@ (8002c5c <HAL_UART_MspInit+0xb4>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d13c      	bne.n	8002c52 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002bd8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002bdc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002bde:	2300      	movs	r3, #0
 8002be0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002be2:	f107 0310 	add.w	r3, r7, #16
 8002be6:	4618      	mov	r0, r3
 8002be8:	f002 fe0c 	bl	8005804 <HAL_RCCEx_PeriphCLKConfig>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d001      	beq.n	8002bf6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002bf2:	f7ff fb77 	bl	80022e4 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002bf6:	4b1a      	ldr	r3, [pc, #104]	@ (8002c60 <HAL_UART_MspInit+0xb8>)
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bfa:	4a19      	ldr	r2, [pc, #100]	@ (8002c60 <HAL_UART_MspInit+0xb8>)
 8002bfc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c00:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c02:	4b17      	ldr	r3, [pc, #92]	@ (8002c60 <HAL_UART_MspInit+0xb8>)
 8002c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c06:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c0a:	60fb      	str	r3, [r7, #12]
 8002c0c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c0e:	4b14      	ldr	r3, [pc, #80]	@ (8002c60 <HAL_UART_MspInit+0xb8>)
 8002c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c12:	4a13      	ldr	r2, [pc, #76]	@ (8002c60 <HAL_UART_MspInit+0xb8>)
 8002c14:	f043 0308 	orr.w	r3, r3, #8
 8002c18:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c1a:	4b11      	ldr	r3, [pc, #68]	@ (8002c60 <HAL_UART_MspInit+0xb8>)
 8002c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c1e:	f003 0308 	and.w	r3, r3, #8
 8002c22:	60bb      	str	r3, [r7, #8]
 8002c24:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002c26:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002c2a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c2e:	2302      	movs	r3, #2
 8002c30:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c34:	2301      	movs	r3, #1
 8002c36:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002c40:	2307      	movs	r3, #7
 8002c42:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c46:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	4805      	ldr	r0, [pc, #20]	@ (8002c64 <HAL_UART_MspInit+0xbc>)
 8002c4e:	f000 fd91 	bl	8003774 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002c52:	bf00      	nop
 8002c54:	37a8      	adds	r7, #168	@ 0xa8
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	40004800 	.word	0x40004800
 8002c60:	40023800 	.word	0x40023800
 8002c64:	40020c00 	.word	0x40020c00

08002c68 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002c6c:	4b14      	ldr	r3, [pc, #80]	@ (8002cc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c6e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002c72:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002c74:	4b12      	ldr	r3, [pc, #72]	@ (8002cc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c76:	2206      	movs	r2, #6
 8002c78:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002c7a:	4b11      	ldr	r3, [pc, #68]	@ (8002cc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c7c:	2202      	movs	r2, #2
 8002c7e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002c80:	4b0f      	ldr	r3, [pc, #60]	@ (8002cc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002c86:	4b0e      	ldr	r3, [pc, #56]	@ (8002cc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c88:	2202      	movs	r2, #2
 8002c8a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002c8c:	4b0c      	ldr	r3, [pc, #48]	@ (8002cc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c8e:	2201      	movs	r2, #1
 8002c90:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002c92:	4b0b      	ldr	r3, [pc, #44]	@ (8002cc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002c98:	4b09      	ldr	r3, [pc, #36]	@ (8002cc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002c9e:	4b08      	ldr	r3, [pc, #32]	@ (8002cc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002ca4:	4b06      	ldr	r3, [pc, #24]	@ (8002cc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002caa:	4805      	ldr	r0, [pc, #20]	@ (8002cc0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002cac:	f001 ff95 	bl	8004bda <HAL_PCD_Init>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d001      	beq.n	8002cba <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8002cb6:	f7ff fb15 	bl	80022e4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002cba:	bf00      	nop
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	20000910 	.word	0x20000910

08002cc4 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b0ac      	sub	sp, #176	@ 0xb0
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ccc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	601a      	str	r2, [r3, #0]
 8002cd4:	605a      	str	r2, [r3, #4]
 8002cd6:	609a      	str	r2, [r3, #8]
 8002cd8:	60da      	str	r2, [r3, #12]
 8002cda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002cdc:	f107 0318 	add.w	r3, r7, #24
 8002ce0:	2284      	movs	r2, #132	@ 0x84
 8002ce2:	2100      	movs	r1, #0
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f005 f8d1 	bl	8007e8c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002cf2:	d159      	bne.n	8002da8 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002cf4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002cf8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d00:	f107 0318 	add.w	r3, r7, #24
 8002d04:	4618      	mov	r0, r3
 8002d06:	f002 fd7d 	bl	8005804 <HAL_RCCEx_PeriphCLKConfig>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d001      	beq.n	8002d14 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8002d10:	f7ff fae8 	bl	80022e4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d14:	4b26      	ldr	r3, [pc, #152]	@ (8002db0 <HAL_PCD_MspInit+0xec>)
 8002d16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d18:	4a25      	ldr	r2, [pc, #148]	@ (8002db0 <HAL_PCD_MspInit+0xec>)
 8002d1a:	f043 0301 	orr.w	r3, r3, #1
 8002d1e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d20:	4b23      	ldr	r3, [pc, #140]	@ (8002db0 <HAL_PCD_MspInit+0xec>)
 8002d22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d24:	f003 0301 	and.w	r3, r3, #1
 8002d28:	617b      	str	r3, [r7, #20]
 8002d2a:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002d2c:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8002d30:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d34:	2302      	movs	r3, #2
 8002d36:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d40:	2303      	movs	r3, #3
 8002d42:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002d46:	230a      	movs	r3, #10
 8002d48:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d4c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002d50:	4619      	mov	r1, r3
 8002d52:	4818      	ldr	r0, [pc, #96]	@ (8002db4 <HAL_PCD_MspInit+0xf0>)
 8002d54:	f000 fd0e 	bl	8003774 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002d58:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d5c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d60:	2300      	movs	r3, #0
 8002d62:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d66:	2300      	movs	r3, #0
 8002d68:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002d6c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002d70:	4619      	mov	r1, r3
 8002d72:	4810      	ldr	r0, [pc, #64]	@ (8002db4 <HAL_PCD_MspInit+0xf0>)
 8002d74:	f000 fcfe 	bl	8003774 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002d78:	4b0d      	ldr	r3, [pc, #52]	@ (8002db0 <HAL_PCD_MspInit+0xec>)
 8002d7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d7c:	4a0c      	ldr	r2, [pc, #48]	@ (8002db0 <HAL_PCD_MspInit+0xec>)
 8002d7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d82:	6353      	str	r3, [r2, #52]	@ 0x34
 8002d84:	4b0a      	ldr	r3, [pc, #40]	@ (8002db0 <HAL_PCD_MspInit+0xec>)
 8002d86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d8c:	613b      	str	r3, [r7, #16]
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	4b07      	ldr	r3, [pc, #28]	@ (8002db0 <HAL_PCD_MspInit+0xec>)
 8002d92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d94:	4a06      	ldr	r2, [pc, #24]	@ (8002db0 <HAL_PCD_MspInit+0xec>)
 8002d96:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d9a:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d9c:	4b04      	ldr	r3, [pc, #16]	@ (8002db0 <HAL_PCD_MspInit+0xec>)
 8002d9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002da0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002da4:	60fb      	str	r3, [r7, #12]
 8002da6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8002da8:	bf00      	nop
 8002daa:	37b0      	adds	r7, #176	@ 0xb0
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	40023800 	.word	0x40023800
 8002db4:	40020000 	.word	0x40020000

08002db8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002db8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002df0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002dbc:	f7ff fdc8 	bl	8002950 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002dc0:	480c      	ldr	r0, [pc, #48]	@ (8002df4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002dc2:	490d      	ldr	r1, [pc, #52]	@ (8002df8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002dc4:	4a0d      	ldr	r2, [pc, #52]	@ (8002dfc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002dc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002dc8:	e002      	b.n	8002dd0 <LoopCopyDataInit>

08002dca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002dca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002dcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002dce:	3304      	adds	r3, #4

08002dd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002dd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002dd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002dd4:	d3f9      	bcc.n	8002dca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002dd6:	4a0a      	ldr	r2, [pc, #40]	@ (8002e00 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002dd8:	4c0a      	ldr	r4, [pc, #40]	@ (8002e04 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002dda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ddc:	e001      	b.n	8002de2 <LoopFillZerobss>

08002dde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002dde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002de0:	3204      	adds	r2, #4

08002de2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002de2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002de4:	d3fb      	bcc.n	8002dde <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002de6:	f005 f85f 	bl	8007ea8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002dea:	f7fe fa15 	bl	8001218 <main>
  bx  lr    
 8002dee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002df0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002df4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002df8:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8002dfc:	08009e14 	.word	0x08009e14
  ldr r2, =_sbss
 8002e00:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002e04:	20000f3c 	.word	0x20000f3c

08002e08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e08:	e7fe      	b.n	8002e08 <ADC_IRQHandler>

08002e0a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e0a:	b580      	push	{r7, lr}
 8002e0c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e0e:	2003      	movs	r0, #3
 8002e10:	f000 f92e 	bl	8003070 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e14:	2000      	movs	r0, #0
 8002e16:	f000 f805 	bl	8002e24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e1a:	f7ff fd0f 	bl	800283c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e1e:	2300      	movs	r3, #0
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e2c:	4b12      	ldr	r3, [pc, #72]	@ (8002e78 <HAL_InitTick+0x54>)
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	4b12      	ldr	r3, [pc, #72]	@ (8002e7c <HAL_InitTick+0x58>)
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	4619      	mov	r1, r3
 8002e36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e42:	4618      	mov	r0, r3
 8002e44:	f000 f93b 	bl	80030be <HAL_SYSTICK_Config>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d001      	beq.n	8002e52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e00e      	b.n	8002e70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2b0f      	cmp	r3, #15
 8002e56:	d80a      	bhi.n	8002e6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e58:	2200      	movs	r2, #0
 8002e5a:	6879      	ldr	r1, [r7, #4]
 8002e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e60:	f000 f911 	bl	8003086 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e64:	4a06      	ldr	r2, [pc, #24]	@ (8002e80 <HAL_InitTick+0x5c>)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	e000      	b.n	8002e70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3708      	adds	r7, #8
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	20000044 	.word	0x20000044
 8002e7c:	2000004c 	.word	0x2000004c
 8002e80:	20000048 	.word	0x20000048

08002e84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e84:	b480      	push	{r7}
 8002e86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e88:	4b06      	ldr	r3, [pc, #24]	@ (8002ea4 <HAL_IncTick+0x20>)
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	4b06      	ldr	r3, [pc, #24]	@ (8002ea8 <HAL_IncTick+0x24>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4413      	add	r3, r2
 8002e94:	4a04      	ldr	r2, [pc, #16]	@ (8002ea8 <HAL_IncTick+0x24>)
 8002e96:	6013      	str	r3, [r2, #0]
}
 8002e98:	bf00      	nop
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop
 8002ea4:	2000004c 	.word	0x2000004c
 8002ea8:	20000df0 	.word	0x20000df0

08002eac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0
  return uwTick;
 8002eb0:	4b03      	ldr	r3, [pc, #12]	@ (8002ec0 <HAL_GetTick+0x14>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	20000df0 	.word	0x20000df0

08002ec4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ecc:	f7ff ffee 	bl	8002eac <HAL_GetTick>
 8002ed0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002edc:	d005      	beq.n	8002eea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ede:	4b0a      	ldr	r3, [pc, #40]	@ (8002f08 <HAL_Delay+0x44>)
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	4413      	add	r3, r2
 8002ee8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002eea:	bf00      	nop
 8002eec:	f7ff ffde 	bl	8002eac <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	68fa      	ldr	r2, [r7, #12]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d8f7      	bhi.n	8002eec <HAL_Delay+0x28>
  {
  }
}
 8002efc:	bf00      	nop
 8002efe:	bf00      	nop
 8002f00:	3710      	adds	r7, #16
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	2000004c 	.word	0x2000004c

08002f0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b085      	sub	sp, #20
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f003 0307 	and.w	r3, r3, #7
 8002f1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f1c:	4b0b      	ldr	r3, [pc, #44]	@ (8002f4c <__NVIC_SetPriorityGrouping+0x40>)
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f22:	68ba      	ldr	r2, [r7, #8]
 8002f24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f28:	4013      	ands	r3, r2
 8002f2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002f34:	4b06      	ldr	r3, [pc, #24]	@ (8002f50 <__NVIC_SetPriorityGrouping+0x44>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f3a:	4a04      	ldr	r2, [pc, #16]	@ (8002f4c <__NVIC_SetPriorityGrouping+0x40>)
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	60d3      	str	r3, [r2, #12]
}
 8002f40:	bf00      	nop
 8002f42:	3714      	adds	r7, #20
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr
 8002f4c:	e000ed00 	.word	0xe000ed00
 8002f50:	05fa0000 	.word	0x05fa0000

08002f54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f54:	b480      	push	{r7}
 8002f56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f58:	4b04      	ldr	r3, [pc, #16]	@ (8002f6c <__NVIC_GetPriorityGrouping+0x18>)
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	0a1b      	lsrs	r3, r3, #8
 8002f5e:	f003 0307 	and.w	r3, r3, #7
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr
 8002f6c:	e000ed00 	.word	0xe000ed00

08002f70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	4603      	mov	r3, r0
 8002f78:	6039      	str	r1, [r7, #0]
 8002f7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	db0a      	blt.n	8002f9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	b2da      	uxtb	r2, r3
 8002f88:	490c      	ldr	r1, [pc, #48]	@ (8002fbc <__NVIC_SetPriority+0x4c>)
 8002f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f8e:	0112      	lsls	r2, r2, #4
 8002f90:	b2d2      	uxtb	r2, r2
 8002f92:	440b      	add	r3, r1
 8002f94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f98:	e00a      	b.n	8002fb0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	b2da      	uxtb	r2, r3
 8002f9e:	4908      	ldr	r1, [pc, #32]	@ (8002fc0 <__NVIC_SetPriority+0x50>)
 8002fa0:	79fb      	ldrb	r3, [r7, #7]
 8002fa2:	f003 030f 	and.w	r3, r3, #15
 8002fa6:	3b04      	subs	r3, #4
 8002fa8:	0112      	lsls	r2, r2, #4
 8002faa:	b2d2      	uxtb	r2, r2
 8002fac:	440b      	add	r3, r1
 8002fae:	761a      	strb	r2, [r3, #24]
}
 8002fb0:	bf00      	nop
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr
 8002fbc:	e000e100 	.word	0xe000e100
 8002fc0:	e000ed00 	.word	0xe000ed00

08002fc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b089      	sub	sp, #36	@ 0x24
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f003 0307 	and.w	r3, r3, #7
 8002fd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	f1c3 0307 	rsb	r3, r3, #7
 8002fde:	2b04      	cmp	r3, #4
 8002fe0:	bf28      	it	cs
 8002fe2:	2304      	movcs	r3, #4
 8002fe4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	3304      	adds	r3, #4
 8002fea:	2b06      	cmp	r3, #6
 8002fec:	d902      	bls.n	8002ff4 <NVIC_EncodePriority+0x30>
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	3b03      	subs	r3, #3
 8002ff2:	e000      	b.n	8002ff6 <NVIC_EncodePriority+0x32>
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8003002:	43da      	mvns	r2, r3
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	401a      	ands	r2, r3
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800300c:	f04f 31ff 	mov.w	r1, #4294967295
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	fa01 f303 	lsl.w	r3, r1, r3
 8003016:	43d9      	mvns	r1, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800301c:	4313      	orrs	r3, r2
         );
}
 800301e:	4618      	mov	r0, r3
 8003020:	3724      	adds	r7, #36	@ 0x24
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
	...

0800302c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	3b01      	subs	r3, #1
 8003038:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800303c:	d301      	bcc.n	8003042 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800303e:	2301      	movs	r3, #1
 8003040:	e00f      	b.n	8003062 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003042:	4a0a      	ldr	r2, [pc, #40]	@ (800306c <SysTick_Config+0x40>)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	3b01      	subs	r3, #1
 8003048:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800304a:	210f      	movs	r1, #15
 800304c:	f04f 30ff 	mov.w	r0, #4294967295
 8003050:	f7ff ff8e 	bl	8002f70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003054:	4b05      	ldr	r3, [pc, #20]	@ (800306c <SysTick_Config+0x40>)
 8003056:	2200      	movs	r2, #0
 8003058:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800305a:	4b04      	ldr	r3, [pc, #16]	@ (800306c <SysTick_Config+0x40>)
 800305c:	2207      	movs	r2, #7
 800305e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3708      	adds	r7, #8
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	e000e010 	.word	0xe000e010

08003070 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f7ff ff47 	bl	8002f0c <__NVIC_SetPriorityGrouping>
}
 800307e:	bf00      	nop
 8003080:	3708      	adds	r7, #8
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}

08003086 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003086:	b580      	push	{r7, lr}
 8003088:	b086      	sub	sp, #24
 800308a:	af00      	add	r7, sp, #0
 800308c:	4603      	mov	r3, r0
 800308e:	60b9      	str	r1, [r7, #8]
 8003090:	607a      	str	r2, [r7, #4]
 8003092:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003094:	2300      	movs	r3, #0
 8003096:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003098:	f7ff ff5c 	bl	8002f54 <__NVIC_GetPriorityGrouping>
 800309c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	68b9      	ldr	r1, [r7, #8]
 80030a2:	6978      	ldr	r0, [r7, #20]
 80030a4:	f7ff ff8e 	bl	8002fc4 <NVIC_EncodePriority>
 80030a8:	4602      	mov	r2, r0
 80030aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030ae:	4611      	mov	r1, r2
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7ff ff5d 	bl	8002f70 <__NVIC_SetPriority>
}
 80030b6:	bf00      	nop
 80030b8:	3718      	adds	r7, #24
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}

080030be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030be:	b580      	push	{r7, lr}
 80030c0:	b082      	sub	sp, #8
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f7ff ffb0 	bl	800302c <SysTick_Config>
 80030cc:	4603      	mov	r3, r0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3708      	adds	r7, #8
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
	...

080030d8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d101      	bne.n	80030ea <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e086      	b.n	80031f8 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d106      	bne.n	8003102 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2220      	movs	r2, #32
 80030f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f7fd fac3 	bl	8000688 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003102:	4b3f      	ldr	r3, [pc, #252]	@ (8003200 <HAL_ETH_Init+0x128>)
 8003104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003106:	4a3e      	ldr	r2, [pc, #248]	@ (8003200 <HAL_ETH_Init+0x128>)
 8003108:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800310c:	6453      	str	r3, [r2, #68]	@ 0x44
 800310e:	4b3c      	ldr	r3, [pc, #240]	@ (8003200 <HAL_ETH_Init+0x128>)
 8003110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003112:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003116:	60bb      	str	r3, [r7, #8]
 8003118:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800311a:	4b3a      	ldr	r3, [pc, #232]	@ (8003204 <HAL_ETH_Init+0x12c>)
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	4a39      	ldr	r2, [pc, #228]	@ (8003204 <HAL_ETH_Init+0x12c>)
 8003120:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003124:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003126:	4b37      	ldr	r3, [pc, #220]	@ (8003204 <HAL_ETH_Init+0x12c>)
 8003128:	685a      	ldr	r2, [r3, #4]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	4935      	ldr	r1, [pc, #212]	@ (8003204 <HAL_ETH_Init+0x12c>)
 8003130:	4313      	orrs	r3, r2
 8003132:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003134:	4b33      	ldr	r3, [pc, #204]	@ (8003204 <HAL_ETH_Init+0x12c>)
 8003136:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	6812      	ldr	r2, [r2, #0]
 8003146:	f043 0301 	orr.w	r3, r3, #1
 800314a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800314e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003150:	f7ff feac 	bl	8002eac <HAL_GetTick>
 8003154:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003156:	e011      	b.n	800317c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003158:	f7ff fea8 	bl	8002eac <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003166:	d909      	bls.n	800317c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2204      	movs	r2, #4
 800316c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	22e0      	movs	r2, #224	@ 0xe0
 8003174:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e03d      	b.n	80031f8 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0301 	and.w	r3, r3, #1
 800318a:	2b00      	cmp	r3, #0
 800318c:	d1e4      	bne.n	8003158 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f000 f97a 	bl	8003488 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f000 fa25 	bl	80035e4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 fa7b 	bl	8003696 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	461a      	mov	r2, r3
 80031a6:	2100      	movs	r1, #0
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f000 f9e3 	bl	8003574 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 80031bc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	4b0f      	ldr	r3, [pc, #60]	@ (8003208 <HAL_ETH_Init+0x130>)
 80031cc:	430b      	orrs	r3, r1
 80031ce:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 80031e2:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2210      	movs	r2, #16
 80031f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80031f6:	2300      	movs	r3, #0
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3710      	adds	r7, #16
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	40023800 	.word	0x40023800
 8003204:	40013800 	.word	0x40013800
 8003208:	00020060 	.word	0x00020060

0800320c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	4b53      	ldr	r3, [pc, #332]	@ (8003370 <ETH_SetMACConfig+0x164>)
 8003222:	4013      	ands	r3, r2
 8003224:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	7b9b      	ldrb	r3, [r3, #14]
 800322a:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800322c:	683a      	ldr	r2, [r7, #0]
 800322e:	7c12      	ldrb	r2, [r2, #16]
 8003230:	2a00      	cmp	r2, #0
 8003232:	d102      	bne.n	800323a <ETH_SetMACConfig+0x2e>
 8003234:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003238:	e000      	b.n	800323c <ETH_SetMACConfig+0x30>
 800323a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800323c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800323e:	683a      	ldr	r2, [r7, #0]
 8003240:	7c52      	ldrb	r2, [r2, #17]
 8003242:	2a00      	cmp	r2, #0
 8003244:	d102      	bne.n	800324c <ETH_SetMACConfig+0x40>
 8003246:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800324a:	e000      	b.n	800324e <ETH_SetMACConfig+0x42>
 800324c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800324e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003254:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	7fdb      	ldrb	r3, [r3, #31]
 800325a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800325c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003262:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003264:	683a      	ldr	r2, [r7, #0]
 8003266:	7f92      	ldrb	r2, [r2, #30]
 8003268:	2a00      	cmp	r2, #0
 800326a:	d102      	bne.n	8003272 <ETH_SetMACConfig+0x66>
 800326c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003270:	e000      	b.n	8003274 <ETH_SetMACConfig+0x68>
 8003272:	2200      	movs	r2, #0
                        macconf->Speed |
 8003274:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	7f1b      	ldrb	r3, [r3, #28]
 800327a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800327c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003282:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	791b      	ldrb	r3, [r3, #4]
 8003288:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800328a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800328c:	683a      	ldr	r2, [r7, #0]
 800328e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003292:	2a00      	cmp	r2, #0
 8003294:	d102      	bne.n	800329c <ETH_SetMACConfig+0x90>
 8003296:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800329a:	e000      	b.n	800329e <ETH_SetMACConfig+0x92>
 800329c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800329e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	7bdb      	ldrb	r3, [r3, #15]
 80032a4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80032a6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80032ac:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80032b4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80032b6:	4313      	orrs	r3, r2
 80032b8:	68fa      	ldr	r2, [r7, #12]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	68fa      	ldr	r2, [r7, #12]
 80032c4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80032ce:	2001      	movs	r0, #1
 80032d0:	f7ff fdf8 	bl	8002ec4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	68fa      	ldr	r2, [r7, #12]
 80032da:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	699b      	ldr	r3, [r3, #24]
 80032e2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80032e4:	68fa      	ldr	r2, [r7, #12]
 80032e6:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80032ea:	4013      	ands	r3, r2
 80032ec:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032f2:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80032f4:	683a      	ldr	r2, [r7, #0]
 80032f6:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80032fa:	2a00      	cmp	r2, #0
 80032fc:	d101      	bne.n	8003302 <ETH_SetMACConfig+0xf6>
 80032fe:	2280      	movs	r2, #128	@ 0x80
 8003300:	e000      	b.n	8003304 <ETH_SetMACConfig+0xf8>
 8003302:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003304:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800330a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800330c:	683a      	ldr	r2, [r7, #0]
 800330e:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8003312:	2a01      	cmp	r2, #1
 8003314:	d101      	bne.n	800331a <ETH_SetMACConfig+0x10e>
 8003316:	2208      	movs	r2, #8
 8003318:	e000      	b.n	800331c <ETH_SetMACConfig+0x110>
 800331a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800331c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800331e:	683a      	ldr	r2, [r7, #0]
 8003320:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8003324:	2a01      	cmp	r2, #1
 8003326:	d101      	bne.n	800332c <ETH_SetMACConfig+0x120>
 8003328:	2204      	movs	r2, #4
 800332a:	e000      	b.n	800332e <ETH_SetMACConfig+0x122>
 800332c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800332e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003330:	683a      	ldr	r2, [r7, #0]
 8003332:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8003336:	2a01      	cmp	r2, #1
 8003338:	d101      	bne.n	800333e <ETH_SetMACConfig+0x132>
 800333a:	2202      	movs	r2, #2
 800333c:	e000      	b.n	8003340 <ETH_SetMACConfig+0x134>
 800333e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003340:	4313      	orrs	r3, r2
 8003342:	68fa      	ldr	r2, [r7, #12]
 8003344:	4313      	orrs	r3, r2
 8003346:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	68fa      	ldr	r2, [r7, #12]
 800334e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	699b      	ldr	r3, [r3, #24]
 8003356:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003358:	2001      	movs	r0, #1
 800335a:	f7ff fdb3 	bl	8002ec4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	68fa      	ldr	r2, [r7, #12]
 8003364:	619a      	str	r2, [r3, #24]
}
 8003366:	bf00      	nop
 8003368:	3710      	adds	r7, #16
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	fd20810f 	.word	0xfd20810f

08003374 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003386:	699b      	ldr	r3, [r3, #24]
 8003388:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800338a:	68fa      	ldr	r2, [r7, #12]
 800338c:	4b3d      	ldr	r3, [pc, #244]	@ (8003484 <ETH_SetDMAConfig+0x110>)
 800338e:	4013      	ands	r3, r2
 8003390:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	7b1b      	ldrb	r3, [r3, #12]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d102      	bne.n	80033a0 <ETH_SetDMAConfig+0x2c>
 800339a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800339e:	e000      	b.n	80033a2 <ETH_SetDMAConfig+0x2e>
 80033a0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	7b5b      	ldrb	r3, [r3, #13]
 80033a6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80033a8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80033aa:	683a      	ldr	r2, [r7, #0]
 80033ac:	7f52      	ldrb	r2, [r2, #29]
 80033ae:	2a00      	cmp	r2, #0
 80033b0:	d102      	bne.n	80033b8 <ETH_SetDMAConfig+0x44>
 80033b2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80033b6:	e000      	b.n	80033ba <ETH_SetDMAConfig+0x46>
 80033b8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80033ba:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	7b9b      	ldrb	r3, [r3, #14]
 80033c0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80033c2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80033c8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	7f1b      	ldrb	r3, [r3, #28]
 80033ce:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80033d0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	7f9b      	ldrb	r3, [r3, #30]
 80033d6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80033d8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80033de:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80033e6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80033e8:	4313      	orrs	r3, r2
 80033ea:	68fa      	ldr	r2, [r7, #12]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80033f8:	461a      	mov	r2, r3
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003406:	699b      	ldr	r3, [r3, #24]
 8003408:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800340a:	2001      	movs	r0, #1
 800340c:	f7ff fd5a 	bl	8002ec4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003418:	461a      	mov	r2, r3
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	791b      	ldrb	r3, [r3, #4]
 8003422:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003428:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800342e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003434:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800343c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800343e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003444:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003446:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800344c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	6812      	ldr	r2, [r2, #0]
 8003452:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003456:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800345a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003468:	2001      	movs	r0, #1
 800346a:	f7ff fd2b 	bl	8002ec4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003476:	461a      	mov	r2, r3
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6013      	str	r3, [r2, #0]
}
 800347c:	bf00      	nop
 800347e:	3710      	adds	r7, #16
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}
 8003484:	f8de3f23 	.word	0xf8de3f23

08003488 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b0a6      	sub	sp, #152	@ 0x98
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003490:	2301      	movs	r3, #1
 8003492:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8003496:	2301      	movs	r3, #1
 8003498:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800349c:	2300      	movs	r3, #0
 800349e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80034a0:	2300      	movs	r3, #0
 80034a2:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80034a6:	2301      	movs	r3, #1
 80034a8:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80034ac:	2300      	movs	r3, #0
 80034ae:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80034b2:	2301      	movs	r3, #1
 80034b4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 80034b8:	2301      	movs	r3, #1
 80034ba:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80034be:	2300      	movs	r3, #0
 80034c0:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80034c4:	2300      	movs	r3, #0
 80034c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80034ca:	2300      	movs	r3, #0
 80034cc:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80034ce:	2300      	movs	r3, #0
 80034d0:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80034d4:	2300      	movs	r3, #0
 80034d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80034d8:	2300      	movs	r3, #0
 80034da:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80034de:	2300      	movs	r3, #0
 80034e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80034e4:	2300      	movs	r3, #0
 80034e6:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80034ea:	2300      	movs	r3, #0
 80034ec:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80034f0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80034f4:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80034f6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80034fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80034fc:	2300      	movs	r3, #0
 80034fe:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003502:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003506:	4619      	mov	r1, r3
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f7ff fe7f 	bl	800320c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800350e:	2301      	movs	r3, #1
 8003510:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003512:	2301      	movs	r3, #1
 8003514:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003516:	2301      	movs	r3, #1
 8003518:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800351c:	2301      	movs	r3, #1
 800351e:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003520:	2300      	movs	r3, #0
 8003522:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003524:	2300      	movs	r3, #0
 8003526:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800352a:	2300      	movs	r3, #0
 800352c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003530:	2300      	movs	r3, #0
 8003532:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003534:	2301      	movs	r3, #1
 8003536:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800353a:	2301      	movs	r3, #1
 800353c:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800353e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003542:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003544:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003548:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800354a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800354e:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003550:	2301      	movs	r3, #1
 8003552:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003556:	2300      	movs	r3, #0
 8003558:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800355a:	2300      	movs	r3, #0
 800355c:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800355e:	f107 0308 	add.w	r3, r7, #8
 8003562:	4619      	mov	r1, r3
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f7ff ff05 	bl	8003374 <ETH_SetDMAConfig>
}
 800356a:	bf00      	nop
 800356c:	3798      	adds	r7, #152	@ 0x98
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
	...

08003574 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003574:	b480      	push	{r7}
 8003576:	b087      	sub	sp, #28
 8003578:	af00      	add	r7, sp, #0
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	3305      	adds	r3, #5
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	021b      	lsls	r3, r3, #8
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	3204      	adds	r2, #4
 800358c:	7812      	ldrb	r2, [r2, #0]
 800358e:	4313      	orrs	r3, r2
 8003590:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003592:	68ba      	ldr	r2, [r7, #8]
 8003594:	4b11      	ldr	r3, [pc, #68]	@ (80035dc <ETH_MACAddressConfig+0x68>)
 8003596:	4413      	add	r3, r2
 8003598:	461a      	mov	r2, r3
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	3303      	adds	r3, #3
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	061a      	lsls	r2, r3, #24
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	3302      	adds	r3, #2
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	041b      	lsls	r3, r3, #16
 80035ae:	431a      	orrs	r2, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	3301      	adds	r3, #1
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	021b      	lsls	r3, r3, #8
 80035b8:	4313      	orrs	r3, r2
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	7812      	ldrb	r2, [r2, #0]
 80035be:	4313      	orrs	r3, r2
 80035c0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80035c2:	68ba      	ldr	r2, [r7, #8]
 80035c4:	4b06      	ldr	r3, [pc, #24]	@ (80035e0 <ETH_MACAddressConfig+0x6c>)
 80035c6:	4413      	add	r3, r2
 80035c8:	461a      	mov	r2, r3
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	6013      	str	r3, [r2, #0]
}
 80035ce:	bf00      	nop
 80035d0:	371c      	adds	r7, #28
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	40028040 	.word	0x40028040
 80035e0:	40028044 	.word	0x40028044

080035e4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80035ec:	2300      	movs	r3, #0
 80035ee:	60fb      	str	r3, [r7, #12]
 80035f0:	e03e      	b.n	8003670 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	68d9      	ldr	r1, [r3, #12]
 80035f6:	68fa      	ldr	r2, [r7, #12]
 80035f8:	4613      	mov	r3, r2
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	4413      	add	r3, r2
 80035fe:	00db      	lsls	r3, r3, #3
 8003600:	440b      	add	r3, r1
 8003602:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	2200      	movs	r2, #0
 8003608:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	2200      	movs	r2, #0
 800360e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	2200      	movs	r2, #0
 8003614:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	2200      	movs	r2, #0
 800361a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800361c:	68b9      	ldr	r1, [r7, #8]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	68fa      	ldr	r2, [r7, #12]
 8003622:	3206      	adds	r2, #6
 8003624:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2b02      	cmp	r3, #2
 8003638:	d80c      	bhi.n	8003654 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	68d9      	ldr	r1, [r3, #12]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	1c5a      	adds	r2, r3, #1
 8003642:	4613      	mov	r3, r2
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	4413      	add	r3, r2
 8003648:	00db      	lsls	r3, r3, #3
 800364a:	440b      	add	r3, r1
 800364c:	461a      	mov	r2, r3
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	60da      	str	r2, [r3, #12]
 8003652:	e004      	b.n	800365e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	461a      	mov	r2, r3
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	3301      	adds	r3, #1
 800366e:	60fb      	str	r3, [r7, #12]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2b03      	cmp	r3, #3
 8003674:	d9bd      	bls.n	80035f2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	68da      	ldr	r2, [r3, #12]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003688:	611a      	str	r2, [r3, #16]
}
 800368a:	bf00      	nop
 800368c:	3714      	adds	r7, #20
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr

08003696 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003696:	b480      	push	{r7}
 8003698:	b085      	sub	sp, #20
 800369a:	af00      	add	r7, sp, #0
 800369c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800369e:	2300      	movs	r3, #0
 80036a0:	60fb      	str	r3, [r7, #12]
 80036a2:	e048      	b.n	8003736 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6919      	ldr	r1, [r3, #16]
 80036a8:	68fa      	ldr	r2, [r7, #12]
 80036aa:	4613      	mov	r3, r2
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	4413      	add	r3, r2
 80036b0:	00db      	lsls	r3, r3, #3
 80036b2:	440b      	add	r3, r1
 80036b4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	2200      	movs	r2, #0
 80036ba:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	2200      	movs	r2, #0
 80036c0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	2200      	movs	r2, #0
 80036c6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	2200      	movs	r2, #0
 80036cc:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	2200      	movs	r2, #0
 80036d2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	2200      	movs	r2, #0
 80036d8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80036e0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	695b      	ldr	r3, [r3, #20]
 80036e6:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80036fa:	68b9      	ldr	r1, [r7, #8]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	68fa      	ldr	r2, [r7, #12]
 8003700:	3212      	adds	r2, #18
 8003702:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2b02      	cmp	r3, #2
 800370a:	d80c      	bhi.n	8003726 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6919      	ldr	r1, [r3, #16]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	1c5a      	adds	r2, r3, #1
 8003714:	4613      	mov	r3, r2
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	4413      	add	r3, r2
 800371a:	00db      	lsls	r3, r3, #3
 800371c:	440b      	add	r3, r1
 800371e:	461a      	mov	r2, r3
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	60da      	str	r2, [r3, #12]
 8003724:	e004      	b.n	8003730 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	691b      	ldr	r3, [r3, #16]
 800372a:	461a      	mov	r2, r3
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	3301      	adds	r3, #1
 8003734:	60fb      	str	r3, [r7, #12]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2b03      	cmp	r3, #3
 800373a:	d9b3      	bls.n	80036a4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	691a      	ldr	r2, [r3, #16]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003766:	60da      	str	r2, [r3, #12]
}
 8003768:	bf00      	nop
 800376a:	3714      	adds	r7, #20
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003774:	b480      	push	{r7}
 8003776:	b089      	sub	sp, #36	@ 0x24
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800377e:	2300      	movs	r3, #0
 8003780:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003782:	2300      	movs	r3, #0
 8003784:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003786:	2300      	movs	r3, #0
 8003788:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800378a:	2300      	movs	r3, #0
 800378c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800378e:	2300      	movs	r3, #0
 8003790:	61fb      	str	r3, [r7, #28]
 8003792:	e175      	b.n	8003a80 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003794:	2201      	movs	r2, #1
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	fa02 f303 	lsl.w	r3, r2, r3
 800379c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	697a      	ldr	r2, [r7, #20]
 80037a4:	4013      	ands	r3, r2
 80037a6:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80037a8:	693a      	ldr	r2, [r7, #16]
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	f040 8164 	bne.w	8003a7a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f003 0303 	and.w	r3, r3, #3
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d005      	beq.n	80037ca <HAL_GPIO_Init+0x56>
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	f003 0303 	and.w	r3, r3, #3
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d130      	bne.n	800382c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	005b      	lsls	r3, r3, #1
 80037d4:	2203      	movs	r2, #3
 80037d6:	fa02 f303 	lsl.w	r3, r2, r3
 80037da:	43db      	mvns	r3, r3
 80037dc:	69ba      	ldr	r2, [r7, #24]
 80037de:	4013      	ands	r3, r2
 80037e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	68da      	ldr	r2, [r3, #12]
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	005b      	lsls	r3, r3, #1
 80037ea:	fa02 f303 	lsl.w	r3, r2, r3
 80037ee:	69ba      	ldr	r2, [r7, #24]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	69ba      	ldr	r2, [r7, #24]
 80037f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003800:	2201      	movs	r2, #1
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	fa02 f303 	lsl.w	r3, r2, r3
 8003808:	43db      	mvns	r3, r3
 800380a:	69ba      	ldr	r2, [r7, #24]
 800380c:	4013      	ands	r3, r2
 800380e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	091b      	lsrs	r3, r3, #4
 8003816:	f003 0201 	and.w	r2, r3, #1
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	fa02 f303 	lsl.w	r3, r2, r3
 8003820:	69ba      	ldr	r2, [r7, #24]
 8003822:	4313      	orrs	r3, r2
 8003824:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	69ba      	ldr	r2, [r7, #24]
 800382a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	f003 0303 	and.w	r3, r3, #3
 8003834:	2b03      	cmp	r3, #3
 8003836:	d017      	beq.n	8003868 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	005b      	lsls	r3, r3, #1
 8003842:	2203      	movs	r2, #3
 8003844:	fa02 f303 	lsl.w	r3, r2, r3
 8003848:	43db      	mvns	r3, r3
 800384a:	69ba      	ldr	r2, [r7, #24]
 800384c:	4013      	ands	r3, r2
 800384e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	689a      	ldr	r2, [r3, #8]
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	005b      	lsls	r3, r3, #1
 8003858:	fa02 f303 	lsl.w	r3, r2, r3
 800385c:	69ba      	ldr	r2, [r7, #24]
 800385e:	4313      	orrs	r3, r2
 8003860:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	69ba      	ldr	r2, [r7, #24]
 8003866:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f003 0303 	and.w	r3, r3, #3
 8003870:	2b02      	cmp	r3, #2
 8003872:	d123      	bne.n	80038bc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	08da      	lsrs	r2, r3, #3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	3208      	adds	r2, #8
 800387c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003880:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	f003 0307 	and.w	r3, r3, #7
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	220f      	movs	r2, #15
 800388c:	fa02 f303 	lsl.w	r3, r2, r3
 8003890:	43db      	mvns	r3, r3
 8003892:	69ba      	ldr	r2, [r7, #24]
 8003894:	4013      	ands	r3, r2
 8003896:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	691a      	ldr	r2, [r3, #16]
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	f003 0307 	and.w	r3, r3, #7
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	fa02 f303 	lsl.w	r3, r2, r3
 80038a8:	69ba      	ldr	r2, [r7, #24]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	08da      	lsrs	r2, r3, #3
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	3208      	adds	r2, #8
 80038b6:	69b9      	ldr	r1, [r7, #24]
 80038b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	005b      	lsls	r3, r3, #1
 80038c6:	2203      	movs	r2, #3
 80038c8:	fa02 f303 	lsl.w	r3, r2, r3
 80038cc:	43db      	mvns	r3, r3
 80038ce:	69ba      	ldr	r2, [r7, #24]
 80038d0:	4013      	ands	r3, r2
 80038d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f003 0203 	and.w	r2, r3, #3
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	005b      	lsls	r3, r3, #1
 80038e0:	fa02 f303 	lsl.w	r3, r2, r3
 80038e4:	69ba      	ldr	r2, [r7, #24]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	69ba      	ldr	r2, [r7, #24]
 80038ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	f000 80be 	beq.w	8003a7a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038fe:	4b66      	ldr	r3, [pc, #408]	@ (8003a98 <HAL_GPIO_Init+0x324>)
 8003900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003902:	4a65      	ldr	r2, [pc, #404]	@ (8003a98 <HAL_GPIO_Init+0x324>)
 8003904:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003908:	6453      	str	r3, [r2, #68]	@ 0x44
 800390a:	4b63      	ldr	r3, [pc, #396]	@ (8003a98 <HAL_GPIO_Init+0x324>)
 800390c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800390e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003912:	60fb      	str	r3, [r7, #12]
 8003914:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003916:	4a61      	ldr	r2, [pc, #388]	@ (8003a9c <HAL_GPIO_Init+0x328>)
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	089b      	lsrs	r3, r3, #2
 800391c:	3302      	adds	r3, #2
 800391e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003922:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	f003 0303 	and.w	r3, r3, #3
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	220f      	movs	r2, #15
 800392e:	fa02 f303 	lsl.w	r3, r2, r3
 8003932:	43db      	mvns	r3, r3
 8003934:	69ba      	ldr	r2, [r7, #24]
 8003936:	4013      	ands	r3, r2
 8003938:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a58      	ldr	r2, [pc, #352]	@ (8003aa0 <HAL_GPIO_Init+0x32c>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d037      	beq.n	80039b2 <HAL_GPIO_Init+0x23e>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a57      	ldr	r2, [pc, #348]	@ (8003aa4 <HAL_GPIO_Init+0x330>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d031      	beq.n	80039ae <HAL_GPIO_Init+0x23a>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a56      	ldr	r2, [pc, #344]	@ (8003aa8 <HAL_GPIO_Init+0x334>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d02b      	beq.n	80039aa <HAL_GPIO_Init+0x236>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a55      	ldr	r2, [pc, #340]	@ (8003aac <HAL_GPIO_Init+0x338>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d025      	beq.n	80039a6 <HAL_GPIO_Init+0x232>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a54      	ldr	r2, [pc, #336]	@ (8003ab0 <HAL_GPIO_Init+0x33c>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d01f      	beq.n	80039a2 <HAL_GPIO_Init+0x22e>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a53      	ldr	r2, [pc, #332]	@ (8003ab4 <HAL_GPIO_Init+0x340>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d019      	beq.n	800399e <HAL_GPIO_Init+0x22a>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a52      	ldr	r2, [pc, #328]	@ (8003ab8 <HAL_GPIO_Init+0x344>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d013      	beq.n	800399a <HAL_GPIO_Init+0x226>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a51      	ldr	r2, [pc, #324]	@ (8003abc <HAL_GPIO_Init+0x348>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d00d      	beq.n	8003996 <HAL_GPIO_Init+0x222>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a50      	ldr	r2, [pc, #320]	@ (8003ac0 <HAL_GPIO_Init+0x34c>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d007      	beq.n	8003992 <HAL_GPIO_Init+0x21e>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a4f      	ldr	r2, [pc, #316]	@ (8003ac4 <HAL_GPIO_Init+0x350>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d101      	bne.n	800398e <HAL_GPIO_Init+0x21a>
 800398a:	2309      	movs	r3, #9
 800398c:	e012      	b.n	80039b4 <HAL_GPIO_Init+0x240>
 800398e:	230a      	movs	r3, #10
 8003990:	e010      	b.n	80039b4 <HAL_GPIO_Init+0x240>
 8003992:	2308      	movs	r3, #8
 8003994:	e00e      	b.n	80039b4 <HAL_GPIO_Init+0x240>
 8003996:	2307      	movs	r3, #7
 8003998:	e00c      	b.n	80039b4 <HAL_GPIO_Init+0x240>
 800399a:	2306      	movs	r3, #6
 800399c:	e00a      	b.n	80039b4 <HAL_GPIO_Init+0x240>
 800399e:	2305      	movs	r3, #5
 80039a0:	e008      	b.n	80039b4 <HAL_GPIO_Init+0x240>
 80039a2:	2304      	movs	r3, #4
 80039a4:	e006      	b.n	80039b4 <HAL_GPIO_Init+0x240>
 80039a6:	2303      	movs	r3, #3
 80039a8:	e004      	b.n	80039b4 <HAL_GPIO_Init+0x240>
 80039aa:	2302      	movs	r3, #2
 80039ac:	e002      	b.n	80039b4 <HAL_GPIO_Init+0x240>
 80039ae:	2301      	movs	r3, #1
 80039b0:	e000      	b.n	80039b4 <HAL_GPIO_Init+0x240>
 80039b2:	2300      	movs	r3, #0
 80039b4:	69fa      	ldr	r2, [r7, #28]
 80039b6:	f002 0203 	and.w	r2, r2, #3
 80039ba:	0092      	lsls	r2, r2, #2
 80039bc:	4093      	lsls	r3, r2
 80039be:	69ba      	ldr	r2, [r7, #24]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80039c4:	4935      	ldr	r1, [pc, #212]	@ (8003a9c <HAL_GPIO_Init+0x328>)
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	089b      	lsrs	r3, r3, #2
 80039ca:	3302      	adds	r3, #2
 80039cc:	69ba      	ldr	r2, [r7, #24]
 80039ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80039d2:	4b3d      	ldr	r3, [pc, #244]	@ (8003ac8 <HAL_GPIO_Init+0x354>)
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	43db      	mvns	r3, r3
 80039dc:	69ba      	ldr	r2, [r7, #24]
 80039de:	4013      	ands	r3, r2
 80039e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d003      	beq.n	80039f6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80039ee:	69ba      	ldr	r2, [r7, #24]
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80039f6:	4a34      	ldr	r2, [pc, #208]	@ (8003ac8 <HAL_GPIO_Init+0x354>)
 80039f8:	69bb      	ldr	r3, [r7, #24]
 80039fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80039fc:	4b32      	ldr	r3, [pc, #200]	@ (8003ac8 <HAL_GPIO_Init+0x354>)
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	43db      	mvns	r3, r3
 8003a06:	69ba      	ldr	r2, [r7, #24]
 8003a08:	4013      	ands	r3, r2
 8003a0a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d003      	beq.n	8003a20 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003a18:	69ba      	ldr	r2, [r7, #24]
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a20:	4a29      	ldr	r2, [pc, #164]	@ (8003ac8 <HAL_GPIO_Init+0x354>)
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003a26:	4b28      	ldr	r3, [pc, #160]	@ (8003ac8 <HAL_GPIO_Init+0x354>)
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	43db      	mvns	r3, r3
 8003a30:	69ba      	ldr	r2, [r7, #24]
 8003a32:	4013      	ands	r3, r2
 8003a34:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d003      	beq.n	8003a4a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003a42:	69ba      	ldr	r2, [r7, #24]
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a4a:	4a1f      	ldr	r2, [pc, #124]	@ (8003ac8 <HAL_GPIO_Init+0x354>)
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a50:	4b1d      	ldr	r3, [pc, #116]	@ (8003ac8 <HAL_GPIO_Init+0x354>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	43db      	mvns	r3, r3
 8003a5a:	69ba      	ldr	r2, [r7, #24]
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d003      	beq.n	8003a74 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003a6c:	69ba      	ldr	r2, [r7, #24]
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a74:	4a14      	ldr	r2, [pc, #80]	@ (8003ac8 <HAL_GPIO_Init+0x354>)
 8003a76:	69bb      	ldr	r3, [r7, #24]
 8003a78:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	61fb      	str	r3, [r7, #28]
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	2b0f      	cmp	r3, #15
 8003a84:	f67f ae86 	bls.w	8003794 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003a88:	bf00      	nop
 8003a8a:	bf00      	nop
 8003a8c:	3724      	adds	r7, #36	@ 0x24
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop
 8003a98:	40023800 	.word	0x40023800
 8003a9c:	40013800 	.word	0x40013800
 8003aa0:	40020000 	.word	0x40020000
 8003aa4:	40020400 	.word	0x40020400
 8003aa8:	40020800 	.word	0x40020800
 8003aac:	40020c00 	.word	0x40020c00
 8003ab0:	40021000 	.word	0x40021000
 8003ab4:	40021400 	.word	0x40021400
 8003ab8:	40021800 	.word	0x40021800
 8003abc:	40021c00 	.word	0x40021c00
 8003ac0:	40022000 	.word	0x40022000
 8003ac4:	40022400 	.word	0x40022400
 8003ac8:	40013c00 	.word	0x40013c00

08003acc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b085      	sub	sp, #20
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	460b      	mov	r3, r1
 8003ad6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	691a      	ldr	r2, [r3, #16]
 8003adc:	887b      	ldrh	r3, [r7, #2]
 8003ade:	4013      	ands	r3, r2
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d002      	beq.n	8003aea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	73fb      	strb	r3, [r7, #15]
 8003ae8:	e001      	b.n	8003aee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003aea:	2300      	movs	r3, #0
 8003aec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3714      	adds	r7, #20
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	460b      	mov	r3, r1
 8003b06:	807b      	strh	r3, [r7, #2]
 8003b08:	4613      	mov	r3, r2
 8003b0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003b0c:	787b      	ldrb	r3, [r7, #1]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d003      	beq.n	8003b1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b12:	887a      	ldrh	r2, [r7, #2]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003b18:	e003      	b.n	8003b22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003b1a:	887b      	ldrh	r3, [r7, #2]
 8003b1c:	041a      	lsls	r2, r3, #16
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	619a      	str	r2, [r3, #24]
}
 8003b22:	bf00      	nop
 8003b24:	370c      	adds	r7, #12
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
	...

08003b30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b082      	sub	sp, #8
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d101      	bne.n	8003b42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e08b      	b.n	8003c5a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d106      	bne.n	8003b5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f7fc ffc0 	bl	8000adc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2224      	movs	r2, #36	@ 0x24
 8003b60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f022 0201 	bic.w	r2, r2, #1
 8003b72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685a      	ldr	r2, [r3, #4]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003b80:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	689a      	ldr	r2, [r3, #8]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003b90:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d107      	bne.n	8003baa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	689a      	ldr	r2, [r3, #8]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003ba6:	609a      	str	r2, [r3, #8]
 8003ba8:	e006      	b.n	8003bb8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	689a      	ldr	r2, [r3, #8]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003bb6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d108      	bne.n	8003bd2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	685a      	ldr	r2, [r3, #4]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003bce:	605a      	str	r2, [r3, #4]
 8003bd0:	e007      	b.n	8003be2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	685a      	ldr	r2, [r3, #4]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003be0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	6859      	ldr	r1, [r3, #4]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	4b1d      	ldr	r3, [pc, #116]	@ (8003c64 <HAL_I2C_Init+0x134>)
 8003bee:	430b      	orrs	r3, r1
 8003bf0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68da      	ldr	r2, [r3, #12]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003c00:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	691a      	ldr	r2, [r3, #16]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	695b      	ldr	r3, [r3, #20]
 8003c0a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	699b      	ldr	r3, [r3, #24]
 8003c12:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	430a      	orrs	r2, r1
 8003c1a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	69d9      	ldr	r1, [r3, #28]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a1a      	ldr	r2, [r3, #32]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	430a      	orrs	r2, r1
 8003c2a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f042 0201 	orr.w	r2, r2, #1
 8003c3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2220      	movs	r2, #32
 8003c46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3708      	adds	r7, #8
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	02008000 	.word	0x02008000

08003c68 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b088      	sub	sp, #32
 8003c6c:	af02      	add	r7, sp, #8
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	607a      	str	r2, [r7, #4]
 8003c72:	461a      	mov	r2, r3
 8003c74:	460b      	mov	r3, r1
 8003c76:	817b      	strh	r3, [r7, #10]
 8003c78:	4613      	mov	r3, r2
 8003c7a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	2b20      	cmp	r3, #32
 8003c86:	f040 80fd 	bne.w	8003e84 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d101      	bne.n	8003c98 <HAL_I2C_Master_Transmit+0x30>
 8003c94:	2302      	movs	r3, #2
 8003c96:	e0f6      	b.n	8003e86 <HAL_I2C_Master_Transmit+0x21e>
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003ca0:	f7ff f904 	bl	8002eac <HAL_GetTick>
 8003ca4:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	9300      	str	r3, [sp, #0]
 8003caa:	2319      	movs	r3, #25
 8003cac:	2201      	movs	r2, #1
 8003cae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003cb2:	68f8      	ldr	r0, [r7, #12]
 8003cb4:	f000 fc78 	bl	80045a8 <I2C_WaitOnFlagUntilTimeout>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d001      	beq.n	8003cc2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e0e1      	b.n	8003e86 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2221      	movs	r2, #33	@ 0x21
 8003cc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2210      	movs	r2, #16
 8003cce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	893a      	ldrh	r2, [r7, #8]
 8003ce2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	2bff      	cmp	r3, #255	@ 0xff
 8003cf2:	d906      	bls.n	8003d02 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	22ff      	movs	r2, #255	@ 0xff
 8003cf8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003cfa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003cfe:	617b      	str	r3, [r7, #20]
 8003d00:	e007      	b.n	8003d12 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d06:	b29a      	uxth	r2, r3
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003d0c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003d10:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d024      	beq.n	8003d64 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d1e:	781a      	ldrb	r2, [r3, #0]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d2a:	1c5a      	adds	r2, r3, #1
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	3b01      	subs	r3, #1
 8003d38:	b29a      	uxth	r2, r3
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d42:	3b01      	subs	r3, #1
 8003d44:	b29a      	uxth	r2, r3
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	3301      	adds	r3, #1
 8003d52:	b2da      	uxtb	r2, r3
 8003d54:	8979      	ldrh	r1, [r7, #10]
 8003d56:	4b4e      	ldr	r3, [pc, #312]	@ (8003e90 <HAL_I2C_Master_Transmit+0x228>)
 8003d58:	9300      	str	r3, [sp, #0]
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	68f8      	ldr	r0, [r7, #12]
 8003d5e:	f000 fe73 	bl	8004a48 <I2C_TransferConfig>
 8003d62:	e066      	b.n	8003e32 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d68:	b2da      	uxtb	r2, r3
 8003d6a:	8979      	ldrh	r1, [r7, #10]
 8003d6c:	4b48      	ldr	r3, [pc, #288]	@ (8003e90 <HAL_I2C_Master_Transmit+0x228>)
 8003d6e:	9300      	str	r3, [sp, #0]
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	68f8      	ldr	r0, [r7, #12]
 8003d74:	f000 fe68 	bl	8004a48 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003d78:	e05b      	b.n	8003e32 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d7a:	693a      	ldr	r2, [r7, #16]
 8003d7c:	6a39      	ldr	r1, [r7, #32]
 8003d7e:	68f8      	ldr	r0, [r7, #12]
 8003d80:	f000 fc6b 	bl	800465a <I2C_WaitOnTXISFlagUntilTimeout>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d001      	beq.n	8003d8e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e07b      	b.n	8003e86 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d92:	781a      	ldrb	r2, [r3, #0]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d9e:	1c5a      	adds	r2, r3, #1
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	3b01      	subs	r3, #1
 8003dac:	b29a      	uxth	r2, r3
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003db6:	3b01      	subs	r3, #1
 8003db8:	b29a      	uxth	r2, r3
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d034      	beq.n	8003e32 <HAL_I2C_Master_Transmit+0x1ca>
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d130      	bne.n	8003e32 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	9300      	str	r3, [sp, #0]
 8003dd4:	6a3b      	ldr	r3, [r7, #32]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	2180      	movs	r1, #128	@ 0x80
 8003dda:	68f8      	ldr	r0, [r7, #12]
 8003ddc:	f000 fbe4 	bl	80045a8 <I2C_WaitOnFlagUntilTimeout>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d001      	beq.n	8003dea <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e04d      	b.n	8003e86 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	2bff      	cmp	r3, #255	@ 0xff
 8003df2:	d90e      	bls.n	8003e12 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	22ff      	movs	r2, #255	@ 0xff
 8003df8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dfe:	b2da      	uxtb	r2, r3
 8003e00:	8979      	ldrh	r1, [r7, #10]
 8003e02:	2300      	movs	r3, #0
 8003e04:	9300      	str	r3, [sp, #0]
 8003e06:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003e0a:	68f8      	ldr	r0, [r7, #12]
 8003e0c:	f000 fe1c 	bl	8004a48 <I2C_TransferConfig>
 8003e10:	e00f      	b.n	8003e32 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e16:	b29a      	uxth	r2, r3
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e20:	b2da      	uxtb	r2, r3
 8003e22:	8979      	ldrh	r1, [r7, #10]
 8003e24:	2300      	movs	r3, #0
 8003e26:	9300      	str	r3, [sp, #0]
 8003e28:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003e2c:	68f8      	ldr	r0, [r7, #12]
 8003e2e:	f000 fe0b 	bl	8004a48 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d19e      	bne.n	8003d7a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e3c:	693a      	ldr	r2, [r7, #16]
 8003e3e:	6a39      	ldr	r1, [r7, #32]
 8003e40:	68f8      	ldr	r0, [r7, #12]
 8003e42:	f000 fc51 	bl	80046e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d001      	beq.n	8003e50 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e01a      	b.n	8003e86 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2220      	movs	r2, #32
 8003e56:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	6859      	ldr	r1, [r3, #4]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	4b0c      	ldr	r3, [pc, #48]	@ (8003e94 <HAL_I2C_Master_Transmit+0x22c>)
 8003e64:	400b      	ands	r3, r1
 8003e66:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2220      	movs	r2, #32
 8003e6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003e80:	2300      	movs	r3, #0
 8003e82:	e000      	b.n	8003e86 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8003e84:	2302      	movs	r3, #2
  }
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3718      	adds	r7, #24
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	80002000 	.word	0x80002000
 8003e94:	fe00e800 	.word	0xfe00e800

08003e98 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b088      	sub	sp, #32
 8003e9c:	af02      	add	r7, sp, #8
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	607a      	str	r2, [r7, #4]
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	460b      	mov	r3, r1
 8003ea6:	817b      	strh	r3, [r7, #10]
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	2b20      	cmp	r3, #32
 8003eb6:	f040 80db 	bne.w	8004070 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d101      	bne.n	8003ec8 <HAL_I2C_Master_Receive+0x30>
 8003ec4:	2302      	movs	r3, #2
 8003ec6:	e0d4      	b.n	8004072 <HAL_I2C_Master_Receive+0x1da>
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003ed0:	f7fe ffec 	bl	8002eac <HAL_GetTick>
 8003ed4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	9300      	str	r3, [sp, #0]
 8003eda:	2319      	movs	r3, #25
 8003edc:	2201      	movs	r2, #1
 8003ede:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003ee2:	68f8      	ldr	r0, [r7, #12]
 8003ee4:	f000 fb60 	bl	80045a8 <I2C_WaitOnFlagUntilTimeout>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d001      	beq.n	8003ef2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e0bf      	b.n	8004072 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2222      	movs	r2, #34	@ 0x22
 8003ef6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2210      	movs	r2, #16
 8003efe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2200      	movs	r2, #0
 8003f06:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	893a      	ldrh	r2, [r7, #8]
 8003f12:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2200      	movs	r2, #0
 8003f18:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	2bff      	cmp	r3, #255	@ 0xff
 8003f22:	d90e      	bls.n	8003f42 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2201      	movs	r2, #1
 8003f28:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f2e:	b2da      	uxtb	r2, r3
 8003f30:	8979      	ldrh	r1, [r7, #10]
 8003f32:	4b52      	ldr	r3, [pc, #328]	@ (800407c <HAL_I2C_Master_Receive+0x1e4>)
 8003f34:	9300      	str	r3, [sp, #0]
 8003f36:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003f3a:	68f8      	ldr	r0, [r7, #12]
 8003f3c:	f000 fd84 	bl	8004a48 <I2C_TransferConfig>
 8003f40:	e06d      	b.n	800401e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f46:	b29a      	uxth	r2, r3
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f50:	b2da      	uxtb	r2, r3
 8003f52:	8979      	ldrh	r1, [r7, #10]
 8003f54:	4b49      	ldr	r3, [pc, #292]	@ (800407c <HAL_I2C_Master_Receive+0x1e4>)
 8003f56:	9300      	str	r3, [sp, #0]
 8003f58:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f5c:	68f8      	ldr	r0, [r7, #12]
 8003f5e:	f000 fd73 	bl	8004a48 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003f62:	e05c      	b.n	800401e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f64:	697a      	ldr	r2, [r7, #20]
 8003f66:	6a39      	ldr	r1, [r7, #32]
 8003f68:	68f8      	ldr	r0, [r7, #12]
 8003f6a:	f000 fc01 	bl	8004770 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d001      	beq.n	8003f78 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e07c      	b.n	8004072 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f82:	b2d2      	uxtb	r2, r2
 8003f84:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f8a:	1c5a      	adds	r2, r3, #1
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f94:	3b01      	subs	r3, #1
 8003f96:	b29a      	uxth	r2, r3
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	3b01      	subs	r3, #1
 8003fa4:	b29a      	uxth	r2, r3
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d034      	beq.n	800401e <HAL_I2C_Master_Receive+0x186>
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d130      	bne.n	800401e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	9300      	str	r3, [sp, #0]
 8003fc0:	6a3b      	ldr	r3, [r7, #32]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	2180      	movs	r1, #128	@ 0x80
 8003fc6:	68f8      	ldr	r0, [r7, #12]
 8003fc8:	f000 faee 	bl	80045a8 <I2C_WaitOnFlagUntilTimeout>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d001      	beq.n	8003fd6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e04d      	b.n	8004072 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	2bff      	cmp	r3, #255	@ 0xff
 8003fde:	d90e      	bls.n	8003ffe <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	22ff      	movs	r2, #255	@ 0xff
 8003fe4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fea:	b2da      	uxtb	r2, r3
 8003fec:	8979      	ldrh	r1, [r7, #10]
 8003fee:	2300      	movs	r3, #0
 8003ff0:	9300      	str	r3, [sp, #0]
 8003ff2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003ff6:	68f8      	ldr	r0, [r7, #12]
 8003ff8:	f000 fd26 	bl	8004a48 <I2C_TransferConfig>
 8003ffc:	e00f      	b.n	800401e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004002:	b29a      	uxth	r2, r3
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800400c:	b2da      	uxtb	r2, r3
 800400e:	8979      	ldrh	r1, [r7, #10]
 8004010:	2300      	movs	r3, #0
 8004012:	9300      	str	r3, [sp, #0]
 8004014:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004018:	68f8      	ldr	r0, [r7, #12]
 800401a:	f000 fd15 	bl	8004a48 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004022:	b29b      	uxth	r3, r3
 8004024:	2b00      	cmp	r3, #0
 8004026:	d19d      	bne.n	8003f64 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004028:	697a      	ldr	r2, [r7, #20]
 800402a:	6a39      	ldr	r1, [r7, #32]
 800402c:	68f8      	ldr	r0, [r7, #12]
 800402e:	f000 fb5b 	bl	80046e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d001      	beq.n	800403c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e01a      	b.n	8004072 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2220      	movs	r2, #32
 8004042:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	6859      	ldr	r1, [r3, #4]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	4b0c      	ldr	r3, [pc, #48]	@ (8004080 <HAL_I2C_Master_Receive+0x1e8>)
 8004050:	400b      	ands	r3, r1
 8004052:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2220      	movs	r2, #32
 8004058:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2200      	movs	r2, #0
 8004060:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2200      	movs	r2, #0
 8004068:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800406c:	2300      	movs	r3, #0
 800406e:	e000      	b.n	8004072 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004070:	2302      	movs	r3, #2
  }
}
 8004072:	4618      	mov	r0, r3
 8004074:	3718      	adds	r7, #24
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	80002400 	.word	0x80002400
 8004080:	fe00e800 	.word	0xfe00e800

08004084 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b088      	sub	sp, #32
 8004088:	af02      	add	r7, sp, #8
 800408a:	60f8      	str	r0, [r7, #12]
 800408c:	4608      	mov	r0, r1
 800408e:	4611      	mov	r1, r2
 8004090:	461a      	mov	r2, r3
 8004092:	4603      	mov	r3, r0
 8004094:	817b      	strh	r3, [r7, #10]
 8004096:	460b      	mov	r3, r1
 8004098:	813b      	strh	r3, [r7, #8]
 800409a:	4613      	mov	r3, r2
 800409c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	2b20      	cmp	r3, #32
 80040a8:	f040 80f9 	bne.w	800429e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80040ac:	6a3b      	ldr	r3, [r7, #32]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d002      	beq.n	80040b8 <HAL_I2C_Mem_Write+0x34>
 80040b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d105      	bne.n	80040c4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80040be:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e0ed      	b.n	80042a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d101      	bne.n	80040d2 <HAL_I2C_Mem_Write+0x4e>
 80040ce:	2302      	movs	r3, #2
 80040d0:	e0e6      	b.n	80042a0 <HAL_I2C_Mem_Write+0x21c>
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2201      	movs	r2, #1
 80040d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80040da:	f7fe fee7 	bl	8002eac <HAL_GetTick>
 80040de:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	9300      	str	r3, [sp, #0]
 80040e4:	2319      	movs	r3, #25
 80040e6:	2201      	movs	r2, #1
 80040e8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80040ec:	68f8      	ldr	r0, [r7, #12]
 80040ee:	f000 fa5b 	bl	80045a8 <I2C_WaitOnFlagUntilTimeout>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d001      	beq.n	80040fc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e0d1      	b.n	80042a0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2221      	movs	r2, #33	@ 0x21
 8004100:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2240      	movs	r2, #64	@ 0x40
 8004108:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2200      	movs	r2, #0
 8004110:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6a3a      	ldr	r2, [r7, #32]
 8004116:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800411c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2200      	movs	r2, #0
 8004122:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004124:	88f8      	ldrh	r0, [r7, #6]
 8004126:	893a      	ldrh	r2, [r7, #8]
 8004128:	8979      	ldrh	r1, [r7, #10]
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	9301      	str	r3, [sp, #4]
 800412e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004130:	9300      	str	r3, [sp, #0]
 8004132:	4603      	mov	r3, r0
 8004134:	68f8      	ldr	r0, [r7, #12]
 8004136:	f000 f9bf 	bl	80044b8 <I2C_RequestMemoryWrite>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d005      	beq.n	800414c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2200      	movs	r2, #0
 8004144:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e0a9      	b.n	80042a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004150:	b29b      	uxth	r3, r3
 8004152:	2bff      	cmp	r3, #255	@ 0xff
 8004154:	d90e      	bls.n	8004174 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	22ff      	movs	r2, #255	@ 0xff
 800415a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004160:	b2da      	uxtb	r2, r3
 8004162:	8979      	ldrh	r1, [r7, #10]
 8004164:	2300      	movs	r3, #0
 8004166:	9300      	str	r3, [sp, #0]
 8004168:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800416c:	68f8      	ldr	r0, [r7, #12]
 800416e:	f000 fc6b 	bl	8004a48 <I2C_TransferConfig>
 8004172:	e00f      	b.n	8004194 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004178:	b29a      	uxth	r2, r3
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004182:	b2da      	uxtb	r2, r3
 8004184:	8979      	ldrh	r1, [r7, #10]
 8004186:	2300      	movs	r3, #0
 8004188:	9300      	str	r3, [sp, #0]
 800418a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800418e:	68f8      	ldr	r0, [r7, #12]
 8004190:	f000 fc5a 	bl	8004a48 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004194:	697a      	ldr	r2, [r7, #20]
 8004196:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004198:	68f8      	ldr	r0, [r7, #12]
 800419a:	f000 fa5e 	bl	800465a <I2C_WaitOnTXISFlagUntilTimeout>
 800419e:	4603      	mov	r3, r0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d001      	beq.n	80041a8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e07b      	b.n	80042a0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ac:	781a      	ldrb	r2, [r3, #0]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b8:	1c5a      	adds	r2, r3, #1
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	3b01      	subs	r3, #1
 80041c6:	b29a      	uxth	r2, r3
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041d0:	3b01      	subs	r3, #1
 80041d2:	b29a      	uxth	r2, r3
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041dc:	b29b      	uxth	r3, r3
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d034      	beq.n	800424c <HAL_I2C_Mem_Write+0x1c8>
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d130      	bne.n	800424c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	9300      	str	r3, [sp, #0]
 80041ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041f0:	2200      	movs	r2, #0
 80041f2:	2180      	movs	r1, #128	@ 0x80
 80041f4:	68f8      	ldr	r0, [r7, #12]
 80041f6:	f000 f9d7 	bl	80045a8 <I2C_WaitOnFlagUntilTimeout>
 80041fa:	4603      	mov	r3, r0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d001      	beq.n	8004204 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e04d      	b.n	80042a0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004208:	b29b      	uxth	r3, r3
 800420a:	2bff      	cmp	r3, #255	@ 0xff
 800420c:	d90e      	bls.n	800422c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	22ff      	movs	r2, #255	@ 0xff
 8004212:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004218:	b2da      	uxtb	r2, r3
 800421a:	8979      	ldrh	r1, [r7, #10]
 800421c:	2300      	movs	r3, #0
 800421e:	9300      	str	r3, [sp, #0]
 8004220:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004224:	68f8      	ldr	r0, [r7, #12]
 8004226:	f000 fc0f 	bl	8004a48 <I2C_TransferConfig>
 800422a:	e00f      	b.n	800424c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004230:	b29a      	uxth	r2, r3
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800423a:	b2da      	uxtb	r2, r3
 800423c:	8979      	ldrh	r1, [r7, #10]
 800423e:	2300      	movs	r3, #0
 8004240:	9300      	str	r3, [sp, #0]
 8004242:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004246:	68f8      	ldr	r0, [r7, #12]
 8004248:	f000 fbfe 	bl	8004a48 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004250:	b29b      	uxth	r3, r3
 8004252:	2b00      	cmp	r3, #0
 8004254:	d19e      	bne.n	8004194 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004256:	697a      	ldr	r2, [r7, #20]
 8004258:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800425a:	68f8      	ldr	r0, [r7, #12]
 800425c:	f000 fa44 	bl	80046e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004260:	4603      	mov	r3, r0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d001      	beq.n	800426a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e01a      	b.n	80042a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2220      	movs	r2, #32
 8004270:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	6859      	ldr	r1, [r3, #4]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	4b0a      	ldr	r3, [pc, #40]	@ (80042a8 <HAL_I2C_Mem_Write+0x224>)
 800427e:	400b      	ands	r3, r1
 8004280:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2220      	movs	r2, #32
 8004286:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2200      	movs	r2, #0
 800428e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2200      	movs	r2, #0
 8004296:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800429a:	2300      	movs	r3, #0
 800429c:	e000      	b.n	80042a0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800429e:	2302      	movs	r3, #2
  }
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3718      	adds	r7, #24
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	fe00e800 	.word	0xfe00e800

080042ac <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b08a      	sub	sp, #40	@ 0x28
 80042b0:	af02      	add	r7, sp, #8
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	607a      	str	r2, [r7, #4]
 80042b6:	603b      	str	r3, [r7, #0]
 80042b8:	460b      	mov	r3, r1
 80042ba:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80042bc:	2300      	movs	r3, #0
 80042be:	617b      	str	r3, [r7, #20]

  HAL_StatusTypeDef status = HAL_OK;
 80042c0:	2300      	movs	r3, #0
 80042c2:	77fb      	strb	r3, [r7, #31]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	2b20      	cmp	r3, #32
 80042ce:	f040 80e9 	bne.w	80044a4 <HAL_I2C_IsDeviceReady+0x1f8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	699b      	ldr	r3, [r3, #24]
 80042d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80042dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042e0:	d101      	bne.n	80042e6 <HAL_I2C_IsDeviceReady+0x3a>
    {
      return HAL_BUSY;
 80042e2:	2302      	movs	r3, #2
 80042e4:	e0df      	b.n	80044a6 <HAL_I2C_IsDeviceReady+0x1fa>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d101      	bne.n	80042f4 <HAL_I2C_IsDeviceReady+0x48>
 80042f0:	2302      	movs	r3, #2
 80042f2:	e0d8      	b.n	80044a6 <HAL_I2C_IsDeviceReady+0x1fa>
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2224      	movs	r2, #36	@ 0x24
 8004300:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2200      	movs	r2, #0
 8004308:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	2b01      	cmp	r3, #1
 8004310:	d105      	bne.n	800431e <HAL_I2C_IsDeviceReady+0x72>
 8004312:	897b      	ldrh	r3, [r7, #10]
 8004314:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004318:	4b65      	ldr	r3, [pc, #404]	@ (80044b0 <HAL_I2C_IsDeviceReady+0x204>)
 800431a:	4313      	orrs	r3, r2
 800431c:	e004      	b.n	8004328 <HAL_I2C_IsDeviceReady+0x7c>
 800431e:	897b      	ldrh	r3, [r7, #10]
 8004320:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004324:	4b63      	ldr	r3, [pc, #396]	@ (80044b4 <HAL_I2C_IsDeviceReady+0x208>)
 8004326:	4313      	orrs	r3, r2
 8004328:	68fa      	ldr	r2, [r7, #12]
 800432a:	6812      	ldr	r2, [r2, #0]
 800432c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800432e:	f7fe fdbd 	bl	8002eac <HAL_GetTick>
 8004332:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	699b      	ldr	r3, [r3, #24]
 800433a:	f003 0320 	and.w	r3, r3, #32
 800433e:	2b20      	cmp	r3, #32
 8004340:	bf0c      	ite	eq
 8004342:	2301      	moveq	r3, #1
 8004344:	2300      	movne	r3, #0
 8004346:	b2db      	uxtb	r3, r3
 8004348:	77bb      	strb	r3, [r7, #30]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	699b      	ldr	r3, [r3, #24]
 8004350:	f003 0310 	and.w	r3, r3, #16
 8004354:	2b10      	cmp	r3, #16
 8004356:	bf0c      	ite	eq
 8004358:	2301      	moveq	r3, #1
 800435a:	2300      	movne	r3, #0
 800435c:	b2db      	uxtb	r3, r3
 800435e:	777b      	strb	r3, [r7, #29]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004360:	e034      	b.n	80043cc <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004368:	d01a      	beq.n	80043a0 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800436a:	f7fe fd9f 	bl	8002eac <HAL_GetTick>
 800436e:	4602      	mov	r2, r0
 8004370:	69bb      	ldr	r3, [r7, #24]
 8004372:	1ad3      	subs	r3, r2, r3
 8004374:	683a      	ldr	r2, [r7, #0]
 8004376:	429a      	cmp	r2, r3
 8004378:	d302      	bcc.n	8004380 <HAL_I2C_IsDeviceReady+0xd4>
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d10f      	bne.n	80043a0 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2220      	movs	r2, #32
 8004384:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800438c:	f043 0220 	orr.w	r2, r3, #32
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2200      	movs	r2, #0
 8004398:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	e082      	b.n	80044a6 <HAL_I2C_IsDeviceReady+0x1fa>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	f003 0320 	and.w	r3, r3, #32
 80043aa:	2b20      	cmp	r3, #32
 80043ac:	bf0c      	ite	eq
 80043ae:	2301      	moveq	r3, #1
 80043b0:	2300      	movne	r3, #0
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	77bb      	strb	r3, [r7, #30]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	699b      	ldr	r3, [r3, #24]
 80043bc:	f003 0310 	and.w	r3, r3, #16
 80043c0:	2b10      	cmp	r3, #16
 80043c2:	bf0c      	ite	eq
 80043c4:	2301      	moveq	r3, #1
 80043c6:	2300      	movne	r3, #0
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	777b      	strb	r3, [r7, #29]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80043cc:	7fbb      	ldrb	r3, [r7, #30]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d102      	bne.n	80043d8 <HAL_I2C_IsDeviceReady+0x12c>
 80043d2:	7f7b      	ldrb	r3, [r7, #29]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d0c4      	beq.n	8004362 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	699b      	ldr	r3, [r3, #24]
 80043de:	f003 0310 	and.w	r3, r3, #16
 80043e2:	2b10      	cmp	r3, #16
 80043e4:	d027      	beq.n	8004436 <HAL_I2C_IsDeviceReady+0x18a>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80043e6:	69bb      	ldr	r3, [r7, #24]
 80043e8:	9300      	str	r3, [sp, #0]
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	2200      	movs	r2, #0
 80043ee:	2120      	movs	r1, #32
 80043f0:	68f8      	ldr	r0, [r7, #12]
 80043f2:	f000 f8d9 	bl	80045a8 <I2C_WaitOnFlagUntilTimeout>
 80043f6:	4603      	mov	r3, r0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d00e      	beq.n	800441a <HAL_I2C_IsDeviceReady+0x16e>
        {
          /* A non acknowledge appear during STOP Flag waiting process, a new trial must be performed */
          if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004400:	2b04      	cmp	r3, #4
 8004402:	d107      	bne.n	8004414 <HAL_I2C_IsDeviceReady+0x168>
          {
            /* Clear STOP Flag */
            __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2220      	movs	r2, #32
 800440a:	61da      	str	r2, [r3, #28]

            /* Reset the error code for next trial */
            hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2200      	movs	r2, #0
 8004410:	645a      	str	r2, [r3, #68]	@ 0x44
 8004412:	e026      	b.n	8004462 <HAL_I2C_IsDeviceReady+0x1b6>
          }
          else
          {
            status = HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	77fb      	strb	r3, [r7, #31]
 8004418:	e023      	b.n	8004462 <HAL_I2C_IsDeviceReady+0x1b6>
        else
        {
          /* A acknowledge appear during STOP Flag waiting process, this mean that device respond to its address */

          /* Clear STOP Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2220      	movs	r2, #32
 8004420:	61da      	str	r2, [r3, #28]

          /* Device is ready */
          hi2c->State = HAL_I2C_STATE_READY;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2220      	movs	r2, #32
 8004426:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2200      	movs	r2, #0
 800442e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_OK;
 8004432:	2300      	movs	r3, #0
 8004434:	e037      	b.n	80044a6 <HAL_I2C_IsDeviceReady+0x1fa>
      {
        /* A non acknowledge is detected, this mean that device not respond to its address,
           a new trial must be performed */

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	2210      	movs	r2, #16
 800443c:	61da      	str	r2, [r3, #28]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	9300      	str	r3, [sp, #0]
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	2200      	movs	r2, #0
 8004446:	2120      	movs	r1, #32
 8004448:	68f8      	ldr	r0, [r7, #12]
 800444a:	f000 f8ad 	bl	80045a8 <I2C_WaitOnFlagUntilTimeout>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d002      	beq.n	800445a <HAL_I2C_IsDeviceReady+0x1ae>
        {
          status = HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	77fb      	strb	r3, [r7, #31]
 8004458:	e003      	b.n	8004462 <HAL_I2C_IsDeviceReady+0x1b6>
        }
        else
        {
          /* Clear STOP Flag, auto generated with autoend*/
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	2220      	movs	r2, #32
 8004460:	61da      	str	r2, [r3, #28]
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	3301      	adds	r3, #1
 8004466:	617b      	str	r3, [r7, #20]

      if ((I2C_Trials < Trials) && (status == HAL_ERROR))
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	429a      	cmp	r2, r3
 800446e:	d904      	bls.n	800447a <HAL_I2C_IsDeviceReady+0x1ce>
 8004470:	7ffb      	ldrb	r3, [r7, #31]
 8004472:	2b01      	cmp	r3, #1
 8004474:	d101      	bne.n	800447a <HAL_I2C_IsDeviceReady+0x1ce>
      {
        status = HAL_OK;
 8004476:	2300      	movs	r3, #0
 8004478:	77fb      	strb	r3, [r7, #31]
      }

    } while (I2C_Trials < Trials);
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	429a      	cmp	r2, r3
 8004480:	f63f af43 	bhi.w	800430a <HAL_I2C_IsDeviceReady+0x5e>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2220      	movs	r2, #32
 8004488:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004490:	f043 0220 	orr.w	r2, r3, #32
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2200      	movs	r2, #0
 800449c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e000      	b.n	80044a6 <HAL_I2C_IsDeviceReady+0x1fa>
  }
  else
  {
    return HAL_BUSY;
 80044a4:	2302      	movs	r3, #2
  }
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3720      	adds	r7, #32
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	02002000 	.word	0x02002000
 80044b4:	02002800 	.word	0x02002800

080044b8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b086      	sub	sp, #24
 80044bc:	af02      	add	r7, sp, #8
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	4608      	mov	r0, r1
 80044c2:	4611      	mov	r1, r2
 80044c4:	461a      	mov	r2, r3
 80044c6:	4603      	mov	r3, r0
 80044c8:	817b      	strh	r3, [r7, #10]
 80044ca:	460b      	mov	r3, r1
 80044cc:	813b      	strh	r3, [r7, #8]
 80044ce:	4613      	mov	r3, r2
 80044d0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80044d2:	88fb      	ldrh	r3, [r7, #6]
 80044d4:	b2da      	uxtb	r2, r3
 80044d6:	8979      	ldrh	r1, [r7, #10]
 80044d8:	4b20      	ldr	r3, [pc, #128]	@ (800455c <I2C_RequestMemoryWrite+0xa4>)
 80044da:	9300      	str	r3, [sp, #0]
 80044dc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80044e0:	68f8      	ldr	r0, [r7, #12]
 80044e2:	f000 fab1 	bl	8004a48 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044e6:	69fa      	ldr	r2, [r7, #28]
 80044e8:	69b9      	ldr	r1, [r7, #24]
 80044ea:	68f8      	ldr	r0, [r7, #12]
 80044ec:	f000 f8b5 	bl	800465a <I2C_WaitOnTXISFlagUntilTimeout>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d001      	beq.n	80044fa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e02c      	b.n	8004554 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80044fa:	88fb      	ldrh	r3, [r7, #6]
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d105      	bne.n	800450c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004500:	893b      	ldrh	r3, [r7, #8]
 8004502:	b2da      	uxtb	r2, r3
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	629a      	str	r2, [r3, #40]	@ 0x28
 800450a:	e015      	b.n	8004538 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800450c:	893b      	ldrh	r3, [r7, #8]
 800450e:	0a1b      	lsrs	r3, r3, #8
 8004510:	b29b      	uxth	r3, r3
 8004512:	b2da      	uxtb	r2, r3
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800451a:	69fa      	ldr	r2, [r7, #28]
 800451c:	69b9      	ldr	r1, [r7, #24]
 800451e:	68f8      	ldr	r0, [r7, #12]
 8004520:	f000 f89b 	bl	800465a <I2C_WaitOnTXISFlagUntilTimeout>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d001      	beq.n	800452e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e012      	b.n	8004554 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800452e:	893b      	ldrh	r3, [r7, #8]
 8004530:	b2da      	uxtb	r2, r3
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	9300      	str	r3, [sp, #0]
 800453c:	69bb      	ldr	r3, [r7, #24]
 800453e:	2200      	movs	r2, #0
 8004540:	2180      	movs	r1, #128	@ 0x80
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	f000 f830 	bl	80045a8 <I2C_WaitOnFlagUntilTimeout>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d001      	beq.n	8004552 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e000      	b.n	8004554 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004552:	2300      	movs	r3, #0
}
 8004554:	4618      	mov	r0, r3
 8004556:	3710      	adds	r7, #16
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}
 800455c:	80002000 	.word	0x80002000

08004560 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	699b      	ldr	r3, [r3, #24]
 800456e:	f003 0302 	and.w	r3, r3, #2
 8004572:	2b02      	cmp	r3, #2
 8004574:	d103      	bne.n	800457e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	2200      	movs	r2, #0
 800457c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	699b      	ldr	r3, [r3, #24]
 8004584:	f003 0301 	and.w	r3, r3, #1
 8004588:	2b01      	cmp	r3, #1
 800458a:	d007      	beq.n	800459c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	699a      	ldr	r2, [r3, #24]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f042 0201 	orr.w	r2, r2, #1
 800459a:	619a      	str	r2, [r3, #24]
  }
}
 800459c:	bf00      	nop
 800459e:	370c      	adds	r7, #12
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr

080045a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	603b      	str	r3, [r7, #0]
 80045b4:	4613      	mov	r3, r2
 80045b6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045b8:	e03b      	b.n	8004632 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80045ba:	69ba      	ldr	r2, [r7, #24]
 80045bc:	6839      	ldr	r1, [r7, #0]
 80045be:	68f8      	ldr	r0, [r7, #12]
 80045c0:	f000 f962 	bl	8004888 <I2C_IsErrorOccurred>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d001      	beq.n	80045ce <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e041      	b.n	8004652 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045d4:	d02d      	beq.n	8004632 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045d6:	f7fe fc69 	bl	8002eac <HAL_GetTick>
 80045da:	4602      	mov	r2, r0
 80045dc:	69bb      	ldr	r3, [r7, #24]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	683a      	ldr	r2, [r7, #0]
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d302      	bcc.n	80045ec <I2C_WaitOnFlagUntilTimeout+0x44>
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d122      	bne.n	8004632 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	699a      	ldr	r2, [r3, #24]
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	4013      	ands	r3, r2
 80045f6:	68ba      	ldr	r2, [r7, #8]
 80045f8:	429a      	cmp	r2, r3
 80045fa:	bf0c      	ite	eq
 80045fc:	2301      	moveq	r3, #1
 80045fe:	2300      	movne	r3, #0
 8004600:	b2db      	uxtb	r3, r3
 8004602:	461a      	mov	r2, r3
 8004604:	79fb      	ldrb	r3, [r7, #7]
 8004606:	429a      	cmp	r2, r3
 8004608:	d113      	bne.n	8004632 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800460e:	f043 0220 	orr.w	r2, r3, #32
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2220      	movs	r2, #32
 800461a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2200      	movs	r2, #0
 8004622:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e00f      	b.n	8004652 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	699a      	ldr	r2, [r3, #24]
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	4013      	ands	r3, r2
 800463c:	68ba      	ldr	r2, [r7, #8]
 800463e:	429a      	cmp	r2, r3
 8004640:	bf0c      	ite	eq
 8004642:	2301      	moveq	r3, #1
 8004644:	2300      	movne	r3, #0
 8004646:	b2db      	uxtb	r3, r3
 8004648:	461a      	mov	r2, r3
 800464a:	79fb      	ldrb	r3, [r7, #7]
 800464c:	429a      	cmp	r2, r3
 800464e:	d0b4      	beq.n	80045ba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004650:	2300      	movs	r3, #0
}
 8004652:	4618      	mov	r0, r3
 8004654:	3710      	adds	r7, #16
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}

0800465a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800465a:	b580      	push	{r7, lr}
 800465c:	b084      	sub	sp, #16
 800465e:	af00      	add	r7, sp, #0
 8004660:	60f8      	str	r0, [r7, #12]
 8004662:	60b9      	str	r1, [r7, #8]
 8004664:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004666:	e033      	b.n	80046d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	68b9      	ldr	r1, [r7, #8]
 800466c:	68f8      	ldr	r0, [r7, #12]
 800466e:	f000 f90b 	bl	8004888 <I2C_IsErrorOccurred>
 8004672:	4603      	mov	r3, r0
 8004674:	2b00      	cmp	r3, #0
 8004676:	d001      	beq.n	800467c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	e031      	b.n	80046e0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004682:	d025      	beq.n	80046d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004684:	f7fe fc12 	bl	8002eac <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	68ba      	ldr	r2, [r7, #8]
 8004690:	429a      	cmp	r2, r3
 8004692:	d302      	bcc.n	800469a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d11a      	bne.n	80046d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	699b      	ldr	r3, [r3, #24]
 80046a0:	f003 0302 	and.w	r3, r3, #2
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d013      	beq.n	80046d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046ac:	f043 0220 	orr.w	r2, r3, #32
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2220      	movs	r2, #32
 80046b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2200      	movs	r2, #0
 80046c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2200      	movs	r2, #0
 80046c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e007      	b.n	80046e0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	699b      	ldr	r3, [r3, #24]
 80046d6:	f003 0302 	and.w	r3, r3, #2
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d1c4      	bne.n	8004668 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80046de:	2300      	movs	r3, #0
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3710      	adds	r7, #16
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b084      	sub	sp, #16
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046f4:	e02f      	b.n	8004756 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	68b9      	ldr	r1, [r7, #8]
 80046fa:	68f8      	ldr	r0, [r7, #12]
 80046fc:	f000 f8c4 	bl	8004888 <I2C_IsErrorOccurred>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d001      	beq.n	800470a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e02d      	b.n	8004766 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800470a:	f7fe fbcf 	bl	8002eac <HAL_GetTick>
 800470e:	4602      	mov	r2, r0
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	68ba      	ldr	r2, [r7, #8]
 8004716:	429a      	cmp	r2, r3
 8004718:	d302      	bcc.n	8004720 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d11a      	bne.n	8004756 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	699b      	ldr	r3, [r3, #24]
 8004726:	f003 0320 	and.w	r3, r3, #32
 800472a:	2b20      	cmp	r3, #32
 800472c:	d013      	beq.n	8004756 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004732:	f043 0220 	orr.w	r2, r3, #32
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2220      	movs	r2, #32
 800473e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2200      	movs	r2, #0
 8004746:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e007      	b.n	8004766 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	699b      	ldr	r3, [r3, #24]
 800475c:	f003 0320 	and.w	r3, r3, #32
 8004760:	2b20      	cmp	r3, #32
 8004762:	d1c8      	bne.n	80046f6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	3710      	adds	r7, #16
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
	...

08004770 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b086      	sub	sp, #24
 8004774:	af00      	add	r7, sp, #0
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800477c:	2300      	movs	r3, #0
 800477e:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8004780:	e071      	b.n	8004866 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	68b9      	ldr	r1, [r7, #8]
 8004786:	68f8      	ldr	r0, [r7, #12]
 8004788:	f000 f87e 	bl	8004888 <I2C_IsErrorOccurred>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d001      	beq.n	8004796 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	699b      	ldr	r3, [r3, #24]
 800479c:	f003 0320 	and.w	r3, r3, #32
 80047a0:	2b20      	cmp	r3, #32
 80047a2:	d13b      	bne.n	800481c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80047a4:	7dfb      	ldrb	r3, [r7, #23]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d138      	bne.n	800481c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	699b      	ldr	r3, [r3, #24]
 80047b0:	f003 0304 	and.w	r3, r3, #4
 80047b4:	2b04      	cmp	r3, #4
 80047b6:	d105      	bne.n	80047c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d001      	beq.n	80047c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80047c0:	2300      	movs	r3, #0
 80047c2:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	699b      	ldr	r3, [r3, #24]
 80047ca:	f003 0310 	and.w	r3, r3, #16
 80047ce:	2b10      	cmp	r3, #16
 80047d0:	d121      	bne.n	8004816 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	2210      	movs	r2, #16
 80047d8:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2204      	movs	r2, #4
 80047de:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2220      	movs	r2, #32
 80047e6:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	6859      	ldr	r1, [r3, #4]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	4b24      	ldr	r3, [pc, #144]	@ (8004884 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80047f4:	400b      	ands	r3, r1
 80047f6:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2220      	movs	r2, #32
 80047fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2200      	movs	r2, #0
 8004804:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2200      	movs	r2, #0
 800480c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	75fb      	strb	r3, [r7, #23]
 8004814:	e002      	b.n	800481c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2200      	movs	r2, #0
 800481a:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800481c:	f7fe fb46 	bl	8002eac <HAL_GetTick>
 8004820:	4602      	mov	r2, r0
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	68ba      	ldr	r2, [r7, #8]
 8004828:	429a      	cmp	r2, r3
 800482a:	d302      	bcc.n	8004832 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d119      	bne.n	8004866 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8004832:	7dfb      	ldrb	r3, [r7, #23]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d116      	bne.n	8004866 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	699b      	ldr	r3, [r3, #24]
 800483e:	f003 0304 	and.w	r3, r3, #4
 8004842:	2b04      	cmp	r3, #4
 8004844:	d00f      	beq.n	8004866 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800484a:	f043 0220 	orr.w	r2, r3, #32
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2220      	movs	r2, #32
 8004856:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2200      	movs	r2, #0
 800485e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	699b      	ldr	r3, [r3, #24]
 800486c:	f003 0304 	and.w	r3, r3, #4
 8004870:	2b04      	cmp	r3, #4
 8004872:	d002      	beq.n	800487a <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8004874:	7dfb      	ldrb	r3, [r7, #23]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d083      	beq.n	8004782 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800487a:	7dfb      	ldrb	r3, [r7, #23]
}
 800487c:	4618      	mov	r0, r3
 800487e:	3718      	adds	r7, #24
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}
 8004884:	fe00e800 	.word	0xfe00e800

08004888 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b08a      	sub	sp, #40	@ 0x28
 800488c:	af00      	add	r7, sp, #0
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	60b9      	str	r1, [r7, #8]
 8004892:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004894:	2300      	movs	r3, #0
 8004896:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	699b      	ldr	r3, [r3, #24]
 80048a0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80048a2:	2300      	movs	r3, #0
 80048a4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80048aa:	69bb      	ldr	r3, [r7, #24]
 80048ac:	f003 0310 	and.w	r3, r3, #16
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d068      	beq.n	8004986 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2210      	movs	r2, #16
 80048ba:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80048bc:	e049      	b.n	8004952 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048c4:	d045      	beq.n	8004952 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80048c6:	f7fe faf1 	bl	8002eac <HAL_GetTick>
 80048ca:	4602      	mov	r2, r0
 80048cc:	69fb      	ldr	r3, [r7, #28]
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	68ba      	ldr	r2, [r7, #8]
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d302      	bcc.n	80048dc <I2C_IsErrorOccurred+0x54>
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d13a      	bne.n	8004952 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80048e6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80048ee:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	699b      	ldr	r3, [r3, #24]
 80048f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80048fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048fe:	d121      	bne.n	8004944 <I2C_IsErrorOccurred+0xbc>
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004906:	d01d      	beq.n	8004944 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004908:	7cfb      	ldrb	r3, [r7, #19]
 800490a:	2b20      	cmp	r3, #32
 800490c:	d01a      	beq.n	8004944 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	685a      	ldr	r2, [r3, #4]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800491c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800491e:	f7fe fac5 	bl	8002eac <HAL_GetTick>
 8004922:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004924:	e00e      	b.n	8004944 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004926:	f7fe fac1 	bl	8002eac <HAL_GetTick>
 800492a:	4602      	mov	r2, r0
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	2b19      	cmp	r3, #25
 8004932:	d907      	bls.n	8004944 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004934:	6a3b      	ldr	r3, [r7, #32]
 8004936:	f043 0320 	orr.w	r3, r3, #32
 800493a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004942:	e006      	b.n	8004952 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	699b      	ldr	r3, [r3, #24]
 800494a:	f003 0320 	and.w	r3, r3, #32
 800494e:	2b20      	cmp	r3, #32
 8004950:	d1e9      	bne.n	8004926 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	699b      	ldr	r3, [r3, #24]
 8004958:	f003 0320 	and.w	r3, r3, #32
 800495c:	2b20      	cmp	r3, #32
 800495e:	d003      	beq.n	8004968 <I2C_IsErrorOccurred+0xe0>
 8004960:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004964:	2b00      	cmp	r3, #0
 8004966:	d0aa      	beq.n	80048be <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004968:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800496c:	2b00      	cmp	r3, #0
 800496e:	d103      	bne.n	8004978 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2220      	movs	r2, #32
 8004976:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004978:	6a3b      	ldr	r3, [r7, #32]
 800497a:	f043 0304 	orr.w	r3, r3, #4
 800497e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	699b      	ldr	r3, [r3, #24]
 800498c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800498e:	69bb      	ldr	r3, [r7, #24]
 8004990:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004994:	2b00      	cmp	r3, #0
 8004996:	d00b      	beq.n	80049b0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004998:	6a3b      	ldr	r3, [r7, #32]
 800499a:	f043 0301 	orr.w	r3, r3, #1
 800499e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80049a8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80049b0:	69bb      	ldr	r3, [r7, #24]
 80049b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d00b      	beq.n	80049d2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80049ba:	6a3b      	ldr	r3, [r7, #32]
 80049bc:	f043 0308 	orr.w	r3, r3, #8
 80049c0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80049ca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80049d2:	69bb      	ldr	r3, [r7, #24]
 80049d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d00b      	beq.n	80049f4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80049dc:	6a3b      	ldr	r3, [r7, #32]
 80049de:	f043 0302 	orr.w	r3, r3, #2
 80049e2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80049ec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80049f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d01c      	beq.n	8004a36 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80049fc:	68f8      	ldr	r0, [r7, #12]
 80049fe:	f7ff fdaf 	bl	8004560 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	6859      	ldr	r1, [r3, #4]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	4b0d      	ldr	r3, [pc, #52]	@ (8004a44 <I2C_IsErrorOccurred+0x1bc>)
 8004a0e:	400b      	ands	r3, r1
 8004a10:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a16:	6a3b      	ldr	r3, [r7, #32]
 8004a18:	431a      	orrs	r2, r3
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2220      	movs	r2, #32
 8004a22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2200      	movs	r2, #0
 8004a32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004a36:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3728      	adds	r7, #40	@ 0x28
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	fe00e800 	.word	0xfe00e800

08004a48 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b087      	sub	sp, #28
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	607b      	str	r3, [r7, #4]
 8004a52:	460b      	mov	r3, r1
 8004a54:	817b      	strh	r3, [r7, #10]
 8004a56:	4613      	mov	r3, r2
 8004a58:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a5a:	897b      	ldrh	r3, [r7, #10]
 8004a5c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004a60:	7a7b      	ldrb	r3, [r7, #9]
 8004a62:	041b      	lsls	r3, r3, #16
 8004a64:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a68:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a6e:	6a3b      	ldr	r3, [r7, #32]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004a76:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	685a      	ldr	r2, [r3, #4]
 8004a7e:	6a3b      	ldr	r3, [r7, #32]
 8004a80:	0d5b      	lsrs	r3, r3, #21
 8004a82:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004a86:	4b08      	ldr	r3, [pc, #32]	@ (8004aa8 <I2C_TransferConfig+0x60>)
 8004a88:	430b      	orrs	r3, r1
 8004a8a:	43db      	mvns	r3, r3
 8004a8c:	ea02 0103 	and.w	r1, r2, r3
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	697a      	ldr	r2, [r7, #20]
 8004a96:	430a      	orrs	r2, r1
 8004a98:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004a9a:	bf00      	nop
 8004a9c:	371c      	adds	r7, #28
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr
 8004aa6:	bf00      	nop
 8004aa8:	03ff63ff 	.word	0x03ff63ff

08004aac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	2b20      	cmp	r3, #32
 8004ac0:	d138      	bne.n	8004b34 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d101      	bne.n	8004ad0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004acc:	2302      	movs	r3, #2
 8004ace:	e032      	b.n	8004b36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2224      	movs	r2, #36	@ 0x24
 8004adc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f022 0201 	bic.w	r2, r2, #1
 8004aee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004afe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	6819      	ldr	r1, [r3, #0]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	683a      	ldr	r2, [r7, #0]
 8004b0c:	430a      	orrs	r2, r1
 8004b0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f042 0201 	orr.w	r2, r2, #1
 8004b1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2220      	movs	r2, #32
 8004b24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004b30:	2300      	movs	r3, #0
 8004b32:	e000      	b.n	8004b36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004b34:	2302      	movs	r3, #2
  }
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	370c      	adds	r7, #12
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr

08004b42 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004b42:	b480      	push	{r7}
 8004b44:	b085      	sub	sp, #20
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	6078      	str	r0, [r7, #4]
 8004b4a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	2b20      	cmp	r3, #32
 8004b56:	d139      	bne.n	8004bcc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d101      	bne.n	8004b66 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004b62:	2302      	movs	r3, #2
 8004b64:	e033      	b.n	8004bce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2201      	movs	r2, #1
 8004b6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2224      	movs	r2, #36	@ 0x24
 8004b72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f022 0201 	bic.w	r2, r2, #1
 8004b84:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004b94:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	021b      	lsls	r3, r3, #8
 8004b9a:	68fa      	ldr	r2, [r7, #12]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	68fa      	ldr	r2, [r7, #12]
 8004ba6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f042 0201 	orr.w	r2, r2, #1
 8004bb6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2220      	movs	r2, #32
 8004bbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	e000      	b.n	8004bce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004bcc:	2302      	movs	r3, #2
  }
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3714      	adds	r7, #20
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr

08004bda <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004bda:	b580      	push	{r7, lr}
 8004bdc:	b086      	sub	sp, #24
 8004bde:	af02      	add	r7, sp, #8
 8004be0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d101      	bne.n	8004bec <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e108      	b.n	8004dfe <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d106      	bne.n	8004c0c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f7fe f85c 	bl	8002cc4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2203      	movs	r2, #3
 8004c10:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c1a:	d102      	bne.n	8004c22 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4618      	mov	r0, r3
 8004c28:	f002 fe22 	bl	8007870 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6818      	ldr	r0, [r3, #0]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	7c1a      	ldrb	r2, [r3, #16]
 8004c34:	f88d 2000 	strb.w	r2, [sp]
 8004c38:	3304      	adds	r3, #4
 8004c3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004c3c:	f002 fdbe 	bl	80077bc <USB_CoreInit>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d005      	beq.n	8004c52 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2202      	movs	r2, #2
 8004c4a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e0d5      	b.n	8004dfe <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	2100      	movs	r1, #0
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f002 fe1a 	bl	8007892 <USB_SetCurrentMode>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d005      	beq.n	8004c70 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2202      	movs	r2, #2
 8004c68:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e0c6      	b.n	8004dfe <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c70:	2300      	movs	r3, #0
 8004c72:	73fb      	strb	r3, [r7, #15]
 8004c74:	e04a      	b.n	8004d0c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004c76:	7bfa      	ldrb	r2, [r7, #15]
 8004c78:	6879      	ldr	r1, [r7, #4]
 8004c7a:	4613      	mov	r3, r2
 8004c7c:	00db      	lsls	r3, r3, #3
 8004c7e:	4413      	add	r3, r2
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	440b      	add	r3, r1
 8004c84:	3315      	adds	r3, #21
 8004c86:	2201      	movs	r2, #1
 8004c88:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004c8a:	7bfa      	ldrb	r2, [r7, #15]
 8004c8c:	6879      	ldr	r1, [r7, #4]
 8004c8e:	4613      	mov	r3, r2
 8004c90:	00db      	lsls	r3, r3, #3
 8004c92:	4413      	add	r3, r2
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	440b      	add	r3, r1
 8004c98:	3314      	adds	r3, #20
 8004c9a:	7bfa      	ldrb	r2, [r7, #15]
 8004c9c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004c9e:	7bfa      	ldrb	r2, [r7, #15]
 8004ca0:	7bfb      	ldrb	r3, [r7, #15]
 8004ca2:	b298      	uxth	r0, r3
 8004ca4:	6879      	ldr	r1, [r7, #4]
 8004ca6:	4613      	mov	r3, r2
 8004ca8:	00db      	lsls	r3, r3, #3
 8004caa:	4413      	add	r3, r2
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	440b      	add	r3, r1
 8004cb0:	332e      	adds	r3, #46	@ 0x2e
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004cb6:	7bfa      	ldrb	r2, [r7, #15]
 8004cb8:	6879      	ldr	r1, [r7, #4]
 8004cba:	4613      	mov	r3, r2
 8004cbc:	00db      	lsls	r3, r3, #3
 8004cbe:	4413      	add	r3, r2
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	440b      	add	r3, r1
 8004cc4:	3318      	adds	r3, #24
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004cca:	7bfa      	ldrb	r2, [r7, #15]
 8004ccc:	6879      	ldr	r1, [r7, #4]
 8004cce:	4613      	mov	r3, r2
 8004cd0:	00db      	lsls	r3, r3, #3
 8004cd2:	4413      	add	r3, r2
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	440b      	add	r3, r1
 8004cd8:	331c      	adds	r3, #28
 8004cda:	2200      	movs	r2, #0
 8004cdc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004cde:	7bfa      	ldrb	r2, [r7, #15]
 8004ce0:	6879      	ldr	r1, [r7, #4]
 8004ce2:	4613      	mov	r3, r2
 8004ce4:	00db      	lsls	r3, r3, #3
 8004ce6:	4413      	add	r3, r2
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	440b      	add	r3, r1
 8004cec:	3320      	adds	r3, #32
 8004cee:	2200      	movs	r2, #0
 8004cf0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004cf2:	7bfa      	ldrb	r2, [r7, #15]
 8004cf4:	6879      	ldr	r1, [r7, #4]
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	00db      	lsls	r3, r3, #3
 8004cfa:	4413      	add	r3, r2
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	440b      	add	r3, r1
 8004d00:	3324      	adds	r3, #36	@ 0x24
 8004d02:	2200      	movs	r2, #0
 8004d04:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d06:	7bfb      	ldrb	r3, [r7, #15]
 8004d08:	3301      	adds	r3, #1
 8004d0a:	73fb      	strb	r3, [r7, #15]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	791b      	ldrb	r3, [r3, #4]
 8004d10:	7bfa      	ldrb	r2, [r7, #15]
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d3af      	bcc.n	8004c76 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d16:	2300      	movs	r3, #0
 8004d18:	73fb      	strb	r3, [r7, #15]
 8004d1a:	e044      	b.n	8004da6 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004d1c:	7bfa      	ldrb	r2, [r7, #15]
 8004d1e:	6879      	ldr	r1, [r7, #4]
 8004d20:	4613      	mov	r3, r2
 8004d22:	00db      	lsls	r3, r3, #3
 8004d24:	4413      	add	r3, r2
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	440b      	add	r3, r1
 8004d2a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004d2e:	2200      	movs	r2, #0
 8004d30:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004d32:	7bfa      	ldrb	r2, [r7, #15]
 8004d34:	6879      	ldr	r1, [r7, #4]
 8004d36:	4613      	mov	r3, r2
 8004d38:	00db      	lsls	r3, r3, #3
 8004d3a:	4413      	add	r3, r2
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	440b      	add	r3, r1
 8004d40:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004d44:	7bfa      	ldrb	r2, [r7, #15]
 8004d46:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004d48:	7bfa      	ldrb	r2, [r7, #15]
 8004d4a:	6879      	ldr	r1, [r7, #4]
 8004d4c:	4613      	mov	r3, r2
 8004d4e:	00db      	lsls	r3, r3, #3
 8004d50:	4413      	add	r3, r2
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	440b      	add	r3, r1
 8004d56:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004d5e:	7bfa      	ldrb	r2, [r7, #15]
 8004d60:	6879      	ldr	r1, [r7, #4]
 8004d62:	4613      	mov	r3, r2
 8004d64:	00db      	lsls	r3, r3, #3
 8004d66:	4413      	add	r3, r2
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	440b      	add	r3, r1
 8004d6c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004d70:	2200      	movs	r2, #0
 8004d72:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004d74:	7bfa      	ldrb	r2, [r7, #15]
 8004d76:	6879      	ldr	r1, [r7, #4]
 8004d78:	4613      	mov	r3, r2
 8004d7a:	00db      	lsls	r3, r3, #3
 8004d7c:	4413      	add	r3, r2
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	440b      	add	r3, r1
 8004d82:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004d86:	2200      	movs	r2, #0
 8004d88:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004d8a:	7bfa      	ldrb	r2, [r7, #15]
 8004d8c:	6879      	ldr	r1, [r7, #4]
 8004d8e:	4613      	mov	r3, r2
 8004d90:	00db      	lsls	r3, r3, #3
 8004d92:	4413      	add	r3, r2
 8004d94:	009b      	lsls	r3, r3, #2
 8004d96:	440b      	add	r3, r1
 8004d98:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004da0:	7bfb      	ldrb	r3, [r7, #15]
 8004da2:	3301      	adds	r3, #1
 8004da4:	73fb      	strb	r3, [r7, #15]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	791b      	ldrb	r3, [r3, #4]
 8004daa:	7bfa      	ldrb	r2, [r7, #15]
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d3b5      	bcc.n	8004d1c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6818      	ldr	r0, [r3, #0]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	7c1a      	ldrb	r2, [r3, #16]
 8004db8:	f88d 2000 	strb.w	r2, [sp]
 8004dbc:	3304      	adds	r3, #4
 8004dbe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004dc0:	f002 fdb4 	bl	800792c <USB_DevInit>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d005      	beq.n	8004dd6 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2202      	movs	r2, #2
 8004dce:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e013      	b.n	8004dfe <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	7b1b      	ldrb	r3, [r3, #12]
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d102      	bne.n	8004df2 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f000 f80b 	bl	8004e08 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4618      	mov	r0, r3
 8004df8:	f002 ff6f 	bl	8007cda <USB_DevDisconnect>

  return HAL_OK;
 8004dfc:	2300      	movs	r3, #0
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3710      	adds	r7, #16
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
	...

08004e08 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b085      	sub	sp, #20
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2201      	movs	r2, #1
 8004e1a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	699b      	ldr	r3, [r3, #24]
 8004e2a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004e36:	4b05      	ldr	r3, [pc, #20]	@ (8004e4c <HAL_PCDEx_ActivateLPM+0x44>)
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	68fa      	ldr	r2, [r7, #12]
 8004e3c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8004e3e:	2300      	movs	r3, #0
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3714      	adds	r7, #20
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr
 8004e4c:	10000003 	.word	0x10000003

08004e50 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004e50:	b480      	push	{r7}
 8004e52:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e54:	4b05      	ldr	r3, [pc, #20]	@ (8004e6c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a04      	ldr	r2, [pc, #16]	@ (8004e6c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004e5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e5e:	6013      	str	r3, [r2, #0]
}
 8004e60:	bf00      	nop
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr
 8004e6a:	bf00      	nop
 8004e6c:	40007000 	.word	0x40007000

08004e70 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b086      	sub	sp, #24
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d101      	bne.n	8004e86 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	e291      	b.n	80053aa <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 0301 	and.w	r3, r3, #1
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	f000 8087 	beq.w	8004fa2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e94:	4b96      	ldr	r3, [pc, #600]	@ (80050f0 <HAL_RCC_OscConfig+0x280>)
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	f003 030c 	and.w	r3, r3, #12
 8004e9c:	2b04      	cmp	r3, #4
 8004e9e:	d00c      	beq.n	8004eba <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ea0:	4b93      	ldr	r3, [pc, #588]	@ (80050f0 <HAL_RCC_OscConfig+0x280>)
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	f003 030c 	and.w	r3, r3, #12
 8004ea8:	2b08      	cmp	r3, #8
 8004eaa:	d112      	bne.n	8004ed2 <HAL_RCC_OscConfig+0x62>
 8004eac:	4b90      	ldr	r3, [pc, #576]	@ (80050f0 <HAL_RCC_OscConfig+0x280>)
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004eb4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004eb8:	d10b      	bne.n	8004ed2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004eba:	4b8d      	ldr	r3, [pc, #564]	@ (80050f0 <HAL_RCC_OscConfig+0x280>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d06c      	beq.n	8004fa0 <HAL_RCC_OscConfig+0x130>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d168      	bne.n	8004fa0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e26b      	b.n	80053aa <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004eda:	d106      	bne.n	8004eea <HAL_RCC_OscConfig+0x7a>
 8004edc:	4b84      	ldr	r3, [pc, #528]	@ (80050f0 <HAL_RCC_OscConfig+0x280>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a83      	ldr	r2, [pc, #524]	@ (80050f0 <HAL_RCC_OscConfig+0x280>)
 8004ee2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ee6:	6013      	str	r3, [r2, #0]
 8004ee8:	e02e      	b.n	8004f48 <HAL_RCC_OscConfig+0xd8>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d10c      	bne.n	8004f0c <HAL_RCC_OscConfig+0x9c>
 8004ef2:	4b7f      	ldr	r3, [pc, #508]	@ (80050f0 <HAL_RCC_OscConfig+0x280>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a7e      	ldr	r2, [pc, #504]	@ (80050f0 <HAL_RCC_OscConfig+0x280>)
 8004ef8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004efc:	6013      	str	r3, [r2, #0]
 8004efe:	4b7c      	ldr	r3, [pc, #496]	@ (80050f0 <HAL_RCC_OscConfig+0x280>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a7b      	ldr	r2, [pc, #492]	@ (80050f0 <HAL_RCC_OscConfig+0x280>)
 8004f04:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f08:	6013      	str	r3, [r2, #0]
 8004f0a:	e01d      	b.n	8004f48 <HAL_RCC_OscConfig+0xd8>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f14:	d10c      	bne.n	8004f30 <HAL_RCC_OscConfig+0xc0>
 8004f16:	4b76      	ldr	r3, [pc, #472]	@ (80050f0 <HAL_RCC_OscConfig+0x280>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a75      	ldr	r2, [pc, #468]	@ (80050f0 <HAL_RCC_OscConfig+0x280>)
 8004f1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f20:	6013      	str	r3, [r2, #0]
 8004f22:	4b73      	ldr	r3, [pc, #460]	@ (80050f0 <HAL_RCC_OscConfig+0x280>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a72      	ldr	r2, [pc, #456]	@ (80050f0 <HAL_RCC_OscConfig+0x280>)
 8004f28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f2c:	6013      	str	r3, [r2, #0]
 8004f2e:	e00b      	b.n	8004f48 <HAL_RCC_OscConfig+0xd8>
 8004f30:	4b6f      	ldr	r3, [pc, #444]	@ (80050f0 <HAL_RCC_OscConfig+0x280>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a6e      	ldr	r2, [pc, #440]	@ (80050f0 <HAL_RCC_OscConfig+0x280>)
 8004f36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f3a:	6013      	str	r3, [r2, #0]
 8004f3c:	4b6c      	ldr	r3, [pc, #432]	@ (80050f0 <HAL_RCC_OscConfig+0x280>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a6b      	ldr	r2, [pc, #428]	@ (80050f0 <HAL_RCC_OscConfig+0x280>)
 8004f42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d013      	beq.n	8004f78 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f50:	f7fd ffac 	bl	8002eac <HAL_GetTick>
 8004f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f56:	e008      	b.n	8004f6a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f58:	f7fd ffa8 	bl	8002eac <HAL_GetTick>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	2b64      	cmp	r3, #100	@ 0x64
 8004f64:	d901      	bls.n	8004f6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f66:	2303      	movs	r3, #3
 8004f68:	e21f      	b.n	80053aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f6a:	4b61      	ldr	r3, [pc, #388]	@ (80050f0 <HAL_RCC_OscConfig+0x280>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d0f0      	beq.n	8004f58 <HAL_RCC_OscConfig+0xe8>
 8004f76:	e014      	b.n	8004fa2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f78:	f7fd ff98 	bl	8002eac <HAL_GetTick>
 8004f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f7e:	e008      	b.n	8004f92 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f80:	f7fd ff94 	bl	8002eac <HAL_GetTick>
 8004f84:	4602      	mov	r2, r0
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	2b64      	cmp	r3, #100	@ 0x64
 8004f8c:	d901      	bls.n	8004f92 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004f8e:	2303      	movs	r3, #3
 8004f90:	e20b      	b.n	80053aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f92:	4b57      	ldr	r3, [pc, #348]	@ (80050f0 <HAL_RCC_OscConfig+0x280>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d1f0      	bne.n	8004f80 <HAL_RCC_OscConfig+0x110>
 8004f9e:	e000      	b.n	8004fa2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fa0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 0302 	and.w	r3, r3, #2
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d069      	beq.n	8005082 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004fae:	4b50      	ldr	r3, [pc, #320]	@ (80050f0 <HAL_RCC_OscConfig+0x280>)
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	f003 030c 	and.w	r3, r3, #12
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d00b      	beq.n	8004fd2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fba:	4b4d      	ldr	r3, [pc, #308]	@ (80050f0 <HAL_RCC_OscConfig+0x280>)
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	f003 030c 	and.w	r3, r3, #12
 8004fc2:	2b08      	cmp	r3, #8
 8004fc4:	d11c      	bne.n	8005000 <HAL_RCC_OscConfig+0x190>
 8004fc6:	4b4a      	ldr	r3, [pc, #296]	@ (80050f0 <HAL_RCC_OscConfig+0x280>)
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d116      	bne.n	8005000 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fd2:	4b47      	ldr	r3, [pc, #284]	@ (80050f0 <HAL_RCC_OscConfig+0x280>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 0302 	and.w	r3, r3, #2
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d005      	beq.n	8004fea <HAL_RCC_OscConfig+0x17a>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d001      	beq.n	8004fea <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e1df      	b.n	80053aa <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fea:	4b41      	ldr	r3, [pc, #260]	@ (80050f0 <HAL_RCC_OscConfig+0x280>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	691b      	ldr	r3, [r3, #16]
 8004ff6:	00db      	lsls	r3, r3, #3
 8004ff8:	493d      	ldr	r1, [pc, #244]	@ (80050f0 <HAL_RCC_OscConfig+0x280>)
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ffe:	e040      	b.n	8005082 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d023      	beq.n	8005050 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005008:	4b39      	ldr	r3, [pc, #228]	@ (80050f0 <HAL_RCC_OscConfig+0x280>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a38      	ldr	r2, [pc, #224]	@ (80050f0 <HAL_RCC_OscConfig+0x280>)
 800500e:	f043 0301 	orr.w	r3, r3, #1
 8005012:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005014:	f7fd ff4a 	bl	8002eac <HAL_GetTick>
 8005018:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800501a:	e008      	b.n	800502e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800501c:	f7fd ff46 	bl	8002eac <HAL_GetTick>
 8005020:	4602      	mov	r2, r0
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	1ad3      	subs	r3, r2, r3
 8005026:	2b02      	cmp	r3, #2
 8005028:	d901      	bls.n	800502e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800502a:	2303      	movs	r3, #3
 800502c:	e1bd      	b.n	80053aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800502e:	4b30      	ldr	r3, [pc, #192]	@ (80050f0 <HAL_RCC_OscConfig+0x280>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 0302 	and.w	r3, r3, #2
 8005036:	2b00      	cmp	r3, #0
 8005038:	d0f0      	beq.n	800501c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800503a:	4b2d      	ldr	r3, [pc, #180]	@ (80050f0 <HAL_RCC_OscConfig+0x280>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	00db      	lsls	r3, r3, #3
 8005048:	4929      	ldr	r1, [pc, #164]	@ (80050f0 <HAL_RCC_OscConfig+0x280>)
 800504a:	4313      	orrs	r3, r2
 800504c:	600b      	str	r3, [r1, #0]
 800504e:	e018      	b.n	8005082 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005050:	4b27      	ldr	r3, [pc, #156]	@ (80050f0 <HAL_RCC_OscConfig+0x280>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a26      	ldr	r2, [pc, #152]	@ (80050f0 <HAL_RCC_OscConfig+0x280>)
 8005056:	f023 0301 	bic.w	r3, r3, #1
 800505a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800505c:	f7fd ff26 	bl	8002eac <HAL_GetTick>
 8005060:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005062:	e008      	b.n	8005076 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005064:	f7fd ff22 	bl	8002eac <HAL_GetTick>
 8005068:	4602      	mov	r2, r0
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	2b02      	cmp	r3, #2
 8005070:	d901      	bls.n	8005076 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	e199      	b.n	80053aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005076:	4b1e      	ldr	r3, [pc, #120]	@ (80050f0 <HAL_RCC_OscConfig+0x280>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 0302 	and.w	r3, r3, #2
 800507e:	2b00      	cmp	r3, #0
 8005080:	d1f0      	bne.n	8005064 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 0308 	and.w	r3, r3, #8
 800508a:	2b00      	cmp	r3, #0
 800508c:	d038      	beq.n	8005100 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	695b      	ldr	r3, [r3, #20]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d019      	beq.n	80050ca <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005096:	4b16      	ldr	r3, [pc, #88]	@ (80050f0 <HAL_RCC_OscConfig+0x280>)
 8005098:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800509a:	4a15      	ldr	r2, [pc, #84]	@ (80050f0 <HAL_RCC_OscConfig+0x280>)
 800509c:	f043 0301 	orr.w	r3, r3, #1
 80050a0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050a2:	f7fd ff03 	bl	8002eac <HAL_GetTick>
 80050a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050a8:	e008      	b.n	80050bc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050aa:	f7fd feff 	bl	8002eac <HAL_GetTick>
 80050ae:	4602      	mov	r2, r0
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	1ad3      	subs	r3, r2, r3
 80050b4:	2b02      	cmp	r3, #2
 80050b6:	d901      	bls.n	80050bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e176      	b.n	80053aa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050bc:	4b0c      	ldr	r3, [pc, #48]	@ (80050f0 <HAL_RCC_OscConfig+0x280>)
 80050be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050c0:	f003 0302 	and.w	r3, r3, #2
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d0f0      	beq.n	80050aa <HAL_RCC_OscConfig+0x23a>
 80050c8:	e01a      	b.n	8005100 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050ca:	4b09      	ldr	r3, [pc, #36]	@ (80050f0 <HAL_RCC_OscConfig+0x280>)
 80050cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050ce:	4a08      	ldr	r2, [pc, #32]	@ (80050f0 <HAL_RCC_OscConfig+0x280>)
 80050d0:	f023 0301 	bic.w	r3, r3, #1
 80050d4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050d6:	f7fd fee9 	bl	8002eac <HAL_GetTick>
 80050da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050dc:	e00a      	b.n	80050f4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050de:	f7fd fee5 	bl	8002eac <HAL_GetTick>
 80050e2:	4602      	mov	r2, r0
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	2b02      	cmp	r3, #2
 80050ea:	d903      	bls.n	80050f4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80050ec:	2303      	movs	r3, #3
 80050ee:	e15c      	b.n	80053aa <HAL_RCC_OscConfig+0x53a>
 80050f0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050f4:	4b91      	ldr	r3, [pc, #580]	@ (800533c <HAL_RCC_OscConfig+0x4cc>)
 80050f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050f8:	f003 0302 	and.w	r3, r3, #2
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d1ee      	bne.n	80050de <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 0304 	and.w	r3, r3, #4
 8005108:	2b00      	cmp	r3, #0
 800510a:	f000 80a4 	beq.w	8005256 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800510e:	4b8b      	ldr	r3, [pc, #556]	@ (800533c <HAL_RCC_OscConfig+0x4cc>)
 8005110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005112:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005116:	2b00      	cmp	r3, #0
 8005118:	d10d      	bne.n	8005136 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800511a:	4b88      	ldr	r3, [pc, #544]	@ (800533c <HAL_RCC_OscConfig+0x4cc>)
 800511c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800511e:	4a87      	ldr	r2, [pc, #540]	@ (800533c <HAL_RCC_OscConfig+0x4cc>)
 8005120:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005124:	6413      	str	r3, [r2, #64]	@ 0x40
 8005126:	4b85      	ldr	r3, [pc, #532]	@ (800533c <HAL_RCC_OscConfig+0x4cc>)
 8005128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800512a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800512e:	60bb      	str	r3, [r7, #8]
 8005130:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005132:	2301      	movs	r3, #1
 8005134:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005136:	4b82      	ldr	r3, [pc, #520]	@ (8005340 <HAL_RCC_OscConfig+0x4d0>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800513e:	2b00      	cmp	r3, #0
 8005140:	d118      	bne.n	8005174 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005142:	4b7f      	ldr	r3, [pc, #508]	@ (8005340 <HAL_RCC_OscConfig+0x4d0>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a7e      	ldr	r2, [pc, #504]	@ (8005340 <HAL_RCC_OscConfig+0x4d0>)
 8005148:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800514c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800514e:	f7fd fead 	bl	8002eac <HAL_GetTick>
 8005152:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005154:	e008      	b.n	8005168 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005156:	f7fd fea9 	bl	8002eac <HAL_GetTick>
 800515a:	4602      	mov	r2, r0
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	1ad3      	subs	r3, r2, r3
 8005160:	2b64      	cmp	r3, #100	@ 0x64
 8005162:	d901      	bls.n	8005168 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005164:	2303      	movs	r3, #3
 8005166:	e120      	b.n	80053aa <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005168:	4b75      	ldr	r3, [pc, #468]	@ (8005340 <HAL_RCC_OscConfig+0x4d0>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005170:	2b00      	cmp	r3, #0
 8005172:	d0f0      	beq.n	8005156 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	2b01      	cmp	r3, #1
 800517a:	d106      	bne.n	800518a <HAL_RCC_OscConfig+0x31a>
 800517c:	4b6f      	ldr	r3, [pc, #444]	@ (800533c <HAL_RCC_OscConfig+0x4cc>)
 800517e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005180:	4a6e      	ldr	r2, [pc, #440]	@ (800533c <HAL_RCC_OscConfig+0x4cc>)
 8005182:	f043 0301 	orr.w	r3, r3, #1
 8005186:	6713      	str	r3, [r2, #112]	@ 0x70
 8005188:	e02d      	b.n	80051e6 <HAL_RCC_OscConfig+0x376>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d10c      	bne.n	80051ac <HAL_RCC_OscConfig+0x33c>
 8005192:	4b6a      	ldr	r3, [pc, #424]	@ (800533c <HAL_RCC_OscConfig+0x4cc>)
 8005194:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005196:	4a69      	ldr	r2, [pc, #420]	@ (800533c <HAL_RCC_OscConfig+0x4cc>)
 8005198:	f023 0301 	bic.w	r3, r3, #1
 800519c:	6713      	str	r3, [r2, #112]	@ 0x70
 800519e:	4b67      	ldr	r3, [pc, #412]	@ (800533c <HAL_RCC_OscConfig+0x4cc>)
 80051a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051a2:	4a66      	ldr	r2, [pc, #408]	@ (800533c <HAL_RCC_OscConfig+0x4cc>)
 80051a4:	f023 0304 	bic.w	r3, r3, #4
 80051a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80051aa:	e01c      	b.n	80051e6 <HAL_RCC_OscConfig+0x376>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	2b05      	cmp	r3, #5
 80051b2:	d10c      	bne.n	80051ce <HAL_RCC_OscConfig+0x35e>
 80051b4:	4b61      	ldr	r3, [pc, #388]	@ (800533c <HAL_RCC_OscConfig+0x4cc>)
 80051b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051b8:	4a60      	ldr	r2, [pc, #384]	@ (800533c <HAL_RCC_OscConfig+0x4cc>)
 80051ba:	f043 0304 	orr.w	r3, r3, #4
 80051be:	6713      	str	r3, [r2, #112]	@ 0x70
 80051c0:	4b5e      	ldr	r3, [pc, #376]	@ (800533c <HAL_RCC_OscConfig+0x4cc>)
 80051c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051c4:	4a5d      	ldr	r2, [pc, #372]	@ (800533c <HAL_RCC_OscConfig+0x4cc>)
 80051c6:	f043 0301 	orr.w	r3, r3, #1
 80051ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80051cc:	e00b      	b.n	80051e6 <HAL_RCC_OscConfig+0x376>
 80051ce:	4b5b      	ldr	r3, [pc, #364]	@ (800533c <HAL_RCC_OscConfig+0x4cc>)
 80051d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051d2:	4a5a      	ldr	r2, [pc, #360]	@ (800533c <HAL_RCC_OscConfig+0x4cc>)
 80051d4:	f023 0301 	bic.w	r3, r3, #1
 80051d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80051da:	4b58      	ldr	r3, [pc, #352]	@ (800533c <HAL_RCC_OscConfig+0x4cc>)
 80051dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051de:	4a57      	ldr	r2, [pc, #348]	@ (800533c <HAL_RCC_OscConfig+0x4cc>)
 80051e0:	f023 0304 	bic.w	r3, r3, #4
 80051e4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d015      	beq.n	800521a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051ee:	f7fd fe5d 	bl	8002eac <HAL_GetTick>
 80051f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051f4:	e00a      	b.n	800520c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051f6:	f7fd fe59 	bl	8002eac <HAL_GetTick>
 80051fa:	4602      	mov	r2, r0
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	1ad3      	subs	r3, r2, r3
 8005200:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005204:	4293      	cmp	r3, r2
 8005206:	d901      	bls.n	800520c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005208:	2303      	movs	r3, #3
 800520a:	e0ce      	b.n	80053aa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800520c:	4b4b      	ldr	r3, [pc, #300]	@ (800533c <HAL_RCC_OscConfig+0x4cc>)
 800520e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005210:	f003 0302 	and.w	r3, r3, #2
 8005214:	2b00      	cmp	r3, #0
 8005216:	d0ee      	beq.n	80051f6 <HAL_RCC_OscConfig+0x386>
 8005218:	e014      	b.n	8005244 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800521a:	f7fd fe47 	bl	8002eac <HAL_GetTick>
 800521e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005220:	e00a      	b.n	8005238 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005222:	f7fd fe43 	bl	8002eac <HAL_GetTick>
 8005226:	4602      	mov	r2, r0
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	1ad3      	subs	r3, r2, r3
 800522c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005230:	4293      	cmp	r3, r2
 8005232:	d901      	bls.n	8005238 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005234:	2303      	movs	r3, #3
 8005236:	e0b8      	b.n	80053aa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005238:	4b40      	ldr	r3, [pc, #256]	@ (800533c <HAL_RCC_OscConfig+0x4cc>)
 800523a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800523c:	f003 0302 	and.w	r3, r3, #2
 8005240:	2b00      	cmp	r3, #0
 8005242:	d1ee      	bne.n	8005222 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005244:	7dfb      	ldrb	r3, [r7, #23]
 8005246:	2b01      	cmp	r3, #1
 8005248:	d105      	bne.n	8005256 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800524a:	4b3c      	ldr	r3, [pc, #240]	@ (800533c <HAL_RCC_OscConfig+0x4cc>)
 800524c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800524e:	4a3b      	ldr	r2, [pc, #236]	@ (800533c <HAL_RCC_OscConfig+0x4cc>)
 8005250:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005254:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	699b      	ldr	r3, [r3, #24]
 800525a:	2b00      	cmp	r3, #0
 800525c:	f000 80a4 	beq.w	80053a8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005260:	4b36      	ldr	r3, [pc, #216]	@ (800533c <HAL_RCC_OscConfig+0x4cc>)
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	f003 030c 	and.w	r3, r3, #12
 8005268:	2b08      	cmp	r3, #8
 800526a:	d06b      	beq.n	8005344 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	699b      	ldr	r3, [r3, #24]
 8005270:	2b02      	cmp	r3, #2
 8005272:	d149      	bne.n	8005308 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005274:	4b31      	ldr	r3, [pc, #196]	@ (800533c <HAL_RCC_OscConfig+0x4cc>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a30      	ldr	r2, [pc, #192]	@ (800533c <HAL_RCC_OscConfig+0x4cc>)
 800527a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800527e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005280:	f7fd fe14 	bl	8002eac <HAL_GetTick>
 8005284:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005286:	e008      	b.n	800529a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005288:	f7fd fe10 	bl	8002eac <HAL_GetTick>
 800528c:	4602      	mov	r2, r0
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	1ad3      	subs	r3, r2, r3
 8005292:	2b02      	cmp	r3, #2
 8005294:	d901      	bls.n	800529a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005296:	2303      	movs	r3, #3
 8005298:	e087      	b.n	80053aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800529a:	4b28      	ldr	r3, [pc, #160]	@ (800533c <HAL_RCC_OscConfig+0x4cc>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d1f0      	bne.n	8005288 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	69da      	ldr	r2, [r3, #28]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6a1b      	ldr	r3, [r3, #32]
 80052ae:	431a      	orrs	r2, r3
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052b4:	019b      	lsls	r3, r3, #6
 80052b6:	431a      	orrs	r2, r3
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052bc:	085b      	lsrs	r3, r3, #1
 80052be:	3b01      	subs	r3, #1
 80052c0:	041b      	lsls	r3, r3, #16
 80052c2:	431a      	orrs	r2, r3
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052c8:	061b      	lsls	r3, r3, #24
 80052ca:	4313      	orrs	r3, r2
 80052cc:	4a1b      	ldr	r2, [pc, #108]	@ (800533c <HAL_RCC_OscConfig+0x4cc>)
 80052ce:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80052d2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052d4:	4b19      	ldr	r3, [pc, #100]	@ (800533c <HAL_RCC_OscConfig+0x4cc>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a18      	ldr	r2, [pc, #96]	@ (800533c <HAL_RCC_OscConfig+0x4cc>)
 80052da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80052de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052e0:	f7fd fde4 	bl	8002eac <HAL_GetTick>
 80052e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052e6:	e008      	b.n	80052fa <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052e8:	f7fd fde0 	bl	8002eac <HAL_GetTick>
 80052ec:	4602      	mov	r2, r0
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	2b02      	cmp	r3, #2
 80052f4:	d901      	bls.n	80052fa <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80052f6:	2303      	movs	r3, #3
 80052f8:	e057      	b.n	80053aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052fa:	4b10      	ldr	r3, [pc, #64]	@ (800533c <HAL_RCC_OscConfig+0x4cc>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005302:	2b00      	cmp	r3, #0
 8005304:	d0f0      	beq.n	80052e8 <HAL_RCC_OscConfig+0x478>
 8005306:	e04f      	b.n	80053a8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005308:	4b0c      	ldr	r3, [pc, #48]	@ (800533c <HAL_RCC_OscConfig+0x4cc>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a0b      	ldr	r2, [pc, #44]	@ (800533c <HAL_RCC_OscConfig+0x4cc>)
 800530e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005312:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005314:	f7fd fdca 	bl	8002eac <HAL_GetTick>
 8005318:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800531a:	e008      	b.n	800532e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800531c:	f7fd fdc6 	bl	8002eac <HAL_GetTick>
 8005320:	4602      	mov	r2, r0
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	1ad3      	subs	r3, r2, r3
 8005326:	2b02      	cmp	r3, #2
 8005328:	d901      	bls.n	800532e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800532a:	2303      	movs	r3, #3
 800532c:	e03d      	b.n	80053aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800532e:	4b03      	ldr	r3, [pc, #12]	@ (800533c <HAL_RCC_OscConfig+0x4cc>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005336:	2b00      	cmp	r3, #0
 8005338:	d1f0      	bne.n	800531c <HAL_RCC_OscConfig+0x4ac>
 800533a:	e035      	b.n	80053a8 <HAL_RCC_OscConfig+0x538>
 800533c:	40023800 	.word	0x40023800
 8005340:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005344:	4b1b      	ldr	r3, [pc, #108]	@ (80053b4 <HAL_RCC_OscConfig+0x544>)
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	699b      	ldr	r3, [r3, #24]
 800534e:	2b01      	cmp	r3, #1
 8005350:	d028      	beq.n	80053a4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800535c:	429a      	cmp	r2, r3
 800535e:	d121      	bne.n	80053a4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800536a:	429a      	cmp	r2, r3
 800536c:	d11a      	bne.n	80053a4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800536e:	68fa      	ldr	r2, [r7, #12]
 8005370:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005374:	4013      	ands	r3, r2
 8005376:	687a      	ldr	r2, [r7, #4]
 8005378:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800537a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800537c:	4293      	cmp	r3, r2
 800537e:	d111      	bne.n	80053a4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800538a:	085b      	lsrs	r3, r3, #1
 800538c:	3b01      	subs	r3, #1
 800538e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005390:	429a      	cmp	r2, r3
 8005392:	d107      	bne.n	80053a4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800539e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d001      	beq.n	80053a8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	e000      	b.n	80053aa <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80053a8:	2300      	movs	r3, #0
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3718      	adds	r7, #24
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop
 80053b4:	40023800 	.word	0x40023800

080053b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b084      	sub	sp, #16
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80053c2:	2300      	movs	r3, #0
 80053c4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d101      	bne.n	80053d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	e0d0      	b.n	8005572 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80053d0:	4b6a      	ldr	r3, [pc, #424]	@ (800557c <HAL_RCC_ClockConfig+0x1c4>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 030f 	and.w	r3, r3, #15
 80053d8:	683a      	ldr	r2, [r7, #0]
 80053da:	429a      	cmp	r2, r3
 80053dc:	d910      	bls.n	8005400 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053de:	4b67      	ldr	r3, [pc, #412]	@ (800557c <HAL_RCC_ClockConfig+0x1c4>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f023 020f 	bic.w	r2, r3, #15
 80053e6:	4965      	ldr	r1, [pc, #404]	@ (800557c <HAL_RCC_ClockConfig+0x1c4>)
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	4313      	orrs	r3, r2
 80053ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053ee:	4b63      	ldr	r3, [pc, #396]	@ (800557c <HAL_RCC_ClockConfig+0x1c4>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 030f 	and.w	r3, r3, #15
 80053f6:	683a      	ldr	r2, [r7, #0]
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d001      	beq.n	8005400 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	e0b8      	b.n	8005572 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 0302 	and.w	r3, r3, #2
 8005408:	2b00      	cmp	r3, #0
 800540a:	d020      	beq.n	800544e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 0304 	and.w	r3, r3, #4
 8005414:	2b00      	cmp	r3, #0
 8005416:	d005      	beq.n	8005424 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005418:	4b59      	ldr	r3, [pc, #356]	@ (8005580 <HAL_RCC_ClockConfig+0x1c8>)
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	4a58      	ldr	r2, [pc, #352]	@ (8005580 <HAL_RCC_ClockConfig+0x1c8>)
 800541e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005422:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 0308 	and.w	r3, r3, #8
 800542c:	2b00      	cmp	r3, #0
 800542e:	d005      	beq.n	800543c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005430:	4b53      	ldr	r3, [pc, #332]	@ (8005580 <HAL_RCC_ClockConfig+0x1c8>)
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	4a52      	ldr	r2, [pc, #328]	@ (8005580 <HAL_RCC_ClockConfig+0x1c8>)
 8005436:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800543a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800543c:	4b50      	ldr	r3, [pc, #320]	@ (8005580 <HAL_RCC_ClockConfig+0x1c8>)
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	494d      	ldr	r1, [pc, #308]	@ (8005580 <HAL_RCC_ClockConfig+0x1c8>)
 800544a:	4313      	orrs	r3, r2
 800544c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 0301 	and.w	r3, r3, #1
 8005456:	2b00      	cmp	r3, #0
 8005458:	d040      	beq.n	80054dc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	2b01      	cmp	r3, #1
 8005460:	d107      	bne.n	8005472 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005462:	4b47      	ldr	r3, [pc, #284]	@ (8005580 <HAL_RCC_ClockConfig+0x1c8>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800546a:	2b00      	cmp	r3, #0
 800546c:	d115      	bne.n	800549a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	e07f      	b.n	8005572 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	2b02      	cmp	r3, #2
 8005478:	d107      	bne.n	800548a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800547a:	4b41      	ldr	r3, [pc, #260]	@ (8005580 <HAL_RCC_ClockConfig+0x1c8>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005482:	2b00      	cmp	r3, #0
 8005484:	d109      	bne.n	800549a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	e073      	b.n	8005572 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800548a:	4b3d      	ldr	r3, [pc, #244]	@ (8005580 <HAL_RCC_ClockConfig+0x1c8>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 0302 	and.w	r3, r3, #2
 8005492:	2b00      	cmp	r3, #0
 8005494:	d101      	bne.n	800549a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	e06b      	b.n	8005572 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800549a:	4b39      	ldr	r3, [pc, #228]	@ (8005580 <HAL_RCC_ClockConfig+0x1c8>)
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	f023 0203 	bic.w	r2, r3, #3
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	4936      	ldr	r1, [pc, #216]	@ (8005580 <HAL_RCC_ClockConfig+0x1c8>)
 80054a8:	4313      	orrs	r3, r2
 80054aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054ac:	f7fd fcfe 	bl	8002eac <HAL_GetTick>
 80054b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054b2:	e00a      	b.n	80054ca <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054b4:	f7fd fcfa 	bl	8002eac <HAL_GetTick>
 80054b8:	4602      	mov	r2, r0
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	1ad3      	subs	r3, r2, r3
 80054be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d901      	bls.n	80054ca <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80054c6:	2303      	movs	r3, #3
 80054c8:	e053      	b.n	8005572 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054ca:	4b2d      	ldr	r3, [pc, #180]	@ (8005580 <HAL_RCC_ClockConfig+0x1c8>)
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	f003 020c 	and.w	r2, r3, #12
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	429a      	cmp	r2, r3
 80054da:	d1eb      	bne.n	80054b4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80054dc:	4b27      	ldr	r3, [pc, #156]	@ (800557c <HAL_RCC_ClockConfig+0x1c4>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f003 030f 	and.w	r3, r3, #15
 80054e4:	683a      	ldr	r2, [r7, #0]
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d210      	bcs.n	800550c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054ea:	4b24      	ldr	r3, [pc, #144]	@ (800557c <HAL_RCC_ClockConfig+0x1c4>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f023 020f 	bic.w	r2, r3, #15
 80054f2:	4922      	ldr	r1, [pc, #136]	@ (800557c <HAL_RCC_ClockConfig+0x1c4>)
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054fa:	4b20      	ldr	r3, [pc, #128]	@ (800557c <HAL_RCC_ClockConfig+0x1c4>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 030f 	and.w	r3, r3, #15
 8005502:	683a      	ldr	r2, [r7, #0]
 8005504:	429a      	cmp	r2, r3
 8005506:	d001      	beq.n	800550c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	e032      	b.n	8005572 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 0304 	and.w	r3, r3, #4
 8005514:	2b00      	cmp	r3, #0
 8005516:	d008      	beq.n	800552a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005518:	4b19      	ldr	r3, [pc, #100]	@ (8005580 <HAL_RCC_ClockConfig+0x1c8>)
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	4916      	ldr	r1, [pc, #88]	@ (8005580 <HAL_RCC_ClockConfig+0x1c8>)
 8005526:	4313      	orrs	r3, r2
 8005528:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 0308 	and.w	r3, r3, #8
 8005532:	2b00      	cmp	r3, #0
 8005534:	d009      	beq.n	800554a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005536:	4b12      	ldr	r3, [pc, #72]	@ (8005580 <HAL_RCC_ClockConfig+0x1c8>)
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	691b      	ldr	r3, [r3, #16]
 8005542:	00db      	lsls	r3, r3, #3
 8005544:	490e      	ldr	r1, [pc, #56]	@ (8005580 <HAL_RCC_ClockConfig+0x1c8>)
 8005546:	4313      	orrs	r3, r2
 8005548:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800554a:	f000 f821 	bl	8005590 <HAL_RCC_GetSysClockFreq>
 800554e:	4602      	mov	r2, r0
 8005550:	4b0b      	ldr	r3, [pc, #44]	@ (8005580 <HAL_RCC_ClockConfig+0x1c8>)
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	091b      	lsrs	r3, r3, #4
 8005556:	f003 030f 	and.w	r3, r3, #15
 800555a:	490a      	ldr	r1, [pc, #40]	@ (8005584 <HAL_RCC_ClockConfig+0x1cc>)
 800555c:	5ccb      	ldrb	r3, [r1, r3]
 800555e:	fa22 f303 	lsr.w	r3, r2, r3
 8005562:	4a09      	ldr	r2, [pc, #36]	@ (8005588 <HAL_RCC_ClockConfig+0x1d0>)
 8005564:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005566:	4b09      	ldr	r3, [pc, #36]	@ (800558c <HAL_RCC_ClockConfig+0x1d4>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4618      	mov	r0, r3
 800556c:	f7fd fc5a 	bl	8002e24 <HAL_InitTick>

  return HAL_OK;
 8005570:	2300      	movs	r3, #0
}
 8005572:	4618      	mov	r0, r3
 8005574:	3710      	adds	r7, #16
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
 800557a:	bf00      	nop
 800557c:	40023c00 	.word	0x40023c00
 8005580:	40023800 	.word	0x40023800
 8005584:	08009db8 	.word	0x08009db8
 8005588:	20000044 	.word	0x20000044
 800558c:	20000048 	.word	0x20000048

08005590 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005590:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005594:	b094      	sub	sp, #80	@ 0x50
 8005596:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005598:	2300      	movs	r3, #0
 800559a:	647b      	str	r3, [r7, #68]	@ 0x44
 800559c:	2300      	movs	r3, #0
 800559e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055a0:	2300      	movs	r3, #0
 80055a2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80055a4:	2300      	movs	r3, #0
 80055a6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80055a8:	4b79      	ldr	r3, [pc, #484]	@ (8005790 <HAL_RCC_GetSysClockFreq+0x200>)
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	f003 030c 	and.w	r3, r3, #12
 80055b0:	2b08      	cmp	r3, #8
 80055b2:	d00d      	beq.n	80055d0 <HAL_RCC_GetSysClockFreq+0x40>
 80055b4:	2b08      	cmp	r3, #8
 80055b6:	f200 80e1 	bhi.w	800577c <HAL_RCC_GetSysClockFreq+0x1ec>
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d002      	beq.n	80055c4 <HAL_RCC_GetSysClockFreq+0x34>
 80055be:	2b04      	cmp	r3, #4
 80055c0:	d003      	beq.n	80055ca <HAL_RCC_GetSysClockFreq+0x3a>
 80055c2:	e0db      	b.n	800577c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80055c4:	4b73      	ldr	r3, [pc, #460]	@ (8005794 <HAL_RCC_GetSysClockFreq+0x204>)
 80055c6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80055c8:	e0db      	b.n	8005782 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80055ca:	4b73      	ldr	r3, [pc, #460]	@ (8005798 <HAL_RCC_GetSysClockFreq+0x208>)
 80055cc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80055ce:	e0d8      	b.n	8005782 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80055d0:	4b6f      	ldr	r3, [pc, #444]	@ (8005790 <HAL_RCC_GetSysClockFreq+0x200>)
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80055d8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80055da:	4b6d      	ldr	r3, [pc, #436]	@ (8005790 <HAL_RCC_GetSysClockFreq+0x200>)
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d063      	beq.n	80056ae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055e6:	4b6a      	ldr	r3, [pc, #424]	@ (8005790 <HAL_RCC_GetSysClockFreq+0x200>)
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	099b      	lsrs	r3, r3, #6
 80055ec:	2200      	movs	r2, #0
 80055ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 80055f0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80055f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80055fa:	2300      	movs	r3, #0
 80055fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80055fe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005602:	4622      	mov	r2, r4
 8005604:	462b      	mov	r3, r5
 8005606:	f04f 0000 	mov.w	r0, #0
 800560a:	f04f 0100 	mov.w	r1, #0
 800560e:	0159      	lsls	r1, r3, #5
 8005610:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005614:	0150      	lsls	r0, r2, #5
 8005616:	4602      	mov	r2, r0
 8005618:	460b      	mov	r3, r1
 800561a:	4621      	mov	r1, r4
 800561c:	1a51      	subs	r1, r2, r1
 800561e:	6139      	str	r1, [r7, #16]
 8005620:	4629      	mov	r1, r5
 8005622:	eb63 0301 	sbc.w	r3, r3, r1
 8005626:	617b      	str	r3, [r7, #20]
 8005628:	f04f 0200 	mov.w	r2, #0
 800562c:	f04f 0300 	mov.w	r3, #0
 8005630:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005634:	4659      	mov	r1, fp
 8005636:	018b      	lsls	r3, r1, #6
 8005638:	4651      	mov	r1, sl
 800563a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800563e:	4651      	mov	r1, sl
 8005640:	018a      	lsls	r2, r1, #6
 8005642:	4651      	mov	r1, sl
 8005644:	ebb2 0801 	subs.w	r8, r2, r1
 8005648:	4659      	mov	r1, fp
 800564a:	eb63 0901 	sbc.w	r9, r3, r1
 800564e:	f04f 0200 	mov.w	r2, #0
 8005652:	f04f 0300 	mov.w	r3, #0
 8005656:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800565a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800565e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005662:	4690      	mov	r8, r2
 8005664:	4699      	mov	r9, r3
 8005666:	4623      	mov	r3, r4
 8005668:	eb18 0303 	adds.w	r3, r8, r3
 800566c:	60bb      	str	r3, [r7, #8]
 800566e:	462b      	mov	r3, r5
 8005670:	eb49 0303 	adc.w	r3, r9, r3
 8005674:	60fb      	str	r3, [r7, #12]
 8005676:	f04f 0200 	mov.w	r2, #0
 800567a:	f04f 0300 	mov.w	r3, #0
 800567e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005682:	4629      	mov	r1, r5
 8005684:	024b      	lsls	r3, r1, #9
 8005686:	4621      	mov	r1, r4
 8005688:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800568c:	4621      	mov	r1, r4
 800568e:	024a      	lsls	r2, r1, #9
 8005690:	4610      	mov	r0, r2
 8005692:	4619      	mov	r1, r3
 8005694:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005696:	2200      	movs	r2, #0
 8005698:	62bb      	str	r3, [r7, #40]	@ 0x28
 800569a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800569c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80056a0:	f7fa fe0e 	bl	80002c0 <__aeabi_uldivmod>
 80056a4:	4602      	mov	r2, r0
 80056a6:	460b      	mov	r3, r1
 80056a8:	4613      	mov	r3, r2
 80056aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056ac:	e058      	b.n	8005760 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056ae:	4b38      	ldr	r3, [pc, #224]	@ (8005790 <HAL_RCC_GetSysClockFreq+0x200>)
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	099b      	lsrs	r3, r3, #6
 80056b4:	2200      	movs	r2, #0
 80056b6:	4618      	mov	r0, r3
 80056b8:	4611      	mov	r1, r2
 80056ba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80056be:	623b      	str	r3, [r7, #32]
 80056c0:	2300      	movs	r3, #0
 80056c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80056c4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80056c8:	4642      	mov	r2, r8
 80056ca:	464b      	mov	r3, r9
 80056cc:	f04f 0000 	mov.w	r0, #0
 80056d0:	f04f 0100 	mov.w	r1, #0
 80056d4:	0159      	lsls	r1, r3, #5
 80056d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80056da:	0150      	lsls	r0, r2, #5
 80056dc:	4602      	mov	r2, r0
 80056de:	460b      	mov	r3, r1
 80056e0:	4641      	mov	r1, r8
 80056e2:	ebb2 0a01 	subs.w	sl, r2, r1
 80056e6:	4649      	mov	r1, r9
 80056e8:	eb63 0b01 	sbc.w	fp, r3, r1
 80056ec:	f04f 0200 	mov.w	r2, #0
 80056f0:	f04f 0300 	mov.w	r3, #0
 80056f4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80056f8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80056fc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005700:	ebb2 040a 	subs.w	r4, r2, sl
 8005704:	eb63 050b 	sbc.w	r5, r3, fp
 8005708:	f04f 0200 	mov.w	r2, #0
 800570c:	f04f 0300 	mov.w	r3, #0
 8005710:	00eb      	lsls	r3, r5, #3
 8005712:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005716:	00e2      	lsls	r2, r4, #3
 8005718:	4614      	mov	r4, r2
 800571a:	461d      	mov	r5, r3
 800571c:	4643      	mov	r3, r8
 800571e:	18e3      	adds	r3, r4, r3
 8005720:	603b      	str	r3, [r7, #0]
 8005722:	464b      	mov	r3, r9
 8005724:	eb45 0303 	adc.w	r3, r5, r3
 8005728:	607b      	str	r3, [r7, #4]
 800572a:	f04f 0200 	mov.w	r2, #0
 800572e:	f04f 0300 	mov.w	r3, #0
 8005732:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005736:	4629      	mov	r1, r5
 8005738:	028b      	lsls	r3, r1, #10
 800573a:	4621      	mov	r1, r4
 800573c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005740:	4621      	mov	r1, r4
 8005742:	028a      	lsls	r2, r1, #10
 8005744:	4610      	mov	r0, r2
 8005746:	4619      	mov	r1, r3
 8005748:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800574a:	2200      	movs	r2, #0
 800574c:	61bb      	str	r3, [r7, #24]
 800574e:	61fa      	str	r2, [r7, #28]
 8005750:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005754:	f7fa fdb4 	bl	80002c0 <__aeabi_uldivmod>
 8005758:	4602      	mov	r2, r0
 800575a:	460b      	mov	r3, r1
 800575c:	4613      	mov	r3, r2
 800575e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005760:	4b0b      	ldr	r3, [pc, #44]	@ (8005790 <HAL_RCC_GetSysClockFreq+0x200>)
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	0c1b      	lsrs	r3, r3, #16
 8005766:	f003 0303 	and.w	r3, r3, #3
 800576a:	3301      	adds	r3, #1
 800576c:	005b      	lsls	r3, r3, #1
 800576e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005770:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005772:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005774:	fbb2 f3f3 	udiv	r3, r2, r3
 8005778:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800577a:	e002      	b.n	8005782 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800577c:	4b05      	ldr	r3, [pc, #20]	@ (8005794 <HAL_RCC_GetSysClockFreq+0x204>)
 800577e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005780:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005782:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005784:	4618      	mov	r0, r3
 8005786:	3750      	adds	r7, #80	@ 0x50
 8005788:	46bd      	mov	sp, r7
 800578a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800578e:	bf00      	nop
 8005790:	40023800 	.word	0x40023800
 8005794:	00f42400 	.word	0x00f42400
 8005798:	007a1200 	.word	0x007a1200

0800579c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800579c:	b480      	push	{r7}
 800579e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057a0:	4b03      	ldr	r3, [pc, #12]	@ (80057b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80057a2:	681b      	ldr	r3, [r3, #0]
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr
 80057ae:	bf00      	nop
 80057b0:	20000044 	.word	0x20000044

080057b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80057b8:	f7ff fff0 	bl	800579c <HAL_RCC_GetHCLKFreq>
 80057bc:	4602      	mov	r2, r0
 80057be:	4b05      	ldr	r3, [pc, #20]	@ (80057d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	0a9b      	lsrs	r3, r3, #10
 80057c4:	f003 0307 	and.w	r3, r3, #7
 80057c8:	4903      	ldr	r1, [pc, #12]	@ (80057d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80057ca:	5ccb      	ldrb	r3, [r1, r3]
 80057cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	bd80      	pop	{r7, pc}
 80057d4:	40023800 	.word	0x40023800
 80057d8:	08009dc8 	.word	0x08009dc8

080057dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80057e0:	f7ff ffdc 	bl	800579c <HAL_RCC_GetHCLKFreq>
 80057e4:	4602      	mov	r2, r0
 80057e6:	4b05      	ldr	r3, [pc, #20]	@ (80057fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	0b5b      	lsrs	r3, r3, #13
 80057ec:	f003 0307 	and.w	r3, r3, #7
 80057f0:	4903      	ldr	r1, [pc, #12]	@ (8005800 <HAL_RCC_GetPCLK2Freq+0x24>)
 80057f2:	5ccb      	ldrb	r3, [r1, r3]
 80057f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	bd80      	pop	{r7, pc}
 80057fc:	40023800 	.word	0x40023800
 8005800:	08009dc8 	.word	0x08009dc8

08005804 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b088      	sub	sp, #32
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800580c:	2300      	movs	r3, #0
 800580e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005810:	2300      	movs	r3, #0
 8005812:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005814:	2300      	movs	r3, #0
 8005816:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005818:	2300      	movs	r3, #0
 800581a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800581c:	2300      	movs	r3, #0
 800581e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f003 0301 	and.w	r3, r3, #1
 8005828:	2b00      	cmp	r3, #0
 800582a:	d012      	beq.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800582c:	4b69      	ldr	r3, [pc, #420]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	4a68      	ldr	r2, [pc, #416]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005832:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005836:	6093      	str	r3, [r2, #8]
 8005838:	4b66      	ldr	r3, [pc, #408]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800583a:	689a      	ldr	r2, [r3, #8]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005840:	4964      	ldr	r1, [pc, #400]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005842:	4313      	orrs	r3, r2
 8005844:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800584a:	2b00      	cmp	r3, #0
 800584c:	d101      	bne.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800584e:	2301      	movs	r3, #1
 8005850:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800585a:	2b00      	cmp	r3, #0
 800585c:	d017      	beq.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800585e:	4b5d      	ldr	r3, [pc, #372]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005860:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005864:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800586c:	4959      	ldr	r1, [pc, #356]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800586e:	4313      	orrs	r3, r2
 8005870:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005878:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800587c:	d101      	bne.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800587e:	2301      	movs	r3, #1
 8005880:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005886:	2b00      	cmp	r3, #0
 8005888:	d101      	bne.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800588a:	2301      	movs	r3, #1
 800588c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005896:	2b00      	cmp	r3, #0
 8005898:	d017      	beq.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800589a:	4b4e      	ldr	r3, [pc, #312]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800589c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80058a0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058a8:	494a      	ldr	r1, [pc, #296]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058aa:	4313      	orrs	r3, r2
 80058ac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80058b8:	d101      	bne.n	80058be <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80058ba:	2301      	movs	r3, #1
 80058bc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d101      	bne.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80058c6:	2301      	movs	r3, #1
 80058c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d001      	beq.n	80058da <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80058d6:	2301      	movs	r3, #1
 80058d8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f003 0320 	and.w	r3, r3, #32
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	f000 808b 	beq.w	80059fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80058e8:	4b3a      	ldr	r3, [pc, #232]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058ec:	4a39      	ldr	r2, [pc, #228]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80058f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80058f4:	4b37      	ldr	r3, [pc, #220]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058fc:	60bb      	str	r3, [r7, #8]
 80058fe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005900:	4b35      	ldr	r3, [pc, #212]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a34      	ldr	r2, [pc, #208]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005906:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800590a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800590c:	f7fd face 	bl	8002eac <HAL_GetTick>
 8005910:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005912:	e008      	b.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005914:	f7fd faca 	bl	8002eac <HAL_GetTick>
 8005918:	4602      	mov	r2, r0
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	1ad3      	subs	r3, r2, r3
 800591e:	2b64      	cmp	r3, #100	@ 0x64
 8005920:	d901      	bls.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005922:	2303      	movs	r3, #3
 8005924:	e357      	b.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005926:	4b2c      	ldr	r3, [pc, #176]	@ (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800592e:	2b00      	cmp	r3, #0
 8005930:	d0f0      	beq.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005932:	4b28      	ldr	r3, [pc, #160]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005934:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005936:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800593a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d035      	beq.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005946:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800594a:	693a      	ldr	r2, [r7, #16]
 800594c:	429a      	cmp	r2, r3
 800594e:	d02e      	beq.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005950:	4b20      	ldr	r3, [pc, #128]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005952:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005954:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005958:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800595a:	4b1e      	ldr	r3, [pc, #120]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800595c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800595e:	4a1d      	ldr	r2, [pc, #116]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005960:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005964:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005966:	4b1b      	ldr	r3, [pc, #108]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005968:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800596a:	4a1a      	ldr	r2, [pc, #104]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800596c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005970:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005972:	4a18      	ldr	r2, [pc, #96]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005978:	4b16      	ldr	r3, [pc, #88]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800597a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800597c:	f003 0301 	and.w	r3, r3, #1
 8005980:	2b01      	cmp	r3, #1
 8005982:	d114      	bne.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005984:	f7fd fa92 	bl	8002eac <HAL_GetTick>
 8005988:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800598a:	e00a      	b.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800598c:	f7fd fa8e 	bl	8002eac <HAL_GetTick>
 8005990:	4602      	mov	r2, r0
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	1ad3      	subs	r3, r2, r3
 8005996:	f241 3288 	movw	r2, #5000	@ 0x1388
 800599a:	4293      	cmp	r3, r2
 800599c:	d901      	bls.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800599e:	2303      	movs	r3, #3
 80059a0:	e319      	b.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059a2:	4b0c      	ldr	r3, [pc, #48]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059a6:	f003 0302 	and.w	r3, r3, #2
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d0ee      	beq.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80059ba:	d111      	bne.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80059bc:	4b05      	ldr	r3, [pc, #20]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80059c8:	4b04      	ldr	r3, [pc, #16]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80059ca:	400b      	ands	r3, r1
 80059cc:	4901      	ldr	r1, [pc, #4]	@ (80059d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059ce:	4313      	orrs	r3, r2
 80059d0:	608b      	str	r3, [r1, #8]
 80059d2:	e00b      	b.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80059d4:	40023800 	.word	0x40023800
 80059d8:	40007000 	.word	0x40007000
 80059dc:	0ffffcff 	.word	0x0ffffcff
 80059e0:	4baa      	ldr	r3, [pc, #680]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	4aa9      	ldr	r2, [pc, #676]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80059e6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80059ea:	6093      	str	r3, [r2, #8]
 80059ec:	4ba7      	ldr	r3, [pc, #668]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80059ee:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059f8:	49a4      	ldr	r1, [pc, #656]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80059fa:	4313      	orrs	r3, r2
 80059fc:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f003 0310 	and.w	r3, r3, #16
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d010      	beq.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005a0a:	4ba0      	ldr	r3, [pc, #640]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a10:	4a9e      	ldr	r2, [pc, #632]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a12:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005a16:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8005a1a:	4b9c      	ldr	r3, [pc, #624]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a1c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a24:	4999      	ldr	r1, [pc, #612]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a26:	4313      	orrs	r3, r2
 8005a28:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d00a      	beq.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a38:	4b94      	ldr	r3, [pc, #592]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a3e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a46:	4991      	ldr	r1, [pc, #580]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d00a      	beq.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005a5a:	4b8c      	ldr	r3, [pc, #560]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a60:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005a68:	4988      	ldr	r1, [pc, #544]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d00a      	beq.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005a7c:	4b83      	ldr	r3, [pc, #524]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a82:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a8a:	4980      	ldr	r1, [pc, #512]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d00a      	beq.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005a9e:	4b7b      	ldr	r3, [pc, #492]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005aa4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005aac:	4977      	ldr	r1, [pc, #476]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d00a      	beq.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005ac0:	4b72      	ldr	r3, [pc, #456]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ac6:	f023 0203 	bic.w	r2, r3, #3
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ace:	496f      	ldr	r1, [pc, #444]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d00a      	beq.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005ae2:	4b6a      	ldr	r3, [pc, #424]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ae8:	f023 020c 	bic.w	r2, r3, #12
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005af0:	4966      	ldr	r1, [pc, #408]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005af2:	4313      	orrs	r3, r2
 8005af4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d00a      	beq.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005b04:	4b61      	ldr	r3, [pc, #388]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b0a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b12:	495e      	ldr	r1, [pc, #376]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b14:	4313      	orrs	r3, r2
 8005b16:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d00a      	beq.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005b26:	4b59      	ldr	r3, [pc, #356]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b2c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b34:	4955      	ldr	r1, [pc, #340]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b36:	4313      	orrs	r3, r2
 8005b38:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d00a      	beq.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005b48:	4b50      	ldr	r3, [pc, #320]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b4e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b56:	494d      	ldr	r1, [pc, #308]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d00a      	beq.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005b6a:	4b48      	ldr	r3, [pc, #288]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b70:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b78:	4944      	ldr	r1, [pc, #272]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d00a      	beq.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005b8c:	4b3f      	ldr	r3, [pc, #252]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b92:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b9a:	493c      	ldr	r1, [pc, #240]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d00a      	beq.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005bae:	4b37      	ldr	r3, [pc, #220]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bb4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bbc:	4933      	ldr	r1, [pc, #204]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d00a      	beq.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005bd0:	4b2e      	ldr	r3, [pc, #184]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bd6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005bde:	492b      	ldr	r1, [pc, #172]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005be0:	4313      	orrs	r3, r2
 8005be2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d011      	beq.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005bf2:	4b26      	ldr	r3, [pc, #152]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bf8:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c00:	4922      	ldr	r1, [pc, #136]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c02:	4313      	orrs	r3, r2
 8005c04:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c0c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005c10:	d101      	bne.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005c12:	2301      	movs	r3, #1
 8005c14:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f003 0308 	and.w	r3, r3, #8
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d001      	beq.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005c22:	2301      	movs	r3, #1
 8005c24:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d00a      	beq.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005c32:	4b16      	ldr	r3, [pc, #88]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c38:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c40:	4912      	ldr	r1, [pc, #72]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c42:	4313      	orrs	r3, r2
 8005c44:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d00b      	beq.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005c54:	4b0d      	ldr	r3, [pc, #52]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c5a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c64:	4909      	ldr	r1, [pc, #36]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c66:	4313      	orrs	r3, r2
 8005c68:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005c6c:	69fb      	ldr	r3, [r7, #28]
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	d006      	beq.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	f000 80d9 	beq.w	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005c80:	4b02      	ldr	r3, [pc, #8]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a01      	ldr	r2, [pc, #4]	@ (8005c8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005c86:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005c8a:	e001      	b.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8005c8c:	40023800 	.word	0x40023800
 8005c90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c92:	f7fd f90b 	bl	8002eac <HAL_GetTick>
 8005c96:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005c98:	e008      	b.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005c9a:	f7fd f907 	bl	8002eac <HAL_GetTick>
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	1ad3      	subs	r3, r2, r3
 8005ca4:	2b64      	cmp	r3, #100	@ 0x64
 8005ca6:	d901      	bls.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ca8:	2303      	movs	r3, #3
 8005caa:	e194      	b.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005cac:	4b6c      	ldr	r3, [pc, #432]	@ (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d1f0      	bne.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f003 0301 	and.w	r3, r3, #1
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d021      	beq.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d11d      	bne.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005ccc:	4b64      	ldr	r3, [pc, #400]	@ (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005cce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005cd2:	0c1b      	lsrs	r3, r3, #16
 8005cd4:	f003 0303 	and.w	r3, r3, #3
 8005cd8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005cda:	4b61      	ldr	r3, [pc, #388]	@ (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005cdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ce0:	0e1b      	lsrs	r3, r3, #24
 8005ce2:	f003 030f 	and.w	r3, r3, #15
 8005ce6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	019a      	lsls	r2, r3, #6
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	041b      	lsls	r3, r3, #16
 8005cf2:	431a      	orrs	r2, r3
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	061b      	lsls	r3, r3, #24
 8005cf8:	431a      	orrs	r2, r3
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	071b      	lsls	r3, r3, #28
 8005d00:	4957      	ldr	r1, [pc, #348]	@ (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d02:	4313      	orrs	r3, r2
 8005d04:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d004      	beq.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d18:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d1c:	d00a      	beq.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d02e      	beq.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d2e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005d32:	d129      	bne.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005d34:	4b4a      	ldr	r3, [pc, #296]	@ (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d3a:	0c1b      	lsrs	r3, r3, #16
 8005d3c:	f003 0303 	and.w	r3, r3, #3
 8005d40:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005d42:	4b47      	ldr	r3, [pc, #284]	@ (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d48:	0f1b      	lsrs	r3, r3, #28
 8005d4a:	f003 0307 	and.w	r3, r3, #7
 8005d4e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	019a      	lsls	r2, r3, #6
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	041b      	lsls	r3, r3, #16
 8005d5a:	431a      	orrs	r2, r3
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	68db      	ldr	r3, [r3, #12]
 8005d60:	061b      	lsls	r3, r3, #24
 8005d62:	431a      	orrs	r2, r3
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	071b      	lsls	r3, r3, #28
 8005d68:	493d      	ldr	r1, [pc, #244]	@ (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005d70:	4b3b      	ldr	r3, [pc, #236]	@ (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d72:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005d76:	f023 021f 	bic.w	r2, r3, #31
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d7e:	3b01      	subs	r3, #1
 8005d80:	4937      	ldr	r1, [pc, #220]	@ (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d82:	4313      	orrs	r3, r2
 8005d84:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d01d      	beq.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005d94:	4b32      	ldr	r3, [pc, #200]	@ (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005d96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d9a:	0e1b      	lsrs	r3, r3, #24
 8005d9c:	f003 030f 	and.w	r3, r3, #15
 8005da0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005da2:	4b2f      	ldr	r3, [pc, #188]	@ (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005da4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005da8:	0f1b      	lsrs	r3, r3, #28
 8005daa:	f003 0307 	and.w	r3, r3, #7
 8005dae:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	019a      	lsls	r2, r3, #6
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	691b      	ldr	r3, [r3, #16]
 8005dba:	041b      	lsls	r3, r3, #16
 8005dbc:	431a      	orrs	r2, r3
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	061b      	lsls	r3, r3, #24
 8005dc2:	431a      	orrs	r2, r3
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	071b      	lsls	r3, r3, #28
 8005dc8:	4925      	ldr	r1, [pc, #148]	@ (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d011      	beq.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	019a      	lsls	r2, r3, #6
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	691b      	ldr	r3, [r3, #16]
 8005de6:	041b      	lsls	r3, r3, #16
 8005de8:	431a      	orrs	r2, r3
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	061b      	lsls	r3, r3, #24
 8005df0:	431a      	orrs	r2, r3
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	071b      	lsls	r3, r3, #28
 8005df8:	4919      	ldr	r1, [pc, #100]	@ (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005e00:	4b17      	ldr	r3, [pc, #92]	@ (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a16      	ldr	r2, [pc, #88]	@ (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e06:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005e0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e0c:	f7fd f84e 	bl	8002eac <HAL_GetTick>
 8005e10:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e12:	e008      	b.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005e14:	f7fd f84a 	bl	8002eac <HAL_GetTick>
 8005e18:	4602      	mov	r2, r0
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	1ad3      	subs	r3, r2, r3
 8005e1e:	2b64      	cmp	r3, #100	@ 0x64
 8005e20:	d901      	bls.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e22:	2303      	movs	r3, #3
 8005e24:	e0d7      	b.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e26:	4b0e      	ldr	r3, [pc, #56]	@ (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d0f0      	beq.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005e32:	69bb      	ldr	r3, [r7, #24]
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	f040 80cd 	bne.w	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005e3a:	4b09      	ldr	r3, [pc, #36]	@ (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a08      	ldr	r2, [pc, #32]	@ (8005e60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005e40:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005e44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e46:	f7fd f831 	bl	8002eac <HAL_GetTick>
 8005e4a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005e4c:	e00a      	b.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005e4e:	f7fd f82d 	bl	8002eac <HAL_GetTick>
 8005e52:	4602      	mov	r2, r0
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	1ad3      	subs	r3, r2, r3
 8005e58:	2b64      	cmp	r3, #100	@ 0x64
 8005e5a:	d903      	bls.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e5c:	2303      	movs	r3, #3
 8005e5e:	e0ba      	b.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8005e60:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005e64:	4b5e      	ldr	r3, [pc, #376]	@ (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005e6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e70:	d0ed      	beq.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d003      	beq.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d009      	beq.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d02e      	beq.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d12a      	bne.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005e9a:	4b51      	ldr	r3, [pc, #324]	@ (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ea0:	0c1b      	lsrs	r3, r3, #16
 8005ea2:	f003 0303 	and.w	r3, r3, #3
 8005ea6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005ea8:	4b4d      	ldr	r3, [pc, #308]	@ (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005eae:	0f1b      	lsrs	r3, r3, #28
 8005eb0:	f003 0307 	and.w	r3, r3, #7
 8005eb4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	695b      	ldr	r3, [r3, #20]
 8005eba:	019a      	lsls	r2, r3, #6
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	041b      	lsls	r3, r3, #16
 8005ec0:	431a      	orrs	r2, r3
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	699b      	ldr	r3, [r3, #24]
 8005ec6:	061b      	lsls	r3, r3, #24
 8005ec8:	431a      	orrs	r2, r3
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	071b      	lsls	r3, r3, #28
 8005ece:	4944      	ldr	r1, [pc, #272]	@ (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005ed6:	4b42      	ldr	r3, [pc, #264]	@ (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005ed8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005edc:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ee4:	3b01      	subs	r3, #1
 8005ee6:	021b      	lsls	r3, r3, #8
 8005ee8:	493d      	ldr	r1, [pc, #244]	@ (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005eea:	4313      	orrs	r3, r2
 8005eec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d022      	beq.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f00:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f04:	d11d      	bne.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005f06:	4b36      	ldr	r3, [pc, #216]	@ (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f0c:	0e1b      	lsrs	r3, r3, #24
 8005f0e:	f003 030f 	and.w	r3, r3, #15
 8005f12:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005f14:	4b32      	ldr	r3, [pc, #200]	@ (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f1a:	0f1b      	lsrs	r3, r3, #28
 8005f1c:	f003 0307 	and.w	r3, r3, #7
 8005f20:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	695b      	ldr	r3, [r3, #20]
 8005f26:	019a      	lsls	r2, r3, #6
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6a1b      	ldr	r3, [r3, #32]
 8005f2c:	041b      	lsls	r3, r3, #16
 8005f2e:	431a      	orrs	r2, r3
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	061b      	lsls	r3, r3, #24
 8005f34:	431a      	orrs	r2, r3
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	071b      	lsls	r3, r3, #28
 8005f3a:	4929      	ldr	r1, [pc, #164]	@ (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f003 0308 	and.w	r3, r3, #8
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d028      	beq.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005f4e:	4b24      	ldr	r3, [pc, #144]	@ (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f54:	0e1b      	lsrs	r3, r3, #24
 8005f56:	f003 030f 	and.w	r3, r3, #15
 8005f5a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005f5c:	4b20      	ldr	r3, [pc, #128]	@ (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f62:	0c1b      	lsrs	r3, r3, #16
 8005f64:	f003 0303 	and.w	r3, r3, #3
 8005f68:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	695b      	ldr	r3, [r3, #20]
 8005f6e:	019a      	lsls	r2, r3, #6
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	041b      	lsls	r3, r3, #16
 8005f74:	431a      	orrs	r2, r3
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	061b      	lsls	r3, r3, #24
 8005f7a:	431a      	orrs	r2, r3
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	69db      	ldr	r3, [r3, #28]
 8005f80:	071b      	lsls	r3, r3, #28
 8005f82:	4917      	ldr	r1, [pc, #92]	@ (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f84:	4313      	orrs	r3, r2
 8005f86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005f8a:	4b15      	ldr	r3, [pc, #84]	@ (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005f90:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f98:	4911      	ldr	r1, [pc, #68]	@ (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005fa0:	4b0f      	ldr	r3, [pc, #60]	@ (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a0e      	ldr	r2, [pc, #56]	@ (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005fa6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005faa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fac:	f7fc ff7e 	bl	8002eac <HAL_GetTick>
 8005fb0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005fb2:	e008      	b.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005fb4:	f7fc ff7a 	bl	8002eac <HAL_GetTick>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	1ad3      	subs	r3, r2, r3
 8005fbe:	2b64      	cmp	r3, #100	@ 0x64
 8005fc0:	d901      	bls.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005fc2:	2303      	movs	r3, #3
 8005fc4:	e007      	b.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005fc6:	4b06      	ldr	r3, [pc, #24]	@ (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005fce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005fd2:	d1ef      	bne.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8005fd4:	2300      	movs	r3, #0
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3720      	adds	r7, #32
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}
 8005fde:	bf00      	nop
 8005fe0:	40023800 	.word	0x40023800

08005fe4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b082      	sub	sp, #8
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d101      	bne.n	8005ff6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e049      	b.n	800608a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d106      	bne.n	8006010 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f7fc fd26 	bl	8002a5c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2202      	movs	r2, #2
 8006014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	3304      	adds	r3, #4
 8006020:	4619      	mov	r1, r3
 8006022:	4610      	mov	r0, r2
 8006024:	f000 fa44 	bl	80064b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2201      	movs	r2, #1
 800602c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2201      	movs	r2, #1
 8006034:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2201      	movs	r2, #1
 800603c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2201      	movs	r2, #1
 8006044:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2201      	movs	r2, #1
 800604c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2201      	movs	r2, #1
 8006054:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2201      	movs	r2, #1
 800605c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2201      	movs	r2, #1
 8006064:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2201      	movs	r2, #1
 800606c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2201      	movs	r2, #1
 8006074:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2201      	movs	r2, #1
 800607c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006088:	2300      	movs	r3, #0
}
 800608a:	4618      	mov	r0, r3
 800608c:	3708      	adds	r7, #8
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}
	...

08006094 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b084      	sub	sp, #16
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
 800609c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d109      	bne.n	80060b8 <HAL_TIM_PWM_Start+0x24>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80060aa:	b2db      	uxtb	r3, r3
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	bf14      	ite	ne
 80060b0:	2301      	movne	r3, #1
 80060b2:	2300      	moveq	r3, #0
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	e03c      	b.n	8006132 <HAL_TIM_PWM_Start+0x9e>
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	2b04      	cmp	r3, #4
 80060bc:	d109      	bne.n	80060d2 <HAL_TIM_PWM_Start+0x3e>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	bf14      	ite	ne
 80060ca:	2301      	movne	r3, #1
 80060cc:	2300      	moveq	r3, #0
 80060ce:	b2db      	uxtb	r3, r3
 80060d0:	e02f      	b.n	8006132 <HAL_TIM_PWM_Start+0x9e>
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	2b08      	cmp	r3, #8
 80060d6:	d109      	bne.n	80060ec <HAL_TIM_PWM_Start+0x58>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	bf14      	ite	ne
 80060e4:	2301      	movne	r3, #1
 80060e6:	2300      	moveq	r3, #0
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	e022      	b.n	8006132 <HAL_TIM_PWM_Start+0x9e>
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	2b0c      	cmp	r3, #12
 80060f0:	d109      	bne.n	8006106 <HAL_TIM_PWM_Start+0x72>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	bf14      	ite	ne
 80060fe:	2301      	movne	r3, #1
 8006100:	2300      	moveq	r3, #0
 8006102:	b2db      	uxtb	r3, r3
 8006104:	e015      	b.n	8006132 <HAL_TIM_PWM_Start+0x9e>
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	2b10      	cmp	r3, #16
 800610a:	d109      	bne.n	8006120 <HAL_TIM_PWM_Start+0x8c>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006112:	b2db      	uxtb	r3, r3
 8006114:	2b01      	cmp	r3, #1
 8006116:	bf14      	ite	ne
 8006118:	2301      	movne	r3, #1
 800611a:	2300      	moveq	r3, #0
 800611c:	b2db      	uxtb	r3, r3
 800611e:	e008      	b.n	8006132 <HAL_TIM_PWM_Start+0x9e>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006126:	b2db      	uxtb	r3, r3
 8006128:	2b01      	cmp	r3, #1
 800612a:	bf14      	ite	ne
 800612c:	2301      	movne	r3, #1
 800612e:	2300      	moveq	r3, #0
 8006130:	b2db      	uxtb	r3, r3
 8006132:	2b00      	cmp	r3, #0
 8006134:	d001      	beq.n	800613a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	e092      	b.n	8006260 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d104      	bne.n	800614a <HAL_TIM_PWM_Start+0xb6>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2202      	movs	r2, #2
 8006144:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006148:	e023      	b.n	8006192 <HAL_TIM_PWM_Start+0xfe>
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	2b04      	cmp	r3, #4
 800614e:	d104      	bne.n	800615a <HAL_TIM_PWM_Start+0xc6>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2202      	movs	r2, #2
 8006154:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006158:	e01b      	b.n	8006192 <HAL_TIM_PWM_Start+0xfe>
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	2b08      	cmp	r3, #8
 800615e:	d104      	bne.n	800616a <HAL_TIM_PWM_Start+0xd6>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2202      	movs	r2, #2
 8006164:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006168:	e013      	b.n	8006192 <HAL_TIM_PWM_Start+0xfe>
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	2b0c      	cmp	r3, #12
 800616e:	d104      	bne.n	800617a <HAL_TIM_PWM_Start+0xe6>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2202      	movs	r2, #2
 8006174:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006178:	e00b      	b.n	8006192 <HAL_TIM_PWM_Start+0xfe>
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	2b10      	cmp	r3, #16
 800617e:	d104      	bne.n	800618a <HAL_TIM_PWM_Start+0xf6>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2202      	movs	r2, #2
 8006184:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006188:	e003      	b.n	8006192 <HAL_TIM_PWM_Start+0xfe>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2202      	movs	r2, #2
 800618e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	2201      	movs	r2, #1
 8006198:	6839      	ldr	r1, [r7, #0]
 800619a:	4618      	mov	r0, r3
 800619c:	f000 fc8c 	bl	8006ab8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a30      	ldr	r2, [pc, #192]	@ (8006268 <HAL_TIM_PWM_Start+0x1d4>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d004      	beq.n	80061b4 <HAL_TIM_PWM_Start+0x120>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a2f      	ldr	r2, [pc, #188]	@ (800626c <HAL_TIM_PWM_Start+0x1d8>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d101      	bne.n	80061b8 <HAL_TIM_PWM_Start+0x124>
 80061b4:	2301      	movs	r3, #1
 80061b6:	e000      	b.n	80061ba <HAL_TIM_PWM_Start+0x126>
 80061b8:	2300      	movs	r3, #0
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d007      	beq.n	80061ce <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80061cc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a25      	ldr	r2, [pc, #148]	@ (8006268 <HAL_TIM_PWM_Start+0x1d4>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d022      	beq.n	800621e <HAL_TIM_PWM_Start+0x18a>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061e0:	d01d      	beq.n	800621e <HAL_TIM_PWM_Start+0x18a>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a22      	ldr	r2, [pc, #136]	@ (8006270 <HAL_TIM_PWM_Start+0x1dc>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d018      	beq.n	800621e <HAL_TIM_PWM_Start+0x18a>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a20      	ldr	r2, [pc, #128]	@ (8006274 <HAL_TIM_PWM_Start+0x1e0>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d013      	beq.n	800621e <HAL_TIM_PWM_Start+0x18a>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a1f      	ldr	r2, [pc, #124]	@ (8006278 <HAL_TIM_PWM_Start+0x1e4>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d00e      	beq.n	800621e <HAL_TIM_PWM_Start+0x18a>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a19      	ldr	r2, [pc, #100]	@ (800626c <HAL_TIM_PWM_Start+0x1d8>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d009      	beq.n	800621e <HAL_TIM_PWM_Start+0x18a>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a1b      	ldr	r2, [pc, #108]	@ (800627c <HAL_TIM_PWM_Start+0x1e8>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d004      	beq.n	800621e <HAL_TIM_PWM_Start+0x18a>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a19      	ldr	r2, [pc, #100]	@ (8006280 <HAL_TIM_PWM_Start+0x1ec>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d115      	bne.n	800624a <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	689a      	ldr	r2, [r3, #8]
 8006224:	4b17      	ldr	r3, [pc, #92]	@ (8006284 <HAL_TIM_PWM_Start+0x1f0>)
 8006226:	4013      	ands	r3, r2
 8006228:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2b06      	cmp	r3, #6
 800622e:	d015      	beq.n	800625c <HAL_TIM_PWM_Start+0x1c8>
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006236:	d011      	beq.n	800625c <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f042 0201 	orr.w	r2, r2, #1
 8006246:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006248:	e008      	b.n	800625c <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f042 0201 	orr.w	r2, r2, #1
 8006258:	601a      	str	r2, [r3, #0]
 800625a:	e000      	b.n	800625e <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800625c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800625e:	2300      	movs	r3, #0
}
 8006260:	4618      	mov	r0, r3
 8006262:	3710      	adds	r7, #16
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}
 8006268:	40010000 	.word	0x40010000
 800626c:	40010400 	.word	0x40010400
 8006270:	40000400 	.word	0x40000400
 8006274:	40000800 	.word	0x40000800
 8006278:	40000c00 	.word	0x40000c00
 800627c:	40014000 	.word	0x40014000
 8006280:	40001800 	.word	0x40001800
 8006284:	00010007 	.word	0x00010007

08006288 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b086      	sub	sp, #24
 800628c:	af00      	add	r7, sp, #0
 800628e:	60f8      	str	r0, [r7, #12]
 8006290:	60b9      	str	r1, [r7, #8]
 8006292:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006294:	2300      	movs	r3, #0
 8006296:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800629e:	2b01      	cmp	r3, #1
 80062a0:	d101      	bne.n	80062a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80062a2:	2302      	movs	r3, #2
 80062a4:	e0ff      	b.n	80064a6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2201      	movs	r2, #1
 80062aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2b14      	cmp	r3, #20
 80062b2:	f200 80f0 	bhi.w	8006496 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80062b6:	a201      	add	r2, pc, #4	@ (adr r2, 80062bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80062b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062bc:	08006311 	.word	0x08006311
 80062c0:	08006497 	.word	0x08006497
 80062c4:	08006497 	.word	0x08006497
 80062c8:	08006497 	.word	0x08006497
 80062cc:	08006351 	.word	0x08006351
 80062d0:	08006497 	.word	0x08006497
 80062d4:	08006497 	.word	0x08006497
 80062d8:	08006497 	.word	0x08006497
 80062dc:	08006393 	.word	0x08006393
 80062e0:	08006497 	.word	0x08006497
 80062e4:	08006497 	.word	0x08006497
 80062e8:	08006497 	.word	0x08006497
 80062ec:	080063d3 	.word	0x080063d3
 80062f0:	08006497 	.word	0x08006497
 80062f4:	08006497 	.word	0x08006497
 80062f8:	08006497 	.word	0x08006497
 80062fc:	08006415 	.word	0x08006415
 8006300:	08006497 	.word	0x08006497
 8006304:	08006497 	.word	0x08006497
 8006308:	08006497 	.word	0x08006497
 800630c:	08006455 	.word	0x08006455
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	68b9      	ldr	r1, [r7, #8]
 8006316:	4618      	mov	r0, r3
 8006318:	f000 f970 	bl	80065fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	699a      	ldr	r2, [r3, #24]
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f042 0208 	orr.w	r2, r2, #8
 800632a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	699a      	ldr	r2, [r3, #24]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f022 0204 	bic.w	r2, r2, #4
 800633a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	6999      	ldr	r1, [r3, #24]
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	691a      	ldr	r2, [r3, #16]
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	430a      	orrs	r2, r1
 800634c:	619a      	str	r2, [r3, #24]
      break;
 800634e:	e0a5      	b.n	800649c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	68b9      	ldr	r1, [r7, #8]
 8006356:	4618      	mov	r0, r3
 8006358:	f000 f9c2 	bl	80066e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	699a      	ldr	r2, [r3, #24]
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800636a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	699a      	ldr	r2, [r3, #24]
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800637a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	6999      	ldr	r1, [r3, #24]
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	691b      	ldr	r3, [r3, #16]
 8006386:	021a      	lsls	r2, r3, #8
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	430a      	orrs	r2, r1
 800638e:	619a      	str	r2, [r3, #24]
      break;
 8006390:	e084      	b.n	800649c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	68b9      	ldr	r1, [r7, #8]
 8006398:	4618      	mov	r0, r3
 800639a:	f000 fa19 	bl	80067d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	69da      	ldr	r2, [r3, #28]
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f042 0208 	orr.w	r2, r2, #8
 80063ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	69da      	ldr	r2, [r3, #28]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f022 0204 	bic.w	r2, r2, #4
 80063bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	69d9      	ldr	r1, [r3, #28]
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	691a      	ldr	r2, [r3, #16]
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	430a      	orrs	r2, r1
 80063ce:	61da      	str	r2, [r3, #28]
      break;
 80063d0:	e064      	b.n	800649c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	68b9      	ldr	r1, [r7, #8]
 80063d8:	4618      	mov	r0, r3
 80063da:	f000 fa6f 	bl	80068bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	69da      	ldr	r2, [r3, #28]
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80063ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	69da      	ldr	r2, [r3, #28]
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80063fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	69d9      	ldr	r1, [r3, #28]
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	691b      	ldr	r3, [r3, #16]
 8006408:	021a      	lsls	r2, r3, #8
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	430a      	orrs	r2, r1
 8006410:	61da      	str	r2, [r3, #28]
      break;
 8006412:	e043      	b.n	800649c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	68b9      	ldr	r1, [r7, #8]
 800641a:	4618      	mov	r0, r3
 800641c:	f000 faa6 	bl	800696c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f042 0208 	orr.w	r2, r2, #8
 800642e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f022 0204 	bic.w	r2, r2, #4
 800643e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	691a      	ldr	r2, [r3, #16]
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	430a      	orrs	r2, r1
 8006450:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006452:	e023      	b.n	800649c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	68b9      	ldr	r1, [r7, #8]
 800645a:	4618      	mov	r0, r3
 800645c:	f000 fad8 	bl	8006a10 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800646e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800647e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	691b      	ldr	r3, [r3, #16]
 800648a:	021a      	lsls	r2, r3, #8
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	430a      	orrs	r2, r1
 8006492:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006494:	e002      	b.n	800649c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	75fb      	strb	r3, [r7, #23]
      break;
 800649a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	2200      	movs	r2, #0
 80064a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80064a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3718      	adds	r7, #24
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}
 80064ae:	bf00      	nop

080064b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b085      	sub	sp, #20
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	4a43      	ldr	r2, [pc, #268]	@ (80065d0 <TIM_Base_SetConfig+0x120>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d013      	beq.n	80064f0 <TIM_Base_SetConfig+0x40>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064ce:	d00f      	beq.n	80064f0 <TIM_Base_SetConfig+0x40>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	4a40      	ldr	r2, [pc, #256]	@ (80065d4 <TIM_Base_SetConfig+0x124>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d00b      	beq.n	80064f0 <TIM_Base_SetConfig+0x40>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	4a3f      	ldr	r2, [pc, #252]	@ (80065d8 <TIM_Base_SetConfig+0x128>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d007      	beq.n	80064f0 <TIM_Base_SetConfig+0x40>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	4a3e      	ldr	r2, [pc, #248]	@ (80065dc <TIM_Base_SetConfig+0x12c>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d003      	beq.n	80064f0 <TIM_Base_SetConfig+0x40>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	4a3d      	ldr	r2, [pc, #244]	@ (80065e0 <TIM_Base_SetConfig+0x130>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d108      	bne.n	8006502 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	68fa      	ldr	r2, [r7, #12]
 80064fe:	4313      	orrs	r3, r2
 8006500:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	4a32      	ldr	r2, [pc, #200]	@ (80065d0 <TIM_Base_SetConfig+0x120>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d02b      	beq.n	8006562 <TIM_Base_SetConfig+0xb2>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006510:	d027      	beq.n	8006562 <TIM_Base_SetConfig+0xb2>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	4a2f      	ldr	r2, [pc, #188]	@ (80065d4 <TIM_Base_SetConfig+0x124>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d023      	beq.n	8006562 <TIM_Base_SetConfig+0xb2>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	4a2e      	ldr	r2, [pc, #184]	@ (80065d8 <TIM_Base_SetConfig+0x128>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d01f      	beq.n	8006562 <TIM_Base_SetConfig+0xb2>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	4a2d      	ldr	r2, [pc, #180]	@ (80065dc <TIM_Base_SetConfig+0x12c>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d01b      	beq.n	8006562 <TIM_Base_SetConfig+0xb2>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	4a2c      	ldr	r2, [pc, #176]	@ (80065e0 <TIM_Base_SetConfig+0x130>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d017      	beq.n	8006562 <TIM_Base_SetConfig+0xb2>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	4a2b      	ldr	r2, [pc, #172]	@ (80065e4 <TIM_Base_SetConfig+0x134>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d013      	beq.n	8006562 <TIM_Base_SetConfig+0xb2>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	4a2a      	ldr	r2, [pc, #168]	@ (80065e8 <TIM_Base_SetConfig+0x138>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d00f      	beq.n	8006562 <TIM_Base_SetConfig+0xb2>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	4a29      	ldr	r2, [pc, #164]	@ (80065ec <TIM_Base_SetConfig+0x13c>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d00b      	beq.n	8006562 <TIM_Base_SetConfig+0xb2>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	4a28      	ldr	r2, [pc, #160]	@ (80065f0 <TIM_Base_SetConfig+0x140>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d007      	beq.n	8006562 <TIM_Base_SetConfig+0xb2>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	4a27      	ldr	r2, [pc, #156]	@ (80065f4 <TIM_Base_SetConfig+0x144>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d003      	beq.n	8006562 <TIM_Base_SetConfig+0xb2>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	4a26      	ldr	r2, [pc, #152]	@ (80065f8 <TIM_Base_SetConfig+0x148>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d108      	bne.n	8006574 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006568:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	68db      	ldr	r3, [r3, #12]
 800656e:	68fa      	ldr	r2, [r7, #12]
 8006570:	4313      	orrs	r3, r2
 8006572:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	695b      	ldr	r3, [r3, #20]
 800657e:	4313      	orrs	r3, r2
 8006580:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	689a      	ldr	r2, [r3, #8]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	681a      	ldr	r2, [r3, #0]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	4a0e      	ldr	r2, [pc, #56]	@ (80065d0 <TIM_Base_SetConfig+0x120>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d003      	beq.n	80065a2 <TIM_Base_SetConfig+0xf2>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	4a10      	ldr	r2, [pc, #64]	@ (80065e0 <TIM_Base_SetConfig+0x130>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d103      	bne.n	80065aa <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	691a      	ldr	r2, [r3, #16]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f043 0204 	orr.w	r2, r3, #4
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2201      	movs	r2, #1
 80065ba:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	68fa      	ldr	r2, [r7, #12]
 80065c0:	601a      	str	r2, [r3, #0]
}
 80065c2:	bf00      	nop
 80065c4:	3714      	adds	r7, #20
 80065c6:	46bd      	mov	sp, r7
 80065c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065cc:	4770      	bx	lr
 80065ce:	bf00      	nop
 80065d0:	40010000 	.word	0x40010000
 80065d4:	40000400 	.word	0x40000400
 80065d8:	40000800 	.word	0x40000800
 80065dc:	40000c00 	.word	0x40000c00
 80065e0:	40010400 	.word	0x40010400
 80065e4:	40014000 	.word	0x40014000
 80065e8:	40014400 	.word	0x40014400
 80065ec:	40014800 	.word	0x40014800
 80065f0:	40001800 	.word	0x40001800
 80065f4:	40001c00 	.word	0x40001c00
 80065f8:	40002000 	.word	0x40002000

080065fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b087      	sub	sp, #28
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6a1b      	ldr	r3, [r3, #32]
 800660a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6a1b      	ldr	r3, [r3, #32]
 8006610:	f023 0201 	bic.w	r2, r3, #1
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	699b      	ldr	r3, [r3, #24]
 8006622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006624:	68fa      	ldr	r2, [r7, #12]
 8006626:	4b2b      	ldr	r3, [pc, #172]	@ (80066d4 <TIM_OC1_SetConfig+0xd8>)
 8006628:	4013      	ands	r3, r2
 800662a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f023 0303 	bic.w	r3, r3, #3
 8006632:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	68fa      	ldr	r2, [r7, #12]
 800663a:	4313      	orrs	r3, r2
 800663c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	f023 0302 	bic.w	r3, r3, #2
 8006644:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	697a      	ldr	r2, [r7, #20]
 800664c:	4313      	orrs	r3, r2
 800664e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	4a21      	ldr	r2, [pc, #132]	@ (80066d8 <TIM_OC1_SetConfig+0xdc>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d003      	beq.n	8006660 <TIM_OC1_SetConfig+0x64>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	4a20      	ldr	r2, [pc, #128]	@ (80066dc <TIM_OC1_SetConfig+0xe0>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d10c      	bne.n	800667a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	f023 0308 	bic.w	r3, r3, #8
 8006666:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	68db      	ldr	r3, [r3, #12]
 800666c:	697a      	ldr	r2, [r7, #20]
 800666e:	4313      	orrs	r3, r2
 8006670:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	f023 0304 	bic.w	r3, r3, #4
 8006678:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	4a16      	ldr	r2, [pc, #88]	@ (80066d8 <TIM_OC1_SetConfig+0xdc>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d003      	beq.n	800668a <TIM_OC1_SetConfig+0x8e>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	4a15      	ldr	r2, [pc, #84]	@ (80066dc <TIM_OC1_SetConfig+0xe0>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d111      	bne.n	80066ae <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006690:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006698:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	695b      	ldr	r3, [r3, #20]
 800669e:	693a      	ldr	r2, [r7, #16]
 80066a0:	4313      	orrs	r3, r2
 80066a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	699b      	ldr	r3, [r3, #24]
 80066a8:	693a      	ldr	r2, [r7, #16]
 80066aa:	4313      	orrs	r3, r2
 80066ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	693a      	ldr	r2, [r7, #16]
 80066b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	68fa      	ldr	r2, [r7, #12]
 80066b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	685a      	ldr	r2, [r3, #4]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	697a      	ldr	r2, [r7, #20]
 80066c6:	621a      	str	r2, [r3, #32]
}
 80066c8:	bf00      	nop
 80066ca:	371c      	adds	r7, #28
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr
 80066d4:	fffeff8f 	.word	0xfffeff8f
 80066d8:	40010000 	.word	0x40010000
 80066dc:	40010400 	.word	0x40010400

080066e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b087      	sub	sp, #28
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6a1b      	ldr	r3, [r3, #32]
 80066ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6a1b      	ldr	r3, [r3, #32]
 80066f4:	f023 0210 	bic.w	r2, r3, #16
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	699b      	ldr	r3, [r3, #24]
 8006706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006708:	68fa      	ldr	r2, [r7, #12]
 800670a:	4b2e      	ldr	r3, [pc, #184]	@ (80067c4 <TIM_OC2_SetConfig+0xe4>)
 800670c:	4013      	ands	r3, r2
 800670e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006716:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	021b      	lsls	r3, r3, #8
 800671e:	68fa      	ldr	r2, [r7, #12]
 8006720:	4313      	orrs	r3, r2
 8006722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	f023 0320 	bic.w	r3, r3, #32
 800672a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	011b      	lsls	r3, r3, #4
 8006732:	697a      	ldr	r2, [r7, #20]
 8006734:	4313      	orrs	r3, r2
 8006736:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	4a23      	ldr	r2, [pc, #140]	@ (80067c8 <TIM_OC2_SetConfig+0xe8>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d003      	beq.n	8006748 <TIM_OC2_SetConfig+0x68>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	4a22      	ldr	r2, [pc, #136]	@ (80067cc <TIM_OC2_SetConfig+0xec>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d10d      	bne.n	8006764 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800674e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	68db      	ldr	r3, [r3, #12]
 8006754:	011b      	lsls	r3, r3, #4
 8006756:	697a      	ldr	r2, [r7, #20]
 8006758:	4313      	orrs	r3, r2
 800675a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006762:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	4a18      	ldr	r2, [pc, #96]	@ (80067c8 <TIM_OC2_SetConfig+0xe8>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d003      	beq.n	8006774 <TIM_OC2_SetConfig+0x94>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	4a17      	ldr	r2, [pc, #92]	@ (80067cc <TIM_OC2_SetConfig+0xec>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d113      	bne.n	800679c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800677a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006782:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	695b      	ldr	r3, [r3, #20]
 8006788:	009b      	lsls	r3, r3, #2
 800678a:	693a      	ldr	r2, [r7, #16]
 800678c:	4313      	orrs	r3, r2
 800678e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	699b      	ldr	r3, [r3, #24]
 8006794:	009b      	lsls	r3, r3, #2
 8006796:	693a      	ldr	r2, [r7, #16]
 8006798:	4313      	orrs	r3, r2
 800679a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	693a      	ldr	r2, [r7, #16]
 80067a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	68fa      	ldr	r2, [r7, #12]
 80067a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	685a      	ldr	r2, [r3, #4]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	697a      	ldr	r2, [r7, #20]
 80067b4:	621a      	str	r2, [r3, #32]
}
 80067b6:	bf00      	nop
 80067b8:	371c      	adds	r7, #28
 80067ba:	46bd      	mov	sp, r7
 80067bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c0:	4770      	bx	lr
 80067c2:	bf00      	nop
 80067c4:	feff8fff 	.word	0xfeff8fff
 80067c8:	40010000 	.word	0x40010000
 80067cc:	40010400 	.word	0x40010400

080067d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b087      	sub	sp, #28
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6a1b      	ldr	r3, [r3, #32]
 80067de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6a1b      	ldr	r3, [r3, #32]
 80067e4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	69db      	ldr	r3, [r3, #28]
 80067f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80067f8:	68fa      	ldr	r2, [r7, #12]
 80067fa:	4b2d      	ldr	r3, [pc, #180]	@ (80068b0 <TIM_OC3_SetConfig+0xe0>)
 80067fc:	4013      	ands	r3, r2
 80067fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f023 0303 	bic.w	r3, r3, #3
 8006806:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	68fa      	ldr	r2, [r7, #12]
 800680e:	4313      	orrs	r3, r2
 8006810:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006818:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	689b      	ldr	r3, [r3, #8]
 800681e:	021b      	lsls	r3, r3, #8
 8006820:	697a      	ldr	r2, [r7, #20]
 8006822:	4313      	orrs	r3, r2
 8006824:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	4a22      	ldr	r2, [pc, #136]	@ (80068b4 <TIM_OC3_SetConfig+0xe4>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d003      	beq.n	8006836 <TIM_OC3_SetConfig+0x66>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	4a21      	ldr	r2, [pc, #132]	@ (80068b8 <TIM_OC3_SetConfig+0xe8>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d10d      	bne.n	8006852 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800683c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	68db      	ldr	r3, [r3, #12]
 8006842:	021b      	lsls	r3, r3, #8
 8006844:	697a      	ldr	r2, [r7, #20]
 8006846:	4313      	orrs	r3, r2
 8006848:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006850:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	4a17      	ldr	r2, [pc, #92]	@ (80068b4 <TIM_OC3_SetConfig+0xe4>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d003      	beq.n	8006862 <TIM_OC3_SetConfig+0x92>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	4a16      	ldr	r2, [pc, #88]	@ (80068b8 <TIM_OC3_SetConfig+0xe8>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d113      	bne.n	800688a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006868:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006870:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	695b      	ldr	r3, [r3, #20]
 8006876:	011b      	lsls	r3, r3, #4
 8006878:	693a      	ldr	r2, [r7, #16]
 800687a:	4313      	orrs	r3, r2
 800687c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	699b      	ldr	r3, [r3, #24]
 8006882:	011b      	lsls	r3, r3, #4
 8006884:	693a      	ldr	r2, [r7, #16]
 8006886:	4313      	orrs	r3, r2
 8006888:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	693a      	ldr	r2, [r7, #16]
 800688e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	68fa      	ldr	r2, [r7, #12]
 8006894:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	685a      	ldr	r2, [r3, #4]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	697a      	ldr	r2, [r7, #20]
 80068a2:	621a      	str	r2, [r3, #32]
}
 80068a4:	bf00      	nop
 80068a6:	371c      	adds	r7, #28
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr
 80068b0:	fffeff8f 	.word	0xfffeff8f
 80068b4:	40010000 	.word	0x40010000
 80068b8:	40010400 	.word	0x40010400

080068bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80068bc:	b480      	push	{r7}
 80068be:	b087      	sub	sp, #28
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6a1b      	ldr	r3, [r3, #32]
 80068ca:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6a1b      	ldr	r3, [r3, #32]
 80068d0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	69db      	ldr	r3, [r3, #28]
 80068e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80068e4:	68fa      	ldr	r2, [r7, #12]
 80068e6:	4b1e      	ldr	r3, [pc, #120]	@ (8006960 <TIM_OC4_SetConfig+0xa4>)
 80068e8:	4013      	ands	r3, r2
 80068ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80068f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	021b      	lsls	r3, r3, #8
 80068fa:	68fa      	ldr	r2, [r7, #12]
 80068fc:	4313      	orrs	r3, r2
 80068fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006906:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	031b      	lsls	r3, r3, #12
 800690e:	693a      	ldr	r2, [r7, #16]
 8006910:	4313      	orrs	r3, r2
 8006912:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	4a13      	ldr	r2, [pc, #76]	@ (8006964 <TIM_OC4_SetConfig+0xa8>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d003      	beq.n	8006924 <TIM_OC4_SetConfig+0x68>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	4a12      	ldr	r2, [pc, #72]	@ (8006968 <TIM_OC4_SetConfig+0xac>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d109      	bne.n	8006938 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800692a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	695b      	ldr	r3, [r3, #20]
 8006930:	019b      	lsls	r3, r3, #6
 8006932:	697a      	ldr	r2, [r7, #20]
 8006934:	4313      	orrs	r3, r2
 8006936:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	697a      	ldr	r2, [r7, #20]
 800693c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	68fa      	ldr	r2, [r7, #12]
 8006942:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	685a      	ldr	r2, [r3, #4]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	693a      	ldr	r2, [r7, #16]
 8006950:	621a      	str	r2, [r3, #32]
}
 8006952:	bf00      	nop
 8006954:	371c      	adds	r7, #28
 8006956:	46bd      	mov	sp, r7
 8006958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695c:	4770      	bx	lr
 800695e:	bf00      	nop
 8006960:	feff8fff 	.word	0xfeff8fff
 8006964:	40010000 	.word	0x40010000
 8006968:	40010400 	.word	0x40010400

0800696c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800696c:	b480      	push	{r7}
 800696e:	b087      	sub	sp, #28
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
 8006974:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6a1b      	ldr	r3, [r3, #32]
 800697a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6a1b      	ldr	r3, [r3, #32]
 8006980:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006994:	68fa      	ldr	r2, [r7, #12]
 8006996:	4b1b      	ldr	r3, [pc, #108]	@ (8006a04 <TIM_OC5_SetConfig+0x98>)
 8006998:	4013      	ands	r3, r2
 800699a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	68fa      	ldr	r2, [r7, #12]
 80069a2:	4313      	orrs	r3, r2
 80069a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80069ac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	041b      	lsls	r3, r3, #16
 80069b4:	693a      	ldr	r2, [r7, #16]
 80069b6:	4313      	orrs	r3, r2
 80069b8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	4a12      	ldr	r2, [pc, #72]	@ (8006a08 <TIM_OC5_SetConfig+0x9c>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d003      	beq.n	80069ca <TIM_OC5_SetConfig+0x5e>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	4a11      	ldr	r2, [pc, #68]	@ (8006a0c <TIM_OC5_SetConfig+0xa0>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d109      	bne.n	80069de <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80069d0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	695b      	ldr	r3, [r3, #20]
 80069d6:	021b      	lsls	r3, r3, #8
 80069d8:	697a      	ldr	r2, [r7, #20]
 80069da:	4313      	orrs	r3, r2
 80069dc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	697a      	ldr	r2, [r7, #20]
 80069e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	68fa      	ldr	r2, [r7, #12]
 80069e8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	685a      	ldr	r2, [r3, #4]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	693a      	ldr	r2, [r7, #16]
 80069f6:	621a      	str	r2, [r3, #32]
}
 80069f8:	bf00      	nop
 80069fa:	371c      	adds	r7, #28
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr
 8006a04:	fffeff8f 	.word	0xfffeff8f
 8006a08:	40010000 	.word	0x40010000
 8006a0c:	40010400 	.word	0x40010400

08006a10 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b087      	sub	sp, #28
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
 8006a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6a1b      	ldr	r3, [r3, #32]
 8006a1e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6a1b      	ldr	r3, [r3, #32]
 8006a24:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006a38:	68fa      	ldr	r2, [r7, #12]
 8006a3a:	4b1c      	ldr	r3, [pc, #112]	@ (8006aac <TIM_OC6_SetConfig+0x9c>)
 8006a3c:	4013      	ands	r3, r2
 8006a3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	021b      	lsls	r3, r3, #8
 8006a46:	68fa      	ldr	r2, [r7, #12]
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006a52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	051b      	lsls	r3, r3, #20
 8006a5a:	693a      	ldr	r2, [r7, #16]
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	4a13      	ldr	r2, [pc, #76]	@ (8006ab0 <TIM_OC6_SetConfig+0xa0>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d003      	beq.n	8006a70 <TIM_OC6_SetConfig+0x60>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	4a12      	ldr	r2, [pc, #72]	@ (8006ab4 <TIM_OC6_SetConfig+0xa4>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d109      	bne.n	8006a84 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006a76:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	695b      	ldr	r3, [r3, #20]
 8006a7c:	029b      	lsls	r3, r3, #10
 8006a7e:	697a      	ldr	r2, [r7, #20]
 8006a80:	4313      	orrs	r3, r2
 8006a82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	697a      	ldr	r2, [r7, #20]
 8006a88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	68fa      	ldr	r2, [r7, #12]
 8006a8e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	685a      	ldr	r2, [r3, #4]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	693a      	ldr	r2, [r7, #16]
 8006a9c:	621a      	str	r2, [r3, #32]
}
 8006a9e:	bf00      	nop
 8006aa0:	371c      	adds	r7, #28
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa8:	4770      	bx	lr
 8006aaa:	bf00      	nop
 8006aac:	feff8fff 	.word	0xfeff8fff
 8006ab0:	40010000 	.word	0x40010000
 8006ab4:	40010400 	.word	0x40010400

08006ab8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b087      	sub	sp, #28
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	60f8      	str	r0, [r7, #12]
 8006ac0:	60b9      	str	r1, [r7, #8]
 8006ac2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	f003 031f 	and.w	r3, r3, #31
 8006aca:	2201      	movs	r2, #1
 8006acc:	fa02 f303 	lsl.w	r3, r2, r3
 8006ad0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	6a1a      	ldr	r2, [r3, #32]
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	43db      	mvns	r3, r3
 8006ada:	401a      	ands	r2, r3
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	6a1a      	ldr	r2, [r3, #32]
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	f003 031f 	and.w	r3, r3, #31
 8006aea:	6879      	ldr	r1, [r7, #4]
 8006aec:	fa01 f303 	lsl.w	r3, r1, r3
 8006af0:	431a      	orrs	r2, r3
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	621a      	str	r2, [r3, #32]
}
 8006af6:	bf00      	nop
 8006af8:	371c      	adds	r7, #28
 8006afa:	46bd      	mov	sp, r7
 8006afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b00:	4770      	bx	lr
	...

08006b04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b085      	sub	sp, #20
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
 8006b0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d101      	bne.n	8006b1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b18:	2302      	movs	r3, #2
 8006b1a:	e06d      	b.n	8006bf8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2202      	movs	r2, #2
 8006b28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	689b      	ldr	r3, [r3, #8]
 8006b3a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a30      	ldr	r2, [pc, #192]	@ (8006c04 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d004      	beq.n	8006b50 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a2f      	ldr	r2, [pc, #188]	@ (8006c08 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d108      	bne.n	8006b62 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006b56:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	68fa      	ldr	r2, [r7, #12]
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b68:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	68fa      	ldr	r2, [r7, #12]
 8006b70:	4313      	orrs	r3, r2
 8006b72:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	68fa      	ldr	r2, [r7, #12]
 8006b7a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a20      	ldr	r2, [pc, #128]	@ (8006c04 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d022      	beq.n	8006bcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b8e:	d01d      	beq.n	8006bcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a1d      	ldr	r2, [pc, #116]	@ (8006c0c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d018      	beq.n	8006bcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a1c      	ldr	r2, [pc, #112]	@ (8006c10 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d013      	beq.n	8006bcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a1a      	ldr	r2, [pc, #104]	@ (8006c14 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d00e      	beq.n	8006bcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a15      	ldr	r2, [pc, #84]	@ (8006c08 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d009      	beq.n	8006bcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a16      	ldr	r2, [pc, #88]	@ (8006c18 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d004      	beq.n	8006bcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a15      	ldr	r2, [pc, #84]	@ (8006c1c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d10c      	bne.n	8006be6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006bd2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	689b      	ldr	r3, [r3, #8]
 8006bd8:	68ba      	ldr	r2, [r7, #8]
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	68ba      	ldr	r2, [r7, #8]
 8006be4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2201      	movs	r2, #1
 8006bea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006bf6:	2300      	movs	r3, #0
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3714      	adds	r7, #20
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr
 8006c04:	40010000 	.word	0x40010000
 8006c08:	40010400 	.word	0x40010400
 8006c0c:	40000400 	.word	0x40000400
 8006c10:	40000800 	.word	0x40000800
 8006c14:	40000c00 	.word	0x40000c00
 8006c18:	40014000 	.word	0x40014000
 8006c1c:	40001800 	.word	0x40001800

08006c20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b082      	sub	sp, #8
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d101      	bne.n	8006c32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	e040      	b.n	8006cb4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d106      	bne.n	8006c48 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f7fb ffb0 	bl	8002ba8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2224      	movs	r2, #36	@ 0x24
 8006c4c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	681a      	ldr	r2, [r3, #0]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f022 0201 	bic.w	r2, r2, #1
 8006c5c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d002      	beq.n	8006c6c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f000 fbde 	bl	8007428 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f000 f977 	bl	8006f60 <UART_SetConfig>
 8006c72:	4603      	mov	r3, r0
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d101      	bne.n	8006c7c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006c78:	2301      	movs	r3, #1
 8006c7a:	e01b      	b.n	8006cb4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	685a      	ldr	r2, [r3, #4]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006c8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	689a      	ldr	r2, [r3, #8]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006c9a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	681a      	ldr	r2, [r3, #0]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f042 0201 	orr.w	r2, r2, #1
 8006caa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f000 fc5d 	bl	800756c <UART_CheckIdleState>
 8006cb2:	4603      	mov	r3, r0
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3708      	adds	r7, #8
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}

08006cbc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b08a      	sub	sp, #40	@ 0x28
 8006cc0:	af02      	add	r7, sp, #8
 8006cc2:	60f8      	str	r0, [r7, #12]
 8006cc4:	60b9      	str	r1, [r7, #8]
 8006cc6:	603b      	str	r3, [r7, #0]
 8006cc8:	4613      	mov	r3, r2
 8006cca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006cd0:	2b20      	cmp	r3, #32
 8006cd2:	d177      	bne.n	8006dc4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d002      	beq.n	8006ce0 <HAL_UART_Transmit+0x24>
 8006cda:	88fb      	ldrh	r3, [r7, #6]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d101      	bne.n	8006ce4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	e070      	b.n	8006dc6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2221      	movs	r2, #33	@ 0x21
 8006cf0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006cf2:	f7fc f8db 	bl	8002eac <HAL_GetTick>
 8006cf6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	88fa      	ldrh	r2, [r7, #6]
 8006cfc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	88fa      	ldrh	r2, [r7, #6]
 8006d04:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	689b      	ldr	r3, [r3, #8]
 8006d0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d10:	d108      	bne.n	8006d24 <HAL_UART_Transmit+0x68>
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	691b      	ldr	r3, [r3, #16]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d104      	bne.n	8006d24 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	61bb      	str	r3, [r7, #24]
 8006d22:	e003      	b.n	8006d2c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006d2c:	e02f      	b.n	8006d8e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	9300      	str	r3, [sp, #0]
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	2200      	movs	r2, #0
 8006d36:	2180      	movs	r1, #128	@ 0x80
 8006d38:	68f8      	ldr	r0, [r7, #12]
 8006d3a:	f000 fc6e 	bl	800761a <UART_WaitOnFlagUntilTimeout>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d004      	beq.n	8006d4e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2220      	movs	r2, #32
 8006d48:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006d4a:	2303      	movs	r3, #3
 8006d4c:	e03b      	b.n	8006dc6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006d4e:	69fb      	ldr	r3, [r7, #28]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d10b      	bne.n	8006d6c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006d54:	69bb      	ldr	r3, [r7, #24]
 8006d56:	881b      	ldrh	r3, [r3, #0]
 8006d58:	461a      	mov	r2, r3
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d62:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006d64:	69bb      	ldr	r3, [r7, #24]
 8006d66:	3302      	adds	r3, #2
 8006d68:	61bb      	str	r3, [r7, #24]
 8006d6a:	e007      	b.n	8006d7c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006d6c:	69fb      	ldr	r3, [r7, #28]
 8006d6e:	781a      	ldrb	r2, [r3, #0]
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006d76:	69fb      	ldr	r3, [r7, #28]
 8006d78:	3301      	adds	r3, #1
 8006d7a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	3b01      	subs	r3, #1
 8006d86:	b29a      	uxth	r2, r3
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006d94:	b29b      	uxth	r3, r3
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d1c9      	bne.n	8006d2e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	9300      	str	r3, [sp, #0]
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	2200      	movs	r2, #0
 8006da2:	2140      	movs	r1, #64	@ 0x40
 8006da4:	68f8      	ldr	r0, [r7, #12]
 8006da6:	f000 fc38 	bl	800761a <UART_WaitOnFlagUntilTimeout>
 8006daa:	4603      	mov	r3, r0
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d004      	beq.n	8006dba <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2220      	movs	r2, #32
 8006db4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8006db6:	2303      	movs	r3, #3
 8006db8:	e005      	b.n	8006dc6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2220      	movs	r2, #32
 8006dbe:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	e000      	b.n	8006dc6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006dc4:	2302      	movs	r3, #2
  }
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3720      	adds	r7, #32
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}

08006dce <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006dce:	b580      	push	{r7, lr}
 8006dd0:	b08a      	sub	sp, #40	@ 0x28
 8006dd2:	af02      	add	r7, sp, #8
 8006dd4:	60f8      	str	r0, [r7, #12]
 8006dd6:	60b9      	str	r1, [r7, #8]
 8006dd8:	603b      	str	r3, [r7, #0]
 8006dda:	4613      	mov	r3, r2
 8006ddc:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006de4:	2b20      	cmp	r3, #32
 8006de6:	f040 80b5 	bne.w	8006f54 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d002      	beq.n	8006df6 <HAL_UART_Receive+0x28>
 8006df0:	88fb      	ldrh	r3, [r7, #6]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d101      	bne.n	8006dfa <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8006df6:	2301      	movs	r3, #1
 8006df8:	e0ad      	b.n	8006f56 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2222      	movs	r2, #34	@ 0x22
 8006e06:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006e10:	f7fc f84c 	bl	8002eac <HAL_GetTick>
 8006e14:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	88fa      	ldrh	r2, [r7, #6]
 8006e1a:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	88fa      	ldrh	r2, [r7, #6]
 8006e22:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	689b      	ldr	r3, [r3, #8]
 8006e2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e2e:	d10e      	bne.n	8006e4e <HAL_UART_Receive+0x80>
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	691b      	ldr	r3, [r3, #16]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d105      	bne.n	8006e44 <HAL_UART_Receive+0x76>
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006e3e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006e42:	e02d      	b.n	8006ea0 <HAL_UART_Receive+0xd2>
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	22ff      	movs	r2, #255	@ 0xff
 8006e48:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006e4c:	e028      	b.n	8006ea0 <HAL_UART_Receive+0xd2>
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d10d      	bne.n	8006e72 <HAL_UART_Receive+0xa4>
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	691b      	ldr	r3, [r3, #16]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d104      	bne.n	8006e68 <HAL_UART_Receive+0x9a>
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	22ff      	movs	r2, #255	@ 0xff
 8006e62:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006e66:	e01b      	b.n	8006ea0 <HAL_UART_Receive+0xd2>
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	227f      	movs	r2, #127	@ 0x7f
 8006e6c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006e70:	e016      	b.n	8006ea0 <HAL_UART_Receive+0xd2>
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	689b      	ldr	r3, [r3, #8]
 8006e76:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006e7a:	d10d      	bne.n	8006e98 <HAL_UART_Receive+0xca>
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	691b      	ldr	r3, [r3, #16]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d104      	bne.n	8006e8e <HAL_UART_Receive+0xc0>
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	227f      	movs	r2, #127	@ 0x7f
 8006e88:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006e8c:	e008      	b.n	8006ea0 <HAL_UART_Receive+0xd2>
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	223f      	movs	r2, #63	@ 0x3f
 8006e92:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8006e96:	e003      	b.n	8006ea0 <HAL_UART_Receive+0xd2>
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006ea6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	689b      	ldr	r3, [r3, #8]
 8006eac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006eb0:	d108      	bne.n	8006ec4 <HAL_UART_Receive+0xf6>
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	691b      	ldr	r3, [r3, #16]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d104      	bne.n	8006ec4 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	61bb      	str	r3, [r7, #24]
 8006ec2:	e003      	b.n	8006ecc <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006ecc:	e036      	b.n	8006f3c <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	9300      	str	r3, [sp, #0]
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	2120      	movs	r1, #32
 8006ed8:	68f8      	ldr	r0, [r7, #12]
 8006eda:	f000 fb9e 	bl	800761a <UART_WaitOnFlagUntilTimeout>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d005      	beq.n	8006ef0 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2220      	movs	r2, #32
 8006ee8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8006eec:	2303      	movs	r3, #3
 8006eee:	e032      	b.n	8006f56 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8006ef0:	69fb      	ldr	r3, [r7, #28]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d10c      	bne.n	8006f10 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006efc:	b29a      	uxth	r2, r3
 8006efe:	8a7b      	ldrh	r3, [r7, #18]
 8006f00:	4013      	ands	r3, r2
 8006f02:	b29a      	uxth	r2, r3
 8006f04:	69bb      	ldr	r3, [r7, #24]
 8006f06:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006f08:	69bb      	ldr	r3, [r7, #24]
 8006f0a:	3302      	adds	r3, #2
 8006f0c:	61bb      	str	r3, [r7, #24]
 8006f0e:	e00c      	b.n	8006f2a <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f16:	b2da      	uxtb	r2, r3
 8006f18:	8a7b      	ldrh	r3, [r7, #18]
 8006f1a:	b2db      	uxtb	r3, r3
 8006f1c:	4013      	ands	r3, r2
 8006f1e:	b2da      	uxtb	r2, r3
 8006f20:	69fb      	ldr	r3, [r7, #28]
 8006f22:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006f24:	69fb      	ldr	r3, [r7, #28]
 8006f26:	3301      	adds	r3, #1
 8006f28:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006f30:	b29b      	uxth	r3, r3
 8006f32:	3b01      	subs	r3, #1
 8006f34:	b29a      	uxth	r2, r3
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d1c2      	bne.n	8006ece <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2220      	movs	r2, #32
 8006f4c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8006f50:	2300      	movs	r3, #0
 8006f52:	e000      	b.n	8006f56 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8006f54:	2302      	movs	r3, #2
  }
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3720      	adds	r7, #32
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}
	...

08006f60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b088      	sub	sp, #32
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	689a      	ldr	r2, [r3, #8]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	691b      	ldr	r3, [r3, #16]
 8006f74:	431a      	orrs	r2, r3
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	695b      	ldr	r3, [r3, #20]
 8006f7a:	431a      	orrs	r2, r3
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	69db      	ldr	r3, [r3, #28]
 8006f80:	4313      	orrs	r3, r2
 8006f82:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	681a      	ldr	r2, [r3, #0]
 8006f8a:	4ba6      	ldr	r3, [pc, #664]	@ (8007224 <UART_SetConfig+0x2c4>)
 8006f8c:	4013      	ands	r3, r2
 8006f8e:	687a      	ldr	r2, [r7, #4]
 8006f90:	6812      	ldr	r2, [r2, #0]
 8006f92:	6979      	ldr	r1, [r7, #20]
 8006f94:	430b      	orrs	r3, r1
 8006f96:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	68da      	ldr	r2, [r3, #12]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	430a      	orrs	r2, r1
 8006fac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	699b      	ldr	r3, [r3, #24]
 8006fb2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6a1b      	ldr	r3, [r3, #32]
 8006fb8:	697a      	ldr	r2, [r7, #20]
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	689b      	ldr	r3, [r3, #8]
 8006fc4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	697a      	ldr	r2, [r7, #20]
 8006fce:	430a      	orrs	r2, r1
 8006fd0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a94      	ldr	r2, [pc, #592]	@ (8007228 <UART_SetConfig+0x2c8>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d120      	bne.n	800701e <UART_SetConfig+0xbe>
 8006fdc:	4b93      	ldr	r3, [pc, #588]	@ (800722c <UART_SetConfig+0x2cc>)
 8006fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fe2:	f003 0303 	and.w	r3, r3, #3
 8006fe6:	2b03      	cmp	r3, #3
 8006fe8:	d816      	bhi.n	8007018 <UART_SetConfig+0xb8>
 8006fea:	a201      	add	r2, pc, #4	@ (adr r2, 8006ff0 <UART_SetConfig+0x90>)
 8006fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ff0:	08007001 	.word	0x08007001
 8006ff4:	0800700d 	.word	0x0800700d
 8006ff8:	08007007 	.word	0x08007007
 8006ffc:	08007013 	.word	0x08007013
 8007000:	2301      	movs	r3, #1
 8007002:	77fb      	strb	r3, [r7, #31]
 8007004:	e150      	b.n	80072a8 <UART_SetConfig+0x348>
 8007006:	2302      	movs	r3, #2
 8007008:	77fb      	strb	r3, [r7, #31]
 800700a:	e14d      	b.n	80072a8 <UART_SetConfig+0x348>
 800700c:	2304      	movs	r3, #4
 800700e:	77fb      	strb	r3, [r7, #31]
 8007010:	e14a      	b.n	80072a8 <UART_SetConfig+0x348>
 8007012:	2308      	movs	r3, #8
 8007014:	77fb      	strb	r3, [r7, #31]
 8007016:	e147      	b.n	80072a8 <UART_SetConfig+0x348>
 8007018:	2310      	movs	r3, #16
 800701a:	77fb      	strb	r3, [r7, #31]
 800701c:	e144      	b.n	80072a8 <UART_SetConfig+0x348>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a83      	ldr	r2, [pc, #524]	@ (8007230 <UART_SetConfig+0x2d0>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d132      	bne.n	800708e <UART_SetConfig+0x12e>
 8007028:	4b80      	ldr	r3, [pc, #512]	@ (800722c <UART_SetConfig+0x2cc>)
 800702a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800702e:	f003 030c 	and.w	r3, r3, #12
 8007032:	2b0c      	cmp	r3, #12
 8007034:	d828      	bhi.n	8007088 <UART_SetConfig+0x128>
 8007036:	a201      	add	r2, pc, #4	@ (adr r2, 800703c <UART_SetConfig+0xdc>)
 8007038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800703c:	08007071 	.word	0x08007071
 8007040:	08007089 	.word	0x08007089
 8007044:	08007089 	.word	0x08007089
 8007048:	08007089 	.word	0x08007089
 800704c:	0800707d 	.word	0x0800707d
 8007050:	08007089 	.word	0x08007089
 8007054:	08007089 	.word	0x08007089
 8007058:	08007089 	.word	0x08007089
 800705c:	08007077 	.word	0x08007077
 8007060:	08007089 	.word	0x08007089
 8007064:	08007089 	.word	0x08007089
 8007068:	08007089 	.word	0x08007089
 800706c:	08007083 	.word	0x08007083
 8007070:	2300      	movs	r3, #0
 8007072:	77fb      	strb	r3, [r7, #31]
 8007074:	e118      	b.n	80072a8 <UART_SetConfig+0x348>
 8007076:	2302      	movs	r3, #2
 8007078:	77fb      	strb	r3, [r7, #31]
 800707a:	e115      	b.n	80072a8 <UART_SetConfig+0x348>
 800707c:	2304      	movs	r3, #4
 800707e:	77fb      	strb	r3, [r7, #31]
 8007080:	e112      	b.n	80072a8 <UART_SetConfig+0x348>
 8007082:	2308      	movs	r3, #8
 8007084:	77fb      	strb	r3, [r7, #31]
 8007086:	e10f      	b.n	80072a8 <UART_SetConfig+0x348>
 8007088:	2310      	movs	r3, #16
 800708a:	77fb      	strb	r3, [r7, #31]
 800708c:	e10c      	b.n	80072a8 <UART_SetConfig+0x348>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a68      	ldr	r2, [pc, #416]	@ (8007234 <UART_SetConfig+0x2d4>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d120      	bne.n	80070da <UART_SetConfig+0x17a>
 8007098:	4b64      	ldr	r3, [pc, #400]	@ (800722c <UART_SetConfig+0x2cc>)
 800709a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800709e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80070a2:	2b30      	cmp	r3, #48	@ 0x30
 80070a4:	d013      	beq.n	80070ce <UART_SetConfig+0x16e>
 80070a6:	2b30      	cmp	r3, #48	@ 0x30
 80070a8:	d814      	bhi.n	80070d4 <UART_SetConfig+0x174>
 80070aa:	2b20      	cmp	r3, #32
 80070ac:	d009      	beq.n	80070c2 <UART_SetConfig+0x162>
 80070ae:	2b20      	cmp	r3, #32
 80070b0:	d810      	bhi.n	80070d4 <UART_SetConfig+0x174>
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d002      	beq.n	80070bc <UART_SetConfig+0x15c>
 80070b6:	2b10      	cmp	r3, #16
 80070b8:	d006      	beq.n	80070c8 <UART_SetConfig+0x168>
 80070ba:	e00b      	b.n	80070d4 <UART_SetConfig+0x174>
 80070bc:	2300      	movs	r3, #0
 80070be:	77fb      	strb	r3, [r7, #31]
 80070c0:	e0f2      	b.n	80072a8 <UART_SetConfig+0x348>
 80070c2:	2302      	movs	r3, #2
 80070c4:	77fb      	strb	r3, [r7, #31]
 80070c6:	e0ef      	b.n	80072a8 <UART_SetConfig+0x348>
 80070c8:	2304      	movs	r3, #4
 80070ca:	77fb      	strb	r3, [r7, #31]
 80070cc:	e0ec      	b.n	80072a8 <UART_SetConfig+0x348>
 80070ce:	2308      	movs	r3, #8
 80070d0:	77fb      	strb	r3, [r7, #31]
 80070d2:	e0e9      	b.n	80072a8 <UART_SetConfig+0x348>
 80070d4:	2310      	movs	r3, #16
 80070d6:	77fb      	strb	r3, [r7, #31]
 80070d8:	e0e6      	b.n	80072a8 <UART_SetConfig+0x348>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a56      	ldr	r2, [pc, #344]	@ (8007238 <UART_SetConfig+0x2d8>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d120      	bne.n	8007126 <UART_SetConfig+0x1c6>
 80070e4:	4b51      	ldr	r3, [pc, #324]	@ (800722c <UART_SetConfig+0x2cc>)
 80070e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070ea:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80070ee:	2bc0      	cmp	r3, #192	@ 0xc0
 80070f0:	d013      	beq.n	800711a <UART_SetConfig+0x1ba>
 80070f2:	2bc0      	cmp	r3, #192	@ 0xc0
 80070f4:	d814      	bhi.n	8007120 <UART_SetConfig+0x1c0>
 80070f6:	2b80      	cmp	r3, #128	@ 0x80
 80070f8:	d009      	beq.n	800710e <UART_SetConfig+0x1ae>
 80070fa:	2b80      	cmp	r3, #128	@ 0x80
 80070fc:	d810      	bhi.n	8007120 <UART_SetConfig+0x1c0>
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d002      	beq.n	8007108 <UART_SetConfig+0x1a8>
 8007102:	2b40      	cmp	r3, #64	@ 0x40
 8007104:	d006      	beq.n	8007114 <UART_SetConfig+0x1b4>
 8007106:	e00b      	b.n	8007120 <UART_SetConfig+0x1c0>
 8007108:	2300      	movs	r3, #0
 800710a:	77fb      	strb	r3, [r7, #31]
 800710c:	e0cc      	b.n	80072a8 <UART_SetConfig+0x348>
 800710e:	2302      	movs	r3, #2
 8007110:	77fb      	strb	r3, [r7, #31]
 8007112:	e0c9      	b.n	80072a8 <UART_SetConfig+0x348>
 8007114:	2304      	movs	r3, #4
 8007116:	77fb      	strb	r3, [r7, #31]
 8007118:	e0c6      	b.n	80072a8 <UART_SetConfig+0x348>
 800711a:	2308      	movs	r3, #8
 800711c:	77fb      	strb	r3, [r7, #31]
 800711e:	e0c3      	b.n	80072a8 <UART_SetConfig+0x348>
 8007120:	2310      	movs	r3, #16
 8007122:	77fb      	strb	r3, [r7, #31]
 8007124:	e0c0      	b.n	80072a8 <UART_SetConfig+0x348>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a44      	ldr	r2, [pc, #272]	@ (800723c <UART_SetConfig+0x2dc>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d125      	bne.n	800717c <UART_SetConfig+0x21c>
 8007130:	4b3e      	ldr	r3, [pc, #248]	@ (800722c <UART_SetConfig+0x2cc>)
 8007132:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007136:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800713a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800713e:	d017      	beq.n	8007170 <UART_SetConfig+0x210>
 8007140:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007144:	d817      	bhi.n	8007176 <UART_SetConfig+0x216>
 8007146:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800714a:	d00b      	beq.n	8007164 <UART_SetConfig+0x204>
 800714c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007150:	d811      	bhi.n	8007176 <UART_SetConfig+0x216>
 8007152:	2b00      	cmp	r3, #0
 8007154:	d003      	beq.n	800715e <UART_SetConfig+0x1fe>
 8007156:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800715a:	d006      	beq.n	800716a <UART_SetConfig+0x20a>
 800715c:	e00b      	b.n	8007176 <UART_SetConfig+0x216>
 800715e:	2300      	movs	r3, #0
 8007160:	77fb      	strb	r3, [r7, #31]
 8007162:	e0a1      	b.n	80072a8 <UART_SetConfig+0x348>
 8007164:	2302      	movs	r3, #2
 8007166:	77fb      	strb	r3, [r7, #31]
 8007168:	e09e      	b.n	80072a8 <UART_SetConfig+0x348>
 800716a:	2304      	movs	r3, #4
 800716c:	77fb      	strb	r3, [r7, #31]
 800716e:	e09b      	b.n	80072a8 <UART_SetConfig+0x348>
 8007170:	2308      	movs	r3, #8
 8007172:	77fb      	strb	r3, [r7, #31]
 8007174:	e098      	b.n	80072a8 <UART_SetConfig+0x348>
 8007176:	2310      	movs	r3, #16
 8007178:	77fb      	strb	r3, [r7, #31]
 800717a:	e095      	b.n	80072a8 <UART_SetConfig+0x348>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4a2f      	ldr	r2, [pc, #188]	@ (8007240 <UART_SetConfig+0x2e0>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d125      	bne.n	80071d2 <UART_SetConfig+0x272>
 8007186:	4b29      	ldr	r3, [pc, #164]	@ (800722c <UART_SetConfig+0x2cc>)
 8007188:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800718c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007190:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007194:	d017      	beq.n	80071c6 <UART_SetConfig+0x266>
 8007196:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800719a:	d817      	bhi.n	80071cc <UART_SetConfig+0x26c>
 800719c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80071a0:	d00b      	beq.n	80071ba <UART_SetConfig+0x25a>
 80071a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80071a6:	d811      	bhi.n	80071cc <UART_SetConfig+0x26c>
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d003      	beq.n	80071b4 <UART_SetConfig+0x254>
 80071ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80071b0:	d006      	beq.n	80071c0 <UART_SetConfig+0x260>
 80071b2:	e00b      	b.n	80071cc <UART_SetConfig+0x26c>
 80071b4:	2301      	movs	r3, #1
 80071b6:	77fb      	strb	r3, [r7, #31]
 80071b8:	e076      	b.n	80072a8 <UART_SetConfig+0x348>
 80071ba:	2302      	movs	r3, #2
 80071bc:	77fb      	strb	r3, [r7, #31]
 80071be:	e073      	b.n	80072a8 <UART_SetConfig+0x348>
 80071c0:	2304      	movs	r3, #4
 80071c2:	77fb      	strb	r3, [r7, #31]
 80071c4:	e070      	b.n	80072a8 <UART_SetConfig+0x348>
 80071c6:	2308      	movs	r3, #8
 80071c8:	77fb      	strb	r3, [r7, #31]
 80071ca:	e06d      	b.n	80072a8 <UART_SetConfig+0x348>
 80071cc:	2310      	movs	r3, #16
 80071ce:	77fb      	strb	r3, [r7, #31]
 80071d0:	e06a      	b.n	80072a8 <UART_SetConfig+0x348>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a1b      	ldr	r2, [pc, #108]	@ (8007244 <UART_SetConfig+0x2e4>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d138      	bne.n	800724e <UART_SetConfig+0x2ee>
 80071dc:	4b13      	ldr	r3, [pc, #76]	@ (800722c <UART_SetConfig+0x2cc>)
 80071de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071e2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80071e6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80071ea:	d017      	beq.n	800721c <UART_SetConfig+0x2bc>
 80071ec:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80071f0:	d82a      	bhi.n	8007248 <UART_SetConfig+0x2e8>
 80071f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80071f6:	d00b      	beq.n	8007210 <UART_SetConfig+0x2b0>
 80071f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80071fc:	d824      	bhi.n	8007248 <UART_SetConfig+0x2e8>
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d003      	beq.n	800720a <UART_SetConfig+0x2aa>
 8007202:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007206:	d006      	beq.n	8007216 <UART_SetConfig+0x2b6>
 8007208:	e01e      	b.n	8007248 <UART_SetConfig+0x2e8>
 800720a:	2300      	movs	r3, #0
 800720c:	77fb      	strb	r3, [r7, #31]
 800720e:	e04b      	b.n	80072a8 <UART_SetConfig+0x348>
 8007210:	2302      	movs	r3, #2
 8007212:	77fb      	strb	r3, [r7, #31]
 8007214:	e048      	b.n	80072a8 <UART_SetConfig+0x348>
 8007216:	2304      	movs	r3, #4
 8007218:	77fb      	strb	r3, [r7, #31]
 800721a:	e045      	b.n	80072a8 <UART_SetConfig+0x348>
 800721c:	2308      	movs	r3, #8
 800721e:	77fb      	strb	r3, [r7, #31]
 8007220:	e042      	b.n	80072a8 <UART_SetConfig+0x348>
 8007222:	bf00      	nop
 8007224:	efff69f3 	.word	0xefff69f3
 8007228:	40011000 	.word	0x40011000
 800722c:	40023800 	.word	0x40023800
 8007230:	40004400 	.word	0x40004400
 8007234:	40004800 	.word	0x40004800
 8007238:	40004c00 	.word	0x40004c00
 800723c:	40005000 	.word	0x40005000
 8007240:	40011400 	.word	0x40011400
 8007244:	40007800 	.word	0x40007800
 8007248:	2310      	movs	r3, #16
 800724a:	77fb      	strb	r3, [r7, #31]
 800724c:	e02c      	b.n	80072a8 <UART_SetConfig+0x348>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a72      	ldr	r2, [pc, #456]	@ (800741c <UART_SetConfig+0x4bc>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d125      	bne.n	80072a4 <UART_SetConfig+0x344>
 8007258:	4b71      	ldr	r3, [pc, #452]	@ (8007420 <UART_SetConfig+0x4c0>)
 800725a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800725e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007262:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007266:	d017      	beq.n	8007298 <UART_SetConfig+0x338>
 8007268:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800726c:	d817      	bhi.n	800729e <UART_SetConfig+0x33e>
 800726e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007272:	d00b      	beq.n	800728c <UART_SetConfig+0x32c>
 8007274:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007278:	d811      	bhi.n	800729e <UART_SetConfig+0x33e>
 800727a:	2b00      	cmp	r3, #0
 800727c:	d003      	beq.n	8007286 <UART_SetConfig+0x326>
 800727e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007282:	d006      	beq.n	8007292 <UART_SetConfig+0x332>
 8007284:	e00b      	b.n	800729e <UART_SetConfig+0x33e>
 8007286:	2300      	movs	r3, #0
 8007288:	77fb      	strb	r3, [r7, #31]
 800728a:	e00d      	b.n	80072a8 <UART_SetConfig+0x348>
 800728c:	2302      	movs	r3, #2
 800728e:	77fb      	strb	r3, [r7, #31]
 8007290:	e00a      	b.n	80072a8 <UART_SetConfig+0x348>
 8007292:	2304      	movs	r3, #4
 8007294:	77fb      	strb	r3, [r7, #31]
 8007296:	e007      	b.n	80072a8 <UART_SetConfig+0x348>
 8007298:	2308      	movs	r3, #8
 800729a:	77fb      	strb	r3, [r7, #31]
 800729c:	e004      	b.n	80072a8 <UART_SetConfig+0x348>
 800729e:	2310      	movs	r3, #16
 80072a0:	77fb      	strb	r3, [r7, #31]
 80072a2:	e001      	b.n	80072a8 <UART_SetConfig+0x348>
 80072a4:	2310      	movs	r3, #16
 80072a6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	69db      	ldr	r3, [r3, #28]
 80072ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80072b0:	d15b      	bne.n	800736a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80072b2:	7ffb      	ldrb	r3, [r7, #31]
 80072b4:	2b08      	cmp	r3, #8
 80072b6:	d828      	bhi.n	800730a <UART_SetConfig+0x3aa>
 80072b8:	a201      	add	r2, pc, #4	@ (adr r2, 80072c0 <UART_SetConfig+0x360>)
 80072ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072be:	bf00      	nop
 80072c0:	080072e5 	.word	0x080072e5
 80072c4:	080072ed 	.word	0x080072ed
 80072c8:	080072f5 	.word	0x080072f5
 80072cc:	0800730b 	.word	0x0800730b
 80072d0:	080072fb 	.word	0x080072fb
 80072d4:	0800730b 	.word	0x0800730b
 80072d8:	0800730b 	.word	0x0800730b
 80072dc:	0800730b 	.word	0x0800730b
 80072e0:	08007303 	.word	0x08007303
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072e4:	f7fe fa66 	bl	80057b4 <HAL_RCC_GetPCLK1Freq>
 80072e8:	61b8      	str	r0, [r7, #24]
        break;
 80072ea:	e013      	b.n	8007314 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80072ec:	f7fe fa76 	bl	80057dc <HAL_RCC_GetPCLK2Freq>
 80072f0:	61b8      	str	r0, [r7, #24]
        break;
 80072f2:	e00f      	b.n	8007314 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072f4:	4b4b      	ldr	r3, [pc, #300]	@ (8007424 <UART_SetConfig+0x4c4>)
 80072f6:	61bb      	str	r3, [r7, #24]
        break;
 80072f8:	e00c      	b.n	8007314 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072fa:	f7fe f949 	bl	8005590 <HAL_RCC_GetSysClockFreq>
 80072fe:	61b8      	str	r0, [r7, #24]
        break;
 8007300:	e008      	b.n	8007314 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007302:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007306:	61bb      	str	r3, [r7, #24]
        break;
 8007308:	e004      	b.n	8007314 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800730a:	2300      	movs	r3, #0
 800730c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800730e:	2301      	movs	r3, #1
 8007310:	77bb      	strb	r3, [r7, #30]
        break;
 8007312:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007314:	69bb      	ldr	r3, [r7, #24]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d074      	beq.n	8007404 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800731a:	69bb      	ldr	r3, [r7, #24]
 800731c:	005a      	lsls	r2, r3, #1
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	085b      	lsrs	r3, r3, #1
 8007324:	441a      	add	r2, r3
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	fbb2 f3f3 	udiv	r3, r2, r3
 800732e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	2b0f      	cmp	r3, #15
 8007334:	d916      	bls.n	8007364 <UART_SetConfig+0x404>
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800733c:	d212      	bcs.n	8007364 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	b29b      	uxth	r3, r3
 8007342:	f023 030f 	bic.w	r3, r3, #15
 8007346:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	085b      	lsrs	r3, r3, #1
 800734c:	b29b      	uxth	r3, r3
 800734e:	f003 0307 	and.w	r3, r3, #7
 8007352:	b29a      	uxth	r2, r3
 8007354:	89fb      	ldrh	r3, [r7, #14]
 8007356:	4313      	orrs	r3, r2
 8007358:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	89fa      	ldrh	r2, [r7, #14]
 8007360:	60da      	str	r2, [r3, #12]
 8007362:	e04f      	b.n	8007404 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007364:	2301      	movs	r3, #1
 8007366:	77bb      	strb	r3, [r7, #30]
 8007368:	e04c      	b.n	8007404 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800736a:	7ffb      	ldrb	r3, [r7, #31]
 800736c:	2b08      	cmp	r3, #8
 800736e:	d828      	bhi.n	80073c2 <UART_SetConfig+0x462>
 8007370:	a201      	add	r2, pc, #4	@ (adr r2, 8007378 <UART_SetConfig+0x418>)
 8007372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007376:	bf00      	nop
 8007378:	0800739d 	.word	0x0800739d
 800737c:	080073a5 	.word	0x080073a5
 8007380:	080073ad 	.word	0x080073ad
 8007384:	080073c3 	.word	0x080073c3
 8007388:	080073b3 	.word	0x080073b3
 800738c:	080073c3 	.word	0x080073c3
 8007390:	080073c3 	.word	0x080073c3
 8007394:	080073c3 	.word	0x080073c3
 8007398:	080073bb 	.word	0x080073bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800739c:	f7fe fa0a 	bl	80057b4 <HAL_RCC_GetPCLK1Freq>
 80073a0:	61b8      	str	r0, [r7, #24]
        break;
 80073a2:	e013      	b.n	80073cc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80073a4:	f7fe fa1a 	bl	80057dc <HAL_RCC_GetPCLK2Freq>
 80073a8:	61b8      	str	r0, [r7, #24]
        break;
 80073aa:	e00f      	b.n	80073cc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80073ac:	4b1d      	ldr	r3, [pc, #116]	@ (8007424 <UART_SetConfig+0x4c4>)
 80073ae:	61bb      	str	r3, [r7, #24]
        break;
 80073b0:	e00c      	b.n	80073cc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80073b2:	f7fe f8ed 	bl	8005590 <HAL_RCC_GetSysClockFreq>
 80073b6:	61b8      	str	r0, [r7, #24]
        break;
 80073b8:	e008      	b.n	80073cc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80073be:	61bb      	str	r3, [r7, #24]
        break;
 80073c0:	e004      	b.n	80073cc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80073c2:	2300      	movs	r3, #0
 80073c4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80073c6:	2301      	movs	r3, #1
 80073c8:	77bb      	strb	r3, [r7, #30]
        break;
 80073ca:	bf00      	nop
    }

    if (pclk != 0U)
 80073cc:	69bb      	ldr	r3, [r7, #24]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d018      	beq.n	8007404 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	685b      	ldr	r3, [r3, #4]
 80073d6:	085a      	lsrs	r2, r3, #1
 80073d8:	69bb      	ldr	r3, [r7, #24]
 80073da:	441a      	add	r2, r3
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80073e4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	2b0f      	cmp	r3, #15
 80073ea:	d909      	bls.n	8007400 <UART_SetConfig+0x4a0>
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073f2:	d205      	bcs.n	8007400 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80073f4:	693b      	ldr	r3, [r7, #16]
 80073f6:	b29a      	uxth	r2, r3
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	60da      	str	r2, [r3, #12]
 80073fe:	e001      	b.n	8007404 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007400:	2301      	movs	r3, #1
 8007402:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2200      	movs	r2, #0
 8007408:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2200      	movs	r2, #0
 800740e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007410:	7fbb      	ldrb	r3, [r7, #30]
}
 8007412:	4618      	mov	r0, r3
 8007414:	3720      	adds	r7, #32
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}
 800741a:	bf00      	nop
 800741c:	40007c00 	.word	0x40007c00
 8007420:	40023800 	.word	0x40023800
 8007424:	00f42400 	.word	0x00f42400

08007428 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007428:	b480      	push	{r7}
 800742a:	b083      	sub	sp, #12
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007434:	f003 0308 	and.w	r3, r3, #8
 8007438:	2b00      	cmp	r3, #0
 800743a:	d00a      	beq.n	8007452 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	430a      	orrs	r2, r1
 8007450:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007456:	f003 0301 	and.w	r3, r3, #1
 800745a:	2b00      	cmp	r3, #0
 800745c:	d00a      	beq.n	8007474 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	685b      	ldr	r3, [r3, #4]
 8007464:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	430a      	orrs	r2, r1
 8007472:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007478:	f003 0302 	and.w	r3, r3, #2
 800747c:	2b00      	cmp	r3, #0
 800747e:	d00a      	beq.n	8007496 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	430a      	orrs	r2, r1
 8007494:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800749a:	f003 0304 	and.w	r3, r3, #4
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d00a      	beq.n	80074b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	430a      	orrs	r2, r1
 80074b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074bc:	f003 0310 	and.w	r3, r3, #16
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d00a      	beq.n	80074da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	689b      	ldr	r3, [r3, #8]
 80074ca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	430a      	orrs	r2, r1
 80074d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074de:	f003 0320 	and.w	r3, r3, #32
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d00a      	beq.n	80074fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	689b      	ldr	r3, [r3, #8]
 80074ec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	430a      	orrs	r2, r1
 80074fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007500:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007504:	2b00      	cmp	r3, #0
 8007506:	d01a      	beq.n	800753e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	430a      	orrs	r2, r1
 800751c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007522:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007526:	d10a      	bne.n	800753e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	685b      	ldr	r3, [r3, #4]
 800752e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	430a      	orrs	r2, r1
 800753c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007542:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007546:	2b00      	cmp	r3, #0
 8007548:	d00a      	beq.n	8007560 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	685b      	ldr	r3, [r3, #4]
 8007550:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	430a      	orrs	r2, r1
 800755e:	605a      	str	r2, [r3, #4]
  }
}
 8007560:	bf00      	nop
 8007562:	370c      	adds	r7, #12
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr

0800756c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b08c      	sub	sp, #48	@ 0x30
 8007570:	af02      	add	r7, sp, #8
 8007572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2200      	movs	r2, #0
 8007578:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800757c:	f7fb fc96 	bl	8002eac <HAL_GetTick>
 8007580:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f003 0308 	and.w	r3, r3, #8
 800758c:	2b08      	cmp	r3, #8
 800758e:	d12e      	bne.n	80075ee <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007590:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007594:	9300      	str	r3, [sp, #0]
 8007596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007598:	2200      	movs	r2, #0
 800759a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f000 f83b 	bl	800761a <UART_WaitOnFlagUntilTimeout>
 80075a4:	4603      	mov	r3, r0
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d021      	beq.n	80075ee <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	e853 3f00 	ldrex	r3, [r3]
 80075b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80075be:	623b      	str	r3, [r7, #32]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	461a      	mov	r2, r3
 80075c6:	6a3b      	ldr	r3, [r7, #32]
 80075c8:	61fb      	str	r3, [r7, #28]
 80075ca:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075cc:	69b9      	ldr	r1, [r7, #24]
 80075ce:	69fa      	ldr	r2, [r7, #28]
 80075d0:	e841 2300 	strex	r3, r2, [r1]
 80075d4:	617b      	str	r3, [r7, #20]
   return(result);
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d1e6      	bne.n	80075aa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2220      	movs	r2, #32
 80075e0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2200      	movs	r2, #0
 80075e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80075ea:	2303      	movs	r3, #3
 80075ec:	e011      	b.n	8007612 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2220      	movs	r2, #32
 80075f2:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2220      	movs	r2, #32
 80075f8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2200      	movs	r2, #0
 8007600:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2200      	movs	r2, #0
 8007606:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2200      	movs	r2, #0
 800760c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007610:	2300      	movs	r3, #0
}
 8007612:	4618      	mov	r0, r3
 8007614:	3728      	adds	r7, #40	@ 0x28
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}

0800761a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800761a:	b580      	push	{r7, lr}
 800761c:	b084      	sub	sp, #16
 800761e:	af00      	add	r7, sp, #0
 8007620:	60f8      	str	r0, [r7, #12]
 8007622:	60b9      	str	r1, [r7, #8]
 8007624:	603b      	str	r3, [r7, #0]
 8007626:	4613      	mov	r3, r2
 8007628:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800762a:	e04f      	b.n	80076cc <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800762c:	69bb      	ldr	r3, [r7, #24]
 800762e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007632:	d04b      	beq.n	80076cc <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007634:	f7fb fc3a 	bl	8002eac <HAL_GetTick>
 8007638:	4602      	mov	r2, r0
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	1ad3      	subs	r3, r2, r3
 800763e:	69ba      	ldr	r2, [r7, #24]
 8007640:	429a      	cmp	r2, r3
 8007642:	d302      	bcc.n	800764a <UART_WaitOnFlagUntilTimeout+0x30>
 8007644:	69bb      	ldr	r3, [r7, #24]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d101      	bne.n	800764e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800764a:	2303      	movs	r3, #3
 800764c:	e04e      	b.n	80076ec <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f003 0304 	and.w	r3, r3, #4
 8007658:	2b00      	cmp	r3, #0
 800765a:	d037      	beq.n	80076cc <UART_WaitOnFlagUntilTimeout+0xb2>
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	2b80      	cmp	r3, #128	@ 0x80
 8007660:	d034      	beq.n	80076cc <UART_WaitOnFlagUntilTimeout+0xb2>
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	2b40      	cmp	r3, #64	@ 0x40
 8007666:	d031      	beq.n	80076cc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	69db      	ldr	r3, [r3, #28]
 800766e:	f003 0308 	and.w	r3, r3, #8
 8007672:	2b08      	cmp	r3, #8
 8007674:	d110      	bne.n	8007698 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	2208      	movs	r2, #8
 800767c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800767e:	68f8      	ldr	r0, [r7, #12]
 8007680:	f000 f838 	bl	80076f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2208      	movs	r2, #8
 8007688:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2200      	movs	r2, #0
 8007690:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007694:	2301      	movs	r3, #1
 8007696:	e029      	b.n	80076ec <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	69db      	ldr	r3, [r3, #28]
 800769e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80076a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80076a6:	d111      	bne.n	80076cc <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80076b0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80076b2:	68f8      	ldr	r0, [r7, #12]
 80076b4:	f000 f81e 	bl	80076f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2220      	movs	r2, #32
 80076bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	2200      	movs	r2, #0
 80076c4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80076c8:	2303      	movs	r3, #3
 80076ca:	e00f      	b.n	80076ec <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	69da      	ldr	r2, [r3, #28]
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	4013      	ands	r3, r2
 80076d6:	68ba      	ldr	r2, [r7, #8]
 80076d8:	429a      	cmp	r2, r3
 80076da:	bf0c      	ite	eq
 80076dc:	2301      	moveq	r3, #1
 80076de:	2300      	movne	r3, #0
 80076e0:	b2db      	uxtb	r3, r3
 80076e2:	461a      	mov	r2, r3
 80076e4:	79fb      	ldrb	r3, [r7, #7]
 80076e6:	429a      	cmp	r2, r3
 80076e8:	d0a0      	beq.n	800762c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80076ea:	2300      	movs	r3, #0
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	3710      	adds	r7, #16
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}

080076f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b095      	sub	sp, #84	@ 0x54
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007702:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007704:	e853 3f00 	ldrex	r3, [r3]
 8007708:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800770a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800770c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007710:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	461a      	mov	r2, r3
 8007718:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800771a:	643b      	str	r3, [r7, #64]	@ 0x40
 800771c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800771e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007720:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007722:	e841 2300 	strex	r3, r2, [r1]
 8007726:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800772a:	2b00      	cmp	r3, #0
 800772c:	d1e6      	bne.n	80076fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	3308      	adds	r3, #8
 8007734:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007736:	6a3b      	ldr	r3, [r7, #32]
 8007738:	e853 3f00 	ldrex	r3, [r3]
 800773c:	61fb      	str	r3, [r7, #28]
   return(result);
 800773e:	69fb      	ldr	r3, [r7, #28]
 8007740:	f023 0301 	bic.w	r3, r3, #1
 8007744:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	3308      	adds	r3, #8
 800774c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800774e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007750:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007752:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007754:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007756:	e841 2300 	strex	r3, r2, [r1]
 800775a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800775c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800775e:	2b00      	cmp	r3, #0
 8007760:	d1e5      	bne.n	800772e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007766:	2b01      	cmp	r3, #1
 8007768:	d118      	bne.n	800779c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	e853 3f00 	ldrex	r3, [r3]
 8007776:	60bb      	str	r3, [r7, #8]
   return(result);
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	f023 0310 	bic.w	r3, r3, #16
 800777e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	461a      	mov	r2, r3
 8007786:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007788:	61bb      	str	r3, [r7, #24]
 800778a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800778c:	6979      	ldr	r1, [r7, #20]
 800778e:	69ba      	ldr	r2, [r7, #24]
 8007790:	e841 2300 	strex	r3, r2, [r1]
 8007794:	613b      	str	r3, [r7, #16]
   return(result);
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d1e6      	bne.n	800776a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2220      	movs	r2, #32
 80077a0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2200      	movs	r2, #0
 80077a8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2200      	movs	r2, #0
 80077ae:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80077b0:	bf00      	nop
 80077b2:	3754      	adds	r7, #84	@ 0x54
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr

080077bc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80077bc:	b084      	sub	sp, #16
 80077be:	b580      	push	{r7, lr}
 80077c0:	b084      	sub	sp, #16
 80077c2:	af00      	add	r7, sp, #0
 80077c4:	6078      	str	r0, [r7, #4]
 80077c6:	f107 001c 	add.w	r0, r7, #28
 80077ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80077ce:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80077d2:	2b01      	cmp	r3, #1
 80077d4:	d121      	bne.n	800781a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077da:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	68da      	ldr	r2, [r3, #12]
 80077e6:	4b21      	ldr	r3, [pc, #132]	@ (800786c <USB_CoreInit+0xb0>)
 80077e8:	4013      	ands	r3, r2
 80077ea:	687a      	ldr	r2, [r7, #4]
 80077ec:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	68db      	ldr	r3, [r3, #12]
 80077f2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80077fa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80077fe:	2b01      	cmp	r3, #1
 8007800:	d105      	bne.n	800780e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	68db      	ldr	r3, [r3, #12]
 8007806:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f000 fa92 	bl	8007d38 <USB_CoreReset>
 8007814:	4603      	mov	r3, r0
 8007816:	73fb      	strb	r3, [r7, #15]
 8007818:	e010      	b.n	800783c <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	68db      	ldr	r3, [r3, #12]
 800781e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f000 fa86 	bl	8007d38 <USB_CoreReset>
 800782c:	4603      	mov	r3, r0
 800782e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007834:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800783c:	7fbb      	ldrb	r3, [r7, #30]
 800783e:	2b01      	cmp	r3, #1
 8007840:	d10b      	bne.n	800785a <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	689b      	ldr	r3, [r3, #8]
 8007846:	f043 0206 	orr.w	r2, r3, #6
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	689b      	ldr	r3, [r3, #8]
 8007852:	f043 0220 	orr.w	r2, r3, #32
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800785a:	7bfb      	ldrb	r3, [r7, #15]
}
 800785c:	4618      	mov	r0, r3
 800785e:	3710      	adds	r7, #16
 8007860:	46bd      	mov	sp, r7
 8007862:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007866:	b004      	add	sp, #16
 8007868:	4770      	bx	lr
 800786a:	bf00      	nop
 800786c:	ffbdffbf 	.word	0xffbdffbf

08007870 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007870:	b480      	push	{r7}
 8007872:	b083      	sub	sp, #12
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	689b      	ldr	r3, [r3, #8]
 800787c:	f023 0201 	bic.w	r2, r3, #1
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007884:	2300      	movs	r3, #0
}
 8007886:	4618      	mov	r0, r3
 8007888:	370c      	adds	r7, #12
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr

08007892 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007892:	b580      	push	{r7, lr}
 8007894:	b084      	sub	sp, #16
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
 800789a:	460b      	mov	r3, r1
 800789c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800789e:	2300      	movs	r3, #0
 80078a0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	68db      	ldr	r3, [r3, #12]
 80078a6:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80078ae:	78fb      	ldrb	r3, [r7, #3]
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	d115      	bne.n	80078e0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	68db      	ldr	r3, [r3, #12]
 80078b8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80078c0:	200a      	movs	r0, #10
 80078c2:	f7fb faff 	bl	8002ec4 <HAL_Delay>
      ms += 10U;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	330a      	adds	r3, #10
 80078ca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f000 fa25 	bl	8007d1c <USB_GetMode>
 80078d2:	4603      	mov	r3, r0
 80078d4:	2b01      	cmp	r3, #1
 80078d6:	d01e      	beq.n	8007916 <USB_SetCurrentMode+0x84>
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2bc7      	cmp	r3, #199	@ 0xc7
 80078dc:	d9f0      	bls.n	80078c0 <USB_SetCurrentMode+0x2e>
 80078de:	e01a      	b.n	8007916 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80078e0:	78fb      	ldrb	r3, [r7, #3]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d115      	bne.n	8007912 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	68db      	ldr	r3, [r3, #12]
 80078ea:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80078f2:	200a      	movs	r0, #10
 80078f4:	f7fb fae6 	bl	8002ec4 <HAL_Delay>
      ms += 10U;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	330a      	adds	r3, #10
 80078fc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f000 fa0c 	bl	8007d1c <USB_GetMode>
 8007904:	4603      	mov	r3, r0
 8007906:	2b00      	cmp	r3, #0
 8007908:	d005      	beq.n	8007916 <USB_SetCurrentMode+0x84>
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	2bc7      	cmp	r3, #199	@ 0xc7
 800790e:	d9f0      	bls.n	80078f2 <USB_SetCurrentMode+0x60>
 8007910:	e001      	b.n	8007916 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007912:	2301      	movs	r3, #1
 8007914:	e005      	b.n	8007922 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2bc8      	cmp	r3, #200	@ 0xc8
 800791a:	d101      	bne.n	8007920 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800791c:	2301      	movs	r3, #1
 800791e:	e000      	b.n	8007922 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007920:	2300      	movs	r3, #0
}
 8007922:	4618      	mov	r0, r3
 8007924:	3710      	adds	r7, #16
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}
	...

0800792c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800792c:	b084      	sub	sp, #16
 800792e:	b580      	push	{r7, lr}
 8007930:	b086      	sub	sp, #24
 8007932:	af00      	add	r7, sp, #0
 8007934:	6078      	str	r0, [r7, #4]
 8007936:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800793a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800793e:	2300      	movs	r3, #0
 8007940:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007946:	2300      	movs	r3, #0
 8007948:	613b      	str	r3, [r7, #16]
 800794a:	e009      	b.n	8007960 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800794c:	687a      	ldr	r2, [r7, #4]
 800794e:	693b      	ldr	r3, [r7, #16]
 8007950:	3340      	adds	r3, #64	@ 0x40
 8007952:	009b      	lsls	r3, r3, #2
 8007954:	4413      	add	r3, r2
 8007956:	2200      	movs	r2, #0
 8007958:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	3301      	adds	r3, #1
 800795e:	613b      	str	r3, [r7, #16]
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	2b0e      	cmp	r3, #14
 8007964:	d9f2      	bls.n	800794c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007966:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800796a:	2b00      	cmp	r3, #0
 800796c:	d11c      	bne.n	80079a8 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	68fa      	ldr	r2, [r7, #12]
 8007978:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800797c:	f043 0302 	orr.w	r3, r3, #2
 8007980:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007986:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	601a      	str	r2, [r3, #0]
 80079a6:	e005      	b.n	80079b4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079ac:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80079ba:	461a      	mov	r2, r3
 80079bc:	2300      	movs	r3, #0
 80079be:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80079c0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	d10d      	bne.n	80079e4 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80079c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d104      	bne.n	80079da <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80079d0:	2100      	movs	r1, #0
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 f968 	bl	8007ca8 <USB_SetDevSpeed>
 80079d8:	e008      	b.n	80079ec <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80079da:	2101      	movs	r1, #1
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f000 f963 	bl	8007ca8 <USB_SetDevSpeed>
 80079e2:	e003      	b.n	80079ec <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80079e4:	2103      	movs	r1, #3
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f000 f95e 	bl	8007ca8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80079ec:	2110      	movs	r1, #16
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f000 f8fa 	bl	8007be8 <USB_FlushTxFifo>
 80079f4:	4603      	mov	r3, r0
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d001      	beq.n	80079fe <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80079fa:	2301      	movs	r3, #1
 80079fc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f000 f924 	bl	8007c4c <USB_FlushRxFifo>
 8007a04:	4603      	mov	r3, r0
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d001      	beq.n	8007a0e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a14:	461a      	mov	r2, r3
 8007a16:	2300      	movs	r3, #0
 8007a18:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a20:	461a      	mov	r2, r3
 8007a22:	2300      	movs	r3, #0
 8007a24:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a2c:	461a      	mov	r2, r3
 8007a2e:	2300      	movs	r3, #0
 8007a30:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a32:	2300      	movs	r3, #0
 8007a34:	613b      	str	r3, [r7, #16]
 8007a36:	e043      	b.n	8007ac0 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	015a      	lsls	r2, r3, #5
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	4413      	add	r3, r2
 8007a40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007a4a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007a4e:	d118      	bne.n	8007a82 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d10a      	bne.n	8007a6c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	015a      	lsls	r2, r3, #5
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	4413      	add	r3, r2
 8007a5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a62:	461a      	mov	r2, r3
 8007a64:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007a68:	6013      	str	r3, [r2, #0]
 8007a6a:	e013      	b.n	8007a94 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	015a      	lsls	r2, r3, #5
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	4413      	add	r3, r2
 8007a74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a78:	461a      	mov	r2, r3
 8007a7a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007a7e:	6013      	str	r3, [r2, #0]
 8007a80:	e008      	b.n	8007a94 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007a82:	693b      	ldr	r3, [r7, #16]
 8007a84:	015a      	lsls	r2, r3, #5
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	4413      	add	r3, r2
 8007a8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a8e:	461a      	mov	r2, r3
 8007a90:	2300      	movs	r3, #0
 8007a92:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	015a      	lsls	r2, r3, #5
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	4413      	add	r3, r2
 8007a9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007aa0:	461a      	mov	r2, r3
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	015a      	lsls	r2, r3, #5
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	4413      	add	r3, r2
 8007aae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ab2:	461a      	mov	r2, r3
 8007ab4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007ab8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	3301      	adds	r3, #1
 8007abe:	613b      	str	r3, [r7, #16]
 8007ac0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007ac4:	461a      	mov	r2, r3
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d3b5      	bcc.n	8007a38 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007acc:	2300      	movs	r3, #0
 8007ace:	613b      	str	r3, [r7, #16]
 8007ad0:	e043      	b.n	8007b5a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	015a      	lsls	r2, r3, #5
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	4413      	add	r3, r2
 8007ada:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007ae4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007ae8:	d118      	bne.n	8007b1c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8007aea:	693b      	ldr	r3, [r7, #16]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d10a      	bne.n	8007b06 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	015a      	lsls	r2, r3, #5
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	4413      	add	r3, r2
 8007af8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007afc:	461a      	mov	r2, r3
 8007afe:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007b02:	6013      	str	r3, [r2, #0]
 8007b04:	e013      	b.n	8007b2e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	015a      	lsls	r2, r3, #5
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	4413      	add	r3, r2
 8007b0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b12:	461a      	mov	r2, r3
 8007b14:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007b18:	6013      	str	r3, [r2, #0]
 8007b1a:	e008      	b.n	8007b2e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	015a      	lsls	r2, r3, #5
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	4413      	add	r3, r2
 8007b24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b28:	461a      	mov	r2, r3
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007b2e:	693b      	ldr	r3, [r7, #16]
 8007b30:	015a      	lsls	r2, r3, #5
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	4413      	add	r3, r2
 8007b36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007b40:	693b      	ldr	r3, [r7, #16]
 8007b42:	015a      	lsls	r2, r3, #5
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	4413      	add	r3, r2
 8007b48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b4c:	461a      	mov	r2, r3
 8007b4e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007b52:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	3301      	adds	r3, #1
 8007b58:	613b      	str	r3, [r7, #16]
 8007b5a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007b5e:	461a      	mov	r2, r3
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d3b5      	bcc.n	8007ad2 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b6c:	691b      	ldr	r3, [r3, #16]
 8007b6e:	68fa      	ldr	r2, [r7, #12]
 8007b70:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007b74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007b78:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007b86:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007b88:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d105      	bne.n	8007b9c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	699b      	ldr	r3, [r3, #24]
 8007b94:	f043 0210 	orr.w	r2, r3, #16
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	699a      	ldr	r2, [r3, #24]
 8007ba0:	4b0f      	ldr	r3, [pc, #60]	@ (8007be0 <USB_DevInit+0x2b4>)
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	687a      	ldr	r2, [r7, #4]
 8007ba6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007ba8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d005      	beq.n	8007bbc <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	699b      	ldr	r3, [r3, #24]
 8007bb4:	f043 0208 	orr.w	r2, r3, #8
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007bbc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007bc0:	2b01      	cmp	r3, #1
 8007bc2:	d105      	bne.n	8007bd0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	699a      	ldr	r2, [r3, #24]
 8007bc8:	4b06      	ldr	r3, [pc, #24]	@ (8007be4 <USB_DevInit+0x2b8>)
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	687a      	ldr	r2, [r7, #4]
 8007bce:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007bd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3718      	adds	r7, #24
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007bdc:	b004      	add	sp, #16
 8007bde:	4770      	bx	lr
 8007be0:	803c3800 	.word	0x803c3800
 8007be4:	40000004 	.word	0x40000004

08007be8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007be8:	b480      	push	{r7}
 8007bea:	b085      	sub	sp, #20
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
 8007bf0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	3301      	adds	r3, #1
 8007bfa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007c02:	d901      	bls.n	8007c08 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007c04:	2303      	movs	r3, #3
 8007c06:	e01b      	b.n	8007c40 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	691b      	ldr	r3, [r3, #16]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	daf2      	bge.n	8007bf6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007c10:	2300      	movs	r3, #0
 8007c12:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	019b      	lsls	r3, r3, #6
 8007c18:	f043 0220 	orr.w	r2, r3, #32
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	3301      	adds	r3, #1
 8007c24:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007c2c:	d901      	bls.n	8007c32 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007c2e:	2303      	movs	r3, #3
 8007c30:	e006      	b.n	8007c40 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	691b      	ldr	r3, [r3, #16]
 8007c36:	f003 0320 	and.w	r3, r3, #32
 8007c3a:	2b20      	cmp	r3, #32
 8007c3c:	d0f0      	beq.n	8007c20 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007c3e:	2300      	movs	r3, #0
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	3714      	adds	r7, #20
 8007c44:	46bd      	mov	sp, r7
 8007c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4a:	4770      	bx	lr

08007c4c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b085      	sub	sp, #20
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007c54:	2300      	movs	r3, #0
 8007c56:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	3301      	adds	r3, #1
 8007c5c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007c64:	d901      	bls.n	8007c6a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007c66:	2303      	movs	r3, #3
 8007c68:	e018      	b.n	8007c9c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	691b      	ldr	r3, [r3, #16]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	daf2      	bge.n	8007c58 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007c72:	2300      	movs	r3, #0
 8007c74:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2210      	movs	r2, #16
 8007c7a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	3301      	adds	r3, #1
 8007c80:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007c88:	d901      	bls.n	8007c8e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007c8a:	2303      	movs	r3, #3
 8007c8c:	e006      	b.n	8007c9c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	691b      	ldr	r3, [r3, #16]
 8007c92:	f003 0310 	and.w	r3, r3, #16
 8007c96:	2b10      	cmp	r3, #16
 8007c98:	d0f0      	beq.n	8007c7c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007c9a:	2300      	movs	r3, #0
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	3714      	adds	r7, #20
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca6:	4770      	bx	lr

08007ca8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b085      	sub	sp, #20
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
 8007cb0:	460b      	mov	r3, r1
 8007cb2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007cbe:	681a      	ldr	r2, [r3, #0]
 8007cc0:	78fb      	ldrb	r3, [r7, #3]
 8007cc2:	68f9      	ldr	r1, [r7, #12]
 8007cc4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007ccc:	2300      	movs	r3, #0
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3714      	adds	r7, #20
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd8:	4770      	bx	lr

08007cda <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007cda:	b480      	push	{r7}
 8007cdc:	b085      	sub	sp, #20
 8007cde:	af00      	add	r7, sp, #0
 8007ce0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	68fa      	ldr	r2, [r7, #12]
 8007cf0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007cf4:	f023 0303 	bic.w	r3, r3, #3
 8007cf8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d00:	685b      	ldr	r3, [r3, #4]
 8007d02:	68fa      	ldr	r2, [r7, #12]
 8007d04:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007d08:	f043 0302 	orr.w	r3, r3, #2
 8007d0c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007d0e:	2300      	movs	r3, #0
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	3714      	adds	r7, #20
 8007d14:	46bd      	mov	sp, r7
 8007d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1a:	4770      	bx	lr

08007d1c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b083      	sub	sp, #12
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	695b      	ldr	r3, [r3, #20]
 8007d28:	f003 0301 	and.w	r3, r3, #1
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	370c      	adds	r7, #12
 8007d30:	46bd      	mov	sp, r7
 8007d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d36:	4770      	bx	lr

08007d38 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b085      	sub	sp, #20
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007d40:	2300      	movs	r3, #0
 8007d42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	3301      	adds	r3, #1
 8007d48:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007d50:	d901      	bls.n	8007d56 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007d52:	2303      	movs	r3, #3
 8007d54:	e022      	b.n	8007d9c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	691b      	ldr	r3, [r3, #16]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	daf2      	bge.n	8007d44 <USB_CoreReset+0xc>

  count = 10U;
 8007d5e:	230a      	movs	r3, #10
 8007d60:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8007d62:	e002      	b.n	8007d6a <USB_CoreReset+0x32>
  {
    count--;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	3b01      	subs	r3, #1
 8007d68:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d1f9      	bne.n	8007d64 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	691b      	ldr	r3, [r3, #16]
 8007d74:	f043 0201 	orr.w	r2, r3, #1
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	3301      	adds	r3, #1
 8007d80:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007d88:	d901      	bls.n	8007d8e <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8007d8a:	2303      	movs	r3, #3
 8007d8c:	e006      	b.n	8007d9c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	691b      	ldr	r3, [r3, #16]
 8007d92:	f003 0301 	and.w	r3, r3, #1
 8007d96:	2b01      	cmp	r3, #1
 8007d98:	d0f0      	beq.n	8007d7c <USB_CoreReset+0x44>

  return HAL_OK;
 8007d9a:	2300      	movs	r3, #0
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3714      	adds	r7, #20
 8007da0:	46bd      	mov	sp, r7
 8007da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da6:	4770      	bx	lr

08007da8 <sniprintf>:
 8007da8:	b40c      	push	{r2, r3}
 8007daa:	b530      	push	{r4, r5, lr}
 8007dac:	4b18      	ldr	r3, [pc, #96]	@ (8007e10 <sniprintf+0x68>)
 8007dae:	1e0c      	subs	r4, r1, #0
 8007db0:	681d      	ldr	r5, [r3, #0]
 8007db2:	b09d      	sub	sp, #116	@ 0x74
 8007db4:	da08      	bge.n	8007dc8 <sniprintf+0x20>
 8007db6:	238b      	movs	r3, #139	@ 0x8b
 8007db8:	602b      	str	r3, [r5, #0]
 8007dba:	f04f 30ff 	mov.w	r0, #4294967295
 8007dbe:	b01d      	add	sp, #116	@ 0x74
 8007dc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007dc4:	b002      	add	sp, #8
 8007dc6:	4770      	bx	lr
 8007dc8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007dcc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007dd0:	f04f 0300 	mov.w	r3, #0
 8007dd4:	931b      	str	r3, [sp, #108]	@ 0x6c
 8007dd6:	bf14      	ite	ne
 8007dd8:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007ddc:	4623      	moveq	r3, r4
 8007dde:	9304      	str	r3, [sp, #16]
 8007de0:	9307      	str	r3, [sp, #28]
 8007de2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007de6:	9002      	str	r0, [sp, #8]
 8007de8:	9006      	str	r0, [sp, #24]
 8007dea:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007dee:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007df0:	ab21      	add	r3, sp, #132	@ 0x84
 8007df2:	a902      	add	r1, sp, #8
 8007df4:	4628      	mov	r0, r5
 8007df6:	9301      	str	r3, [sp, #4]
 8007df8:	f000 f9de 	bl	80081b8 <_svfiprintf_r>
 8007dfc:	1c43      	adds	r3, r0, #1
 8007dfe:	bfbc      	itt	lt
 8007e00:	238b      	movlt	r3, #139	@ 0x8b
 8007e02:	602b      	strlt	r3, [r5, #0]
 8007e04:	2c00      	cmp	r4, #0
 8007e06:	d0da      	beq.n	8007dbe <sniprintf+0x16>
 8007e08:	9b02      	ldr	r3, [sp, #8]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	701a      	strb	r2, [r3, #0]
 8007e0e:	e7d6      	b.n	8007dbe <sniprintf+0x16>
 8007e10:	20000050 	.word	0x20000050

08007e14 <siprintf>:
 8007e14:	b40e      	push	{r1, r2, r3}
 8007e16:	b510      	push	{r4, lr}
 8007e18:	b09d      	sub	sp, #116	@ 0x74
 8007e1a:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007e1c:	9002      	str	r0, [sp, #8]
 8007e1e:	9006      	str	r0, [sp, #24]
 8007e20:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007e24:	480a      	ldr	r0, [pc, #40]	@ (8007e50 <siprintf+0x3c>)
 8007e26:	9107      	str	r1, [sp, #28]
 8007e28:	9104      	str	r1, [sp, #16]
 8007e2a:	490a      	ldr	r1, [pc, #40]	@ (8007e54 <siprintf+0x40>)
 8007e2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e30:	9105      	str	r1, [sp, #20]
 8007e32:	2400      	movs	r4, #0
 8007e34:	a902      	add	r1, sp, #8
 8007e36:	6800      	ldr	r0, [r0, #0]
 8007e38:	9301      	str	r3, [sp, #4]
 8007e3a:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007e3c:	f000 f9bc 	bl	80081b8 <_svfiprintf_r>
 8007e40:	9b02      	ldr	r3, [sp, #8]
 8007e42:	701c      	strb	r4, [r3, #0]
 8007e44:	b01d      	add	sp, #116	@ 0x74
 8007e46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e4a:	b003      	add	sp, #12
 8007e4c:	4770      	bx	lr
 8007e4e:	bf00      	nop
 8007e50:	20000050 	.word	0x20000050
 8007e54:	ffff0208 	.word	0xffff0208

08007e58 <memmove>:
 8007e58:	4288      	cmp	r0, r1
 8007e5a:	b510      	push	{r4, lr}
 8007e5c:	eb01 0402 	add.w	r4, r1, r2
 8007e60:	d902      	bls.n	8007e68 <memmove+0x10>
 8007e62:	4284      	cmp	r4, r0
 8007e64:	4623      	mov	r3, r4
 8007e66:	d807      	bhi.n	8007e78 <memmove+0x20>
 8007e68:	1e43      	subs	r3, r0, #1
 8007e6a:	42a1      	cmp	r1, r4
 8007e6c:	d008      	beq.n	8007e80 <memmove+0x28>
 8007e6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e72:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007e76:	e7f8      	b.n	8007e6a <memmove+0x12>
 8007e78:	4402      	add	r2, r0
 8007e7a:	4601      	mov	r1, r0
 8007e7c:	428a      	cmp	r2, r1
 8007e7e:	d100      	bne.n	8007e82 <memmove+0x2a>
 8007e80:	bd10      	pop	{r4, pc}
 8007e82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007e86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007e8a:	e7f7      	b.n	8007e7c <memmove+0x24>

08007e8c <memset>:
 8007e8c:	4402      	add	r2, r0
 8007e8e:	4603      	mov	r3, r0
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d100      	bne.n	8007e96 <memset+0xa>
 8007e94:	4770      	bx	lr
 8007e96:	f803 1b01 	strb.w	r1, [r3], #1
 8007e9a:	e7f9      	b.n	8007e90 <memset+0x4>

08007e9c <__errno>:
 8007e9c:	4b01      	ldr	r3, [pc, #4]	@ (8007ea4 <__errno+0x8>)
 8007e9e:	6818      	ldr	r0, [r3, #0]
 8007ea0:	4770      	bx	lr
 8007ea2:	bf00      	nop
 8007ea4:	20000050 	.word	0x20000050

08007ea8 <__libc_init_array>:
 8007ea8:	b570      	push	{r4, r5, r6, lr}
 8007eaa:	4d0d      	ldr	r5, [pc, #52]	@ (8007ee0 <__libc_init_array+0x38>)
 8007eac:	4c0d      	ldr	r4, [pc, #52]	@ (8007ee4 <__libc_init_array+0x3c>)
 8007eae:	1b64      	subs	r4, r4, r5
 8007eb0:	10a4      	asrs	r4, r4, #2
 8007eb2:	2600      	movs	r6, #0
 8007eb4:	42a6      	cmp	r6, r4
 8007eb6:	d109      	bne.n	8007ecc <__libc_init_array+0x24>
 8007eb8:	4d0b      	ldr	r5, [pc, #44]	@ (8007ee8 <__libc_init_array+0x40>)
 8007eba:	4c0c      	ldr	r4, [pc, #48]	@ (8007eec <__libc_init_array+0x44>)
 8007ebc:	f000 fc4a 	bl	8008754 <_init>
 8007ec0:	1b64      	subs	r4, r4, r5
 8007ec2:	10a4      	asrs	r4, r4, #2
 8007ec4:	2600      	movs	r6, #0
 8007ec6:	42a6      	cmp	r6, r4
 8007ec8:	d105      	bne.n	8007ed6 <__libc_init_array+0x2e>
 8007eca:	bd70      	pop	{r4, r5, r6, pc}
 8007ecc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ed0:	4798      	blx	r3
 8007ed2:	3601      	adds	r6, #1
 8007ed4:	e7ee      	b.n	8007eb4 <__libc_init_array+0xc>
 8007ed6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007eda:	4798      	blx	r3
 8007edc:	3601      	adds	r6, #1
 8007ede:	e7f2      	b.n	8007ec6 <__libc_init_array+0x1e>
 8007ee0:	08009e0c 	.word	0x08009e0c
 8007ee4:	08009e0c 	.word	0x08009e0c
 8007ee8:	08009e0c 	.word	0x08009e0c
 8007eec:	08009e10 	.word	0x08009e10

08007ef0 <__retarget_lock_acquire_recursive>:
 8007ef0:	4770      	bx	lr

08007ef2 <__retarget_lock_release_recursive>:
 8007ef2:	4770      	bx	lr

08007ef4 <memcpy>:
 8007ef4:	440a      	add	r2, r1
 8007ef6:	4291      	cmp	r1, r2
 8007ef8:	f100 33ff 	add.w	r3, r0, #4294967295
 8007efc:	d100      	bne.n	8007f00 <memcpy+0xc>
 8007efe:	4770      	bx	lr
 8007f00:	b510      	push	{r4, lr}
 8007f02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f0a:	4291      	cmp	r1, r2
 8007f0c:	d1f9      	bne.n	8007f02 <memcpy+0xe>
 8007f0e:	bd10      	pop	{r4, pc}

08007f10 <_free_r>:
 8007f10:	b538      	push	{r3, r4, r5, lr}
 8007f12:	4605      	mov	r5, r0
 8007f14:	2900      	cmp	r1, #0
 8007f16:	d041      	beq.n	8007f9c <_free_r+0x8c>
 8007f18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f1c:	1f0c      	subs	r4, r1, #4
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	bfb8      	it	lt
 8007f22:	18e4      	addlt	r4, r4, r3
 8007f24:	f000 f8e0 	bl	80080e8 <__malloc_lock>
 8007f28:	4a1d      	ldr	r2, [pc, #116]	@ (8007fa0 <_free_r+0x90>)
 8007f2a:	6813      	ldr	r3, [r2, #0]
 8007f2c:	b933      	cbnz	r3, 8007f3c <_free_r+0x2c>
 8007f2e:	6063      	str	r3, [r4, #4]
 8007f30:	6014      	str	r4, [r2, #0]
 8007f32:	4628      	mov	r0, r5
 8007f34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f38:	f000 b8dc 	b.w	80080f4 <__malloc_unlock>
 8007f3c:	42a3      	cmp	r3, r4
 8007f3e:	d908      	bls.n	8007f52 <_free_r+0x42>
 8007f40:	6820      	ldr	r0, [r4, #0]
 8007f42:	1821      	adds	r1, r4, r0
 8007f44:	428b      	cmp	r3, r1
 8007f46:	bf01      	itttt	eq
 8007f48:	6819      	ldreq	r1, [r3, #0]
 8007f4a:	685b      	ldreq	r3, [r3, #4]
 8007f4c:	1809      	addeq	r1, r1, r0
 8007f4e:	6021      	streq	r1, [r4, #0]
 8007f50:	e7ed      	b.n	8007f2e <_free_r+0x1e>
 8007f52:	461a      	mov	r2, r3
 8007f54:	685b      	ldr	r3, [r3, #4]
 8007f56:	b10b      	cbz	r3, 8007f5c <_free_r+0x4c>
 8007f58:	42a3      	cmp	r3, r4
 8007f5a:	d9fa      	bls.n	8007f52 <_free_r+0x42>
 8007f5c:	6811      	ldr	r1, [r2, #0]
 8007f5e:	1850      	adds	r0, r2, r1
 8007f60:	42a0      	cmp	r0, r4
 8007f62:	d10b      	bne.n	8007f7c <_free_r+0x6c>
 8007f64:	6820      	ldr	r0, [r4, #0]
 8007f66:	4401      	add	r1, r0
 8007f68:	1850      	adds	r0, r2, r1
 8007f6a:	4283      	cmp	r3, r0
 8007f6c:	6011      	str	r1, [r2, #0]
 8007f6e:	d1e0      	bne.n	8007f32 <_free_r+0x22>
 8007f70:	6818      	ldr	r0, [r3, #0]
 8007f72:	685b      	ldr	r3, [r3, #4]
 8007f74:	6053      	str	r3, [r2, #4]
 8007f76:	4408      	add	r0, r1
 8007f78:	6010      	str	r0, [r2, #0]
 8007f7a:	e7da      	b.n	8007f32 <_free_r+0x22>
 8007f7c:	d902      	bls.n	8007f84 <_free_r+0x74>
 8007f7e:	230c      	movs	r3, #12
 8007f80:	602b      	str	r3, [r5, #0]
 8007f82:	e7d6      	b.n	8007f32 <_free_r+0x22>
 8007f84:	6820      	ldr	r0, [r4, #0]
 8007f86:	1821      	adds	r1, r4, r0
 8007f88:	428b      	cmp	r3, r1
 8007f8a:	bf04      	itt	eq
 8007f8c:	6819      	ldreq	r1, [r3, #0]
 8007f8e:	685b      	ldreq	r3, [r3, #4]
 8007f90:	6063      	str	r3, [r4, #4]
 8007f92:	bf04      	itt	eq
 8007f94:	1809      	addeq	r1, r1, r0
 8007f96:	6021      	streq	r1, [r4, #0]
 8007f98:	6054      	str	r4, [r2, #4]
 8007f9a:	e7ca      	b.n	8007f32 <_free_r+0x22>
 8007f9c:	bd38      	pop	{r3, r4, r5, pc}
 8007f9e:	bf00      	nop
 8007fa0:	20000f38 	.word	0x20000f38

08007fa4 <sbrk_aligned>:
 8007fa4:	b570      	push	{r4, r5, r6, lr}
 8007fa6:	4e0f      	ldr	r6, [pc, #60]	@ (8007fe4 <sbrk_aligned+0x40>)
 8007fa8:	460c      	mov	r4, r1
 8007faa:	6831      	ldr	r1, [r6, #0]
 8007fac:	4605      	mov	r5, r0
 8007fae:	b911      	cbnz	r1, 8007fb6 <sbrk_aligned+0x12>
 8007fb0:	f000 fb8a 	bl	80086c8 <_sbrk_r>
 8007fb4:	6030      	str	r0, [r6, #0]
 8007fb6:	4621      	mov	r1, r4
 8007fb8:	4628      	mov	r0, r5
 8007fba:	f000 fb85 	bl	80086c8 <_sbrk_r>
 8007fbe:	1c43      	adds	r3, r0, #1
 8007fc0:	d103      	bne.n	8007fca <sbrk_aligned+0x26>
 8007fc2:	f04f 34ff 	mov.w	r4, #4294967295
 8007fc6:	4620      	mov	r0, r4
 8007fc8:	bd70      	pop	{r4, r5, r6, pc}
 8007fca:	1cc4      	adds	r4, r0, #3
 8007fcc:	f024 0403 	bic.w	r4, r4, #3
 8007fd0:	42a0      	cmp	r0, r4
 8007fd2:	d0f8      	beq.n	8007fc6 <sbrk_aligned+0x22>
 8007fd4:	1a21      	subs	r1, r4, r0
 8007fd6:	4628      	mov	r0, r5
 8007fd8:	f000 fb76 	bl	80086c8 <_sbrk_r>
 8007fdc:	3001      	adds	r0, #1
 8007fde:	d1f2      	bne.n	8007fc6 <sbrk_aligned+0x22>
 8007fe0:	e7ef      	b.n	8007fc2 <sbrk_aligned+0x1e>
 8007fe2:	bf00      	nop
 8007fe4:	20000f34 	.word	0x20000f34

08007fe8 <_malloc_r>:
 8007fe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fec:	1ccd      	adds	r5, r1, #3
 8007fee:	f025 0503 	bic.w	r5, r5, #3
 8007ff2:	3508      	adds	r5, #8
 8007ff4:	2d0c      	cmp	r5, #12
 8007ff6:	bf38      	it	cc
 8007ff8:	250c      	movcc	r5, #12
 8007ffa:	2d00      	cmp	r5, #0
 8007ffc:	4606      	mov	r6, r0
 8007ffe:	db01      	blt.n	8008004 <_malloc_r+0x1c>
 8008000:	42a9      	cmp	r1, r5
 8008002:	d904      	bls.n	800800e <_malloc_r+0x26>
 8008004:	230c      	movs	r3, #12
 8008006:	6033      	str	r3, [r6, #0]
 8008008:	2000      	movs	r0, #0
 800800a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800800e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80080e4 <_malloc_r+0xfc>
 8008012:	f000 f869 	bl	80080e8 <__malloc_lock>
 8008016:	f8d8 3000 	ldr.w	r3, [r8]
 800801a:	461c      	mov	r4, r3
 800801c:	bb44      	cbnz	r4, 8008070 <_malloc_r+0x88>
 800801e:	4629      	mov	r1, r5
 8008020:	4630      	mov	r0, r6
 8008022:	f7ff ffbf 	bl	8007fa4 <sbrk_aligned>
 8008026:	1c43      	adds	r3, r0, #1
 8008028:	4604      	mov	r4, r0
 800802a:	d158      	bne.n	80080de <_malloc_r+0xf6>
 800802c:	f8d8 4000 	ldr.w	r4, [r8]
 8008030:	4627      	mov	r7, r4
 8008032:	2f00      	cmp	r7, #0
 8008034:	d143      	bne.n	80080be <_malloc_r+0xd6>
 8008036:	2c00      	cmp	r4, #0
 8008038:	d04b      	beq.n	80080d2 <_malloc_r+0xea>
 800803a:	6823      	ldr	r3, [r4, #0]
 800803c:	4639      	mov	r1, r7
 800803e:	4630      	mov	r0, r6
 8008040:	eb04 0903 	add.w	r9, r4, r3
 8008044:	f000 fb40 	bl	80086c8 <_sbrk_r>
 8008048:	4581      	cmp	r9, r0
 800804a:	d142      	bne.n	80080d2 <_malloc_r+0xea>
 800804c:	6821      	ldr	r1, [r4, #0]
 800804e:	1a6d      	subs	r5, r5, r1
 8008050:	4629      	mov	r1, r5
 8008052:	4630      	mov	r0, r6
 8008054:	f7ff ffa6 	bl	8007fa4 <sbrk_aligned>
 8008058:	3001      	adds	r0, #1
 800805a:	d03a      	beq.n	80080d2 <_malloc_r+0xea>
 800805c:	6823      	ldr	r3, [r4, #0]
 800805e:	442b      	add	r3, r5
 8008060:	6023      	str	r3, [r4, #0]
 8008062:	f8d8 3000 	ldr.w	r3, [r8]
 8008066:	685a      	ldr	r2, [r3, #4]
 8008068:	bb62      	cbnz	r2, 80080c4 <_malloc_r+0xdc>
 800806a:	f8c8 7000 	str.w	r7, [r8]
 800806e:	e00f      	b.n	8008090 <_malloc_r+0xa8>
 8008070:	6822      	ldr	r2, [r4, #0]
 8008072:	1b52      	subs	r2, r2, r5
 8008074:	d420      	bmi.n	80080b8 <_malloc_r+0xd0>
 8008076:	2a0b      	cmp	r2, #11
 8008078:	d917      	bls.n	80080aa <_malloc_r+0xc2>
 800807a:	1961      	adds	r1, r4, r5
 800807c:	42a3      	cmp	r3, r4
 800807e:	6025      	str	r5, [r4, #0]
 8008080:	bf18      	it	ne
 8008082:	6059      	strne	r1, [r3, #4]
 8008084:	6863      	ldr	r3, [r4, #4]
 8008086:	bf08      	it	eq
 8008088:	f8c8 1000 	streq.w	r1, [r8]
 800808c:	5162      	str	r2, [r4, r5]
 800808e:	604b      	str	r3, [r1, #4]
 8008090:	4630      	mov	r0, r6
 8008092:	f000 f82f 	bl	80080f4 <__malloc_unlock>
 8008096:	f104 000b 	add.w	r0, r4, #11
 800809a:	1d23      	adds	r3, r4, #4
 800809c:	f020 0007 	bic.w	r0, r0, #7
 80080a0:	1ac2      	subs	r2, r0, r3
 80080a2:	bf1c      	itt	ne
 80080a4:	1a1b      	subne	r3, r3, r0
 80080a6:	50a3      	strne	r3, [r4, r2]
 80080a8:	e7af      	b.n	800800a <_malloc_r+0x22>
 80080aa:	6862      	ldr	r2, [r4, #4]
 80080ac:	42a3      	cmp	r3, r4
 80080ae:	bf0c      	ite	eq
 80080b0:	f8c8 2000 	streq.w	r2, [r8]
 80080b4:	605a      	strne	r2, [r3, #4]
 80080b6:	e7eb      	b.n	8008090 <_malloc_r+0xa8>
 80080b8:	4623      	mov	r3, r4
 80080ba:	6864      	ldr	r4, [r4, #4]
 80080bc:	e7ae      	b.n	800801c <_malloc_r+0x34>
 80080be:	463c      	mov	r4, r7
 80080c0:	687f      	ldr	r7, [r7, #4]
 80080c2:	e7b6      	b.n	8008032 <_malloc_r+0x4a>
 80080c4:	461a      	mov	r2, r3
 80080c6:	685b      	ldr	r3, [r3, #4]
 80080c8:	42a3      	cmp	r3, r4
 80080ca:	d1fb      	bne.n	80080c4 <_malloc_r+0xdc>
 80080cc:	2300      	movs	r3, #0
 80080ce:	6053      	str	r3, [r2, #4]
 80080d0:	e7de      	b.n	8008090 <_malloc_r+0xa8>
 80080d2:	230c      	movs	r3, #12
 80080d4:	6033      	str	r3, [r6, #0]
 80080d6:	4630      	mov	r0, r6
 80080d8:	f000 f80c 	bl	80080f4 <__malloc_unlock>
 80080dc:	e794      	b.n	8008008 <_malloc_r+0x20>
 80080de:	6005      	str	r5, [r0, #0]
 80080e0:	e7d6      	b.n	8008090 <_malloc_r+0xa8>
 80080e2:	bf00      	nop
 80080e4:	20000f38 	.word	0x20000f38

080080e8 <__malloc_lock>:
 80080e8:	4801      	ldr	r0, [pc, #4]	@ (80080f0 <__malloc_lock+0x8>)
 80080ea:	f7ff bf01 	b.w	8007ef0 <__retarget_lock_acquire_recursive>
 80080ee:	bf00      	nop
 80080f0:	20000f30 	.word	0x20000f30

080080f4 <__malloc_unlock>:
 80080f4:	4801      	ldr	r0, [pc, #4]	@ (80080fc <__malloc_unlock+0x8>)
 80080f6:	f7ff befc 	b.w	8007ef2 <__retarget_lock_release_recursive>
 80080fa:	bf00      	nop
 80080fc:	20000f30 	.word	0x20000f30

08008100 <__ssputs_r>:
 8008100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008104:	688e      	ldr	r6, [r1, #8]
 8008106:	461f      	mov	r7, r3
 8008108:	42be      	cmp	r6, r7
 800810a:	680b      	ldr	r3, [r1, #0]
 800810c:	4682      	mov	sl, r0
 800810e:	460c      	mov	r4, r1
 8008110:	4690      	mov	r8, r2
 8008112:	d82d      	bhi.n	8008170 <__ssputs_r+0x70>
 8008114:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008118:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800811c:	d026      	beq.n	800816c <__ssputs_r+0x6c>
 800811e:	6965      	ldr	r5, [r4, #20]
 8008120:	6909      	ldr	r1, [r1, #16]
 8008122:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008126:	eba3 0901 	sub.w	r9, r3, r1
 800812a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800812e:	1c7b      	adds	r3, r7, #1
 8008130:	444b      	add	r3, r9
 8008132:	106d      	asrs	r5, r5, #1
 8008134:	429d      	cmp	r5, r3
 8008136:	bf38      	it	cc
 8008138:	461d      	movcc	r5, r3
 800813a:	0553      	lsls	r3, r2, #21
 800813c:	d527      	bpl.n	800818e <__ssputs_r+0x8e>
 800813e:	4629      	mov	r1, r5
 8008140:	f7ff ff52 	bl	8007fe8 <_malloc_r>
 8008144:	4606      	mov	r6, r0
 8008146:	b360      	cbz	r0, 80081a2 <__ssputs_r+0xa2>
 8008148:	6921      	ldr	r1, [r4, #16]
 800814a:	464a      	mov	r2, r9
 800814c:	f7ff fed2 	bl	8007ef4 <memcpy>
 8008150:	89a3      	ldrh	r3, [r4, #12]
 8008152:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008156:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800815a:	81a3      	strh	r3, [r4, #12]
 800815c:	6126      	str	r6, [r4, #16]
 800815e:	6165      	str	r5, [r4, #20]
 8008160:	444e      	add	r6, r9
 8008162:	eba5 0509 	sub.w	r5, r5, r9
 8008166:	6026      	str	r6, [r4, #0]
 8008168:	60a5      	str	r5, [r4, #8]
 800816a:	463e      	mov	r6, r7
 800816c:	42be      	cmp	r6, r7
 800816e:	d900      	bls.n	8008172 <__ssputs_r+0x72>
 8008170:	463e      	mov	r6, r7
 8008172:	6820      	ldr	r0, [r4, #0]
 8008174:	4632      	mov	r2, r6
 8008176:	4641      	mov	r1, r8
 8008178:	f7ff fe6e 	bl	8007e58 <memmove>
 800817c:	68a3      	ldr	r3, [r4, #8]
 800817e:	1b9b      	subs	r3, r3, r6
 8008180:	60a3      	str	r3, [r4, #8]
 8008182:	6823      	ldr	r3, [r4, #0]
 8008184:	4433      	add	r3, r6
 8008186:	6023      	str	r3, [r4, #0]
 8008188:	2000      	movs	r0, #0
 800818a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800818e:	462a      	mov	r2, r5
 8008190:	f000 faaa 	bl	80086e8 <_realloc_r>
 8008194:	4606      	mov	r6, r0
 8008196:	2800      	cmp	r0, #0
 8008198:	d1e0      	bne.n	800815c <__ssputs_r+0x5c>
 800819a:	6921      	ldr	r1, [r4, #16]
 800819c:	4650      	mov	r0, sl
 800819e:	f7ff feb7 	bl	8007f10 <_free_r>
 80081a2:	230c      	movs	r3, #12
 80081a4:	f8ca 3000 	str.w	r3, [sl]
 80081a8:	89a3      	ldrh	r3, [r4, #12]
 80081aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80081ae:	81a3      	strh	r3, [r4, #12]
 80081b0:	f04f 30ff 	mov.w	r0, #4294967295
 80081b4:	e7e9      	b.n	800818a <__ssputs_r+0x8a>
	...

080081b8 <_svfiprintf_r>:
 80081b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081bc:	4698      	mov	r8, r3
 80081be:	898b      	ldrh	r3, [r1, #12]
 80081c0:	061b      	lsls	r3, r3, #24
 80081c2:	b09d      	sub	sp, #116	@ 0x74
 80081c4:	4607      	mov	r7, r0
 80081c6:	460d      	mov	r5, r1
 80081c8:	4614      	mov	r4, r2
 80081ca:	d510      	bpl.n	80081ee <_svfiprintf_r+0x36>
 80081cc:	690b      	ldr	r3, [r1, #16]
 80081ce:	b973      	cbnz	r3, 80081ee <_svfiprintf_r+0x36>
 80081d0:	2140      	movs	r1, #64	@ 0x40
 80081d2:	f7ff ff09 	bl	8007fe8 <_malloc_r>
 80081d6:	6028      	str	r0, [r5, #0]
 80081d8:	6128      	str	r0, [r5, #16]
 80081da:	b930      	cbnz	r0, 80081ea <_svfiprintf_r+0x32>
 80081dc:	230c      	movs	r3, #12
 80081de:	603b      	str	r3, [r7, #0]
 80081e0:	f04f 30ff 	mov.w	r0, #4294967295
 80081e4:	b01d      	add	sp, #116	@ 0x74
 80081e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081ea:	2340      	movs	r3, #64	@ 0x40
 80081ec:	616b      	str	r3, [r5, #20]
 80081ee:	2300      	movs	r3, #0
 80081f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80081f2:	2320      	movs	r3, #32
 80081f4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80081f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80081fc:	2330      	movs	r3, #48	@ 0x30
 80081fe:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800839c <_svfiprintf_r+0x1e4>
 8008202:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008206:	f04f 0901 	mov.w	r9, #1
 800820a:	4623      	mov	r3, r4
 800820c:	469a      	mov	sl, r3
 800820e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008212:	b10a      	cbz	r2, 8008218 <_svfiprintf_r+0x60>
 8008214:	2a25      	cmp	r2, #37	@ 0x25
 8008216:	d1f9      	bne.n	800820c <_svfiprintf_r+0x54>
 8008218:	ebba 0b04 	subs.w	fp, sl, r4
 800821c:	d00b      	beq.n	8008236 <_svfiprintf_r+0x7e>
 800821e:	465b      	mov	r3, fp
 8008220:	4622      	mov	r2, r4
 8008222:	4629      	mov	r1, r5
 8008224:	4638      	mov	r0, r7
 8008226:	f7ff ff6b 	bl	8008100 <__ssputs_r>
 800822a:	3001      	adds	r0, #1
 800822c:	f000 80a7 	beq.w	800837e <_svfiprintf_r+0x1c6>
 8008230:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008232:	445a      	add	r2, fp
 8008234:	9209      	str	r2, [sp, #36]	@ 0x24
 8008236:	f89a 3000 	ldrb.w	r3, [sl]
 800823a:	2b00      	cmp	r3, #0
 800823c:	f000 809f 	beq.w	800837e <_svfiprintf_r+0x1c6>
 8008240:	2300      	movs	r3, #0
 8008242:	f04f 32ff 	mov.w	r2, #4294967295
 8008246:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800824a:	f10a 0a01 	add.w	sl, sl, #1
 800824e:	9304      	str	r3, [sp, #16]
 8008250:	9307      	str	r3, [sp, #28]
 8008252:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008256:	931a      	str	r3, [sp, #104]	@ 0x68
 8008258:	4654      	mov	r4, sl
 800825a:	2205      	movs	r2, #5
 800825c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008260:	484e      	ldr	r0, [pc, #312]	@ (800839c <_svfiprintf_r+0x1e4>)
 8008262:	f7f7 ffdd 	bl	8000220 <memchr>
 8008266:	9a04      	ldr	r2, [sp, #16]
 8008268:	b9d8      	cbnz	r0, 80082a2 <_svfiprintf_r+0xea>
 800826a:	06d0      	lsls	r0, r2, #27
 800826c:	bf44      	itt	mi
 800826e:	2320      	movmi	r3, #32
 8008270:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008274:	0711      	lsls	r1, r2, #28
 8008276:	bf44      	itt	mi
 8008278:	232b      	movmi	r3, #43	@ 0x2b
 800827a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800827e:	f89a 3000 	ldrb.w	r3, [sl]
 8008282:	2b2a      	cmp	r3, #42	@ 0x2a
 8008284:	d015      	beq.n	80082b2 <_svfiprintf_r+0xfa>
 8008286:	9a07      	ldr	r2, [sp, #28]
 8008288:	4654      	mov	r4, sl
 800828a:	2000      	movs	r0, #0
 800828c:	f04f 0c0a 	mov.w	ip, #10
 8008290:	4621      	mov	r1, r4
 8008292:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008296:	3b30      	subs	r3, #48	@ 0x30
 8008298:	2b09      	cmp	r3, #9
 800829a:	d94b      	bls.n	8008334 <_svfiprintf_r+0x17c>
 800829c:	b1b0      	cbz	r0, 80082cc <_svfiprintf_r+0x114>
 800829e:	9207      	str	r2, [sp, #28]
 80082a0:	e014      	b.n	80082cc <_svfiprintf_r+0x114>
 80082a2:	eba0 0308 	sub.w	r3, r0, r8
 80082a6:	fa09 f303 	lsl.w	r3, r9, r3
 80082aa:	4313      	orrs	r3, r2
 80082ac:	9304      	str	r3, [sp, #16]
 80082ae:	46a2      	mov	sl, r4
 80082b0:	e7d2      	b.n	8008258 <_svfiprintf_r+0xa0>
 80082b2:	9b03      	ldr	r3, [sp, #12]
 80082b4:	1d19      	adds	r1, r3, #4
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	9103      	str	r1, [sp, #12]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	bfbb      	ittet	lt
 80082be:	425b      	neglt	r3, r3
 80082c0:	f042 0202 	orrlt.w	r2, r2, #2
 80082c4:	9307      	strge	r3, [sp, #28]
 80082c6:	9307      	strlt	r3, [sp, #28]
 80082c8:	bfb8      	it	lt
 80082ca:	9204      	strlt	r2, [sp, #16]
 80082cc:	7823      	ldrb	r3, [r4, #0]
 80082ce:	2b2e      	cmp	r3, #46	@ 0x2e
 80082d0:	d10a      	bne.n	80082e8 <_svfiprintf_r+0x130>
 80082d2:	7863      	ldrb	r3, [r4, #1]
 80082d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80082d6:	d132      	bne.n	800833e <_svfiprintf_r+0x186>
 80082d8:	9b03      	ldr	r3, [sp, #12]
 80082da:	1d1a      	adds	r2, r3, #4
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	9203      	str	r2, [sp, #12]
 80082e0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80082e4:	3402      	adds	r4, #2
 80082e6:	9305      	str	r3, [sp, #20]
 80082e8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80083ac <_svfiprintf_r+0x1f4>
 80082ec:	7821      	ldrb	r1, [r4, #0]
 80082ee:	2203      	movs	r2, #3
 80082f0:	4650      	mov	r0, sl
 80082f2:	f7f7 ff95 	bl	8000220 <memchr>
 80082f6:	b138      	cbz	r0, 8008308 <_svfiprintf_r+0x150>
 80082f8:	9b04      	ldr	r3, [sp, #16]
 80082fa:	eba0 000a 	sub.w	r0, r0, sl
 80082fe:	2240      	movs	r2, #64	@ 0x40
 8008300:	4082      	lsls	r2, r0
 8008302:	4313      	orrs	r3, r2
 8008304:	3401      	adds	r4, #1
 8008306:	9304      	str	r3, [sp, #16]
 8008308:	f814 1b01 	ldrb.w	r1, [r4], #1
 800830c:	4824      	ldr	r0, [pc, #144]	@ (80083a0 <_svfiprintf_r+0x1e8>)
 800830e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008312:	2206      	movs	r2, #6
 8008314:	f7f7 ff84 	bl	8000220 <memchr>
 8008318:	2800      	cmp	r0, #0
 800831a:	d036      	beq.n	800838a <_svfiprintf_r+0x1d2>
 800831c:	4b21      	ldr	r3, [pc, #132]	@ (80083a4 <_svfiprintf_r+0x1ec>)
 800831e:	bb1b      	cbnz	r3, 8008368 <_svfiprintf_r+0x1b0>
 8008320:	9b03      	ldr	r3, [sp, #12]
 8008322:	3307      	adds	r3, #7
 8008324:	f023 0307 	bic.w	r3, r3, #7
 8008328:	3308      	adds	r3, #8
 800832a:	9303      	str	r3, [sp, #12]
 800832c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800832e:	4433      	add	r3, r6
 8008330:	9309      	str	r3, [sp, #36]	@ 0x24
 8008332:	e76a      	b.n	800820a <_svfiprintf_r+0x52>
 8008334:	fb0c 3202 	mla	r2, ip, r2, r3
 8008338:	460c      	mov	r4, r1
 800833a:	2001      	movs	r0, #1
 800833c:	e7a8      	b.n	8008290 <_svfiprintf_r+0xd8>
 800833e:	2300      	movs	r3, #0
 8008340:	3401      	adds	r4, #1
 8008342:	9305      	str	r3, [sp, #20]
 8008344:	4619      	mov	r1, r3
 8008346:	f04f 0c0a 	mov.w	ip, #10
 800834a:	4620      	mov	r0, r4
 800834c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008350:	3a30      	subs	r2, #48	@ 0x30
 8008352:	2a09      	cmp	r2, #9
 8008354:	d903      	bls.n	800835e <_svfiprintf_r+0x1a6>
 8008356:	2b00      	cmp	r3, #0
 8008358:	d0c6      	beq.n	80082e8 <_svfiprintf_r+0x130>
 800835a:	9105      	str	r1, [sp, #20]
 800835c:	e7c4      	b.n	80082e8 <_svfiprintf_r+0x130>
 800835e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008362:	4604      	mov	r4, r0
 8008364:	2301      	movs	r3, #1
 8008366:	e7f0      	b.n	800834a <_svfiprintf_r+0x192>
 8008368:	ab03      	add	r3, sp, #12
 800836a:	9300      	str	r3, [sp, #0]
 800836c:	462a      	mov	r2, r5
 800836e:	4b0e      	ldr	r3, [pc, #56]	@ (80083a8 <_svfiprintf_r+0x1f0>)
 8008370:	a904      	add	r1, sp, #16
 8008372:	4638      	mov	r0, r7
 8008374:	f3af 8000 	nop.w
 8008378:	1c42      	adds	r2, r0, #1
 800837a:	4606      	mov	r6, r0
 800837c:	d1d6      	bne.n	800832c <_svfiprintf_r+0x174>
 800837e:	89ab      	ldrh	r3, [r5, #12]
 8008380:	065b      	lsls	r3, r3, #25
 8008382:	f53f af2d 	bmi.w	80081e0 <_svfiprintf_r+0x28>
 8008386:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008388:	e72c      	b.n	80081e4 <_svfiprintf_r+0x2c>
 800838a:	ab03      	add	r3, sp, #12
 800838c:	9300      	str	r3, [sp, #0]
 800838e:	462a      	mov	r2, r5
 8008390:	4b05      	ldr	r3, [pc, #20]	@ (80083a8 <_svfiprintf_r+0x1f0>)
 8008392:	a904      	add	r1, sp, #16
 8008394:	4638      	mov	r0, r7
 8008396:	f000 f879 	bl	800848c <_printf_i>
 800839a:	e7ed      	b.n	8008378 <_svfiprintf_r+0x1c0>
 800839c:	08009dd0 	.word	0x08009dd0
 80083a0:	08009dda 	.word	0x08009dda
 80083a4:	00000000 	.word	0x00000000
 80083a8:	08008101 	.word	0x08008101
 80083ac:	08009dd6 	.word	0x08009dd6

080083b0 <_printf_common>:
 80083b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083b4:	4616      	mov	r6, r2
 80083b6:	4698      	mov	r8, r3
 80083b8:	688a      	ldr	r2, [r1, #8]
 80083ba:	690b      	ldr	r3, [r1, #16]
 80083bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80083c0:	4293      	cmp	r3, r2
 80083c2:	bfb8      	it	lt
 80083c4:	4613      	movlt	r3, r2
 80083c6:	6033      	str	r3, [r6, #0]
 80083c8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80083cc:	4607      	mov	r7, r0
 80083ce:	460c      	mov	r4, r1
 80083d0:	b10a      	cbz	r2, 80083d6 <_printf_common+0x26>
 80083d2:	3301      	adds	r3, #1
 80083d4:	6033      	str	r3, [r6, #0]
 80083d6:	6823      	ldr	r3, [r4, #0]
 80083d8:	0699      	lsls	r1, r3, #26
 80083da:	bf42      	ittt	mi
 80083dc:	6833      	ldrmi	r3, [r6, #0]
 80083de:	3302      	addmi	r3, #2
 80083e0:	6033      	strmi	r3, [r6, #0]
 80083e2:	6825      	ldr	r5, [r4, #0]
 80083e4:	f015 0506 	ands.w	r5, r5, #6
 80083e8:	d106      	bne.n	80083f8 <_printf_common+0x48>
 80083ea:	f104 0a19 	add.w	sl, r4, #25
 80083ee:	68e3      	ldr	r3, [r4, #12]
 80083f0:	6832      	ldr	r2, [r6, #0]
 80083f2:	1a9b      	subs	r3, r3, r2
 80083f4:	42ab      	cmp	r3, r5
 80083f6:	dc26      	bgt.n	8008446 <_printf_common+0x96>
 80083f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80083fc:	6822      	ldr	r2, [r4, #0]
 80083fe:	3b00      	subs	r3, #0
 8008400:	bf18      	it	ne
 8008402:	2301      	movne	r3, #1
 8008404:	0692      	lsls	r2, r2, #26
 8008406:	d42b      	bmi.n	8008460 <_printf_common+0xb0>
 8008408:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800840c:	4641      	mov	r1, r8
 800840e:	4638      	mov	r0, r7
 8008410:	47c8      	blx	r9
 8008412:	3001      	adds	r0, #1
 8008414:	d01e      	beq.n	8008454 <_printf_common+0xa4>
 8008416:	6823      	ldr	r3, [r4, #0]
 8008418:	6922      	ldr	r2, [r4, #16]
 800841a:	f003 0306 	and.w	r3, r3, #6
 800841e:	2b04      	cmp	r3, #4
 8008420:	bf02      	ittt	eq
 8008422:	68e5      	ldreq	r5, [r4, #12]
 8008424:	6833      	ldreq	r3, [r6, #0]
 8008426:	1aed      	subeq	r5, r5, r3
 8008428:	68a3      	ldr	r3, [r4, #8]
 800842a:	bf0c      	ite	eq
 800842c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008430:	2500      	movne	r5, #0
 8008432:	4293      	cmp	r3, r2
 8008434:	bfc4      	itt	gt
 8008436:	1a9b      	subgt	r3, r3, r2
 8008438:	18ed      	addgt	r5, r5, r3
 800843a:	2600      	movs	r6, #0
 800843c:	341a      	adds	r4, #26
 800843e:	42b5      	cmp	r5, r6
 8008440:	d11a      	bne.n	8008478 <_printf_common+0xc8>
 8008442:	2000      	movs	r0, #0
 8008444:	e008      	b.n	8008458 <_printf_common+0xa8>
 8008446:	2301      	movs	r3, #1
 8008448:	4652      	mov	r2, sl
 800844a:	4641      	mov	r1, r8
 800844c:	4638      	mov	r0, r7
 800844e:	47c8      	blx	r9
 8008450:	3001      	adds	r0, #1
 8008452:	d103      	bne.n	800845c <_printf_common+0xac>
 8008454:	f04f 30ff 	mov.w	r0, #4294967295
 8008458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800845c:	3501      	adds	r5, #1
 800845e:	e7c6      	b.n	80083ee <_printf_common+0x3e>
 8008460:	18e1      	adds	r1, r4, r3
 8008462:	1c5a      	adds	r2, r3, #1
 8008464:	2030      	movs	r0, #48	@ 0x30
 8008466:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800846a:	4422      	add	r2, r4
 800846c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008470:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008474:	3302      	adds	r3, #2
 8008476:	e7c7      	b.n	8008408 <_printf_common+0x58>
 8008478:	2301      	movs	r3, #1
 800847a:	4622      	mov	r2, r4
 800847c:	4641      	mov	r1, r8
 800847e:	4638      	mov	r0, r7
 8008480:	47c8      	blx	r9
 8008482:	3001      	adds	r0, #1
 8008484:	d0e6      	beq.n	8008454 <_printf_common+0xa4>
 8008486:	3601      	adds	r6, #1
 8008488:	e7d9      	b.n	800843e <_printf_common+0x8e>
	...

0800848c <_printf_i>:
 800848c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008490:	7e0f      	ldrb	r7, [r1, #24]
 8008492:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008494:	2f78      	cmp	r7, #120	@ 0x78
 8008496:	4691      	mov	r9, r2
 8008498:	4680      	mov	r8, r0
 800849a:	460c      	mov	r4, r1
 800849c:	469a      	mov	sl, r3
 800849e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80084a2:	d807      	bhi.n	80084b4 <_printf_i+0x28>
 80084a4:	2f62      	cmp	r7, #98	@ 0x62
 80084a6:	d80a      	bhi.n	80084be <_printf_i+0x32>
 80084a8:	2f00      	cmp	r7, #0
 80084aa:	f000 80d1 	beq.w	8008650 <_printf_i+0x1c4>
 80084ae:	2f58      	cmp	r7, #88	@ 0x58
 80084b0:	f000 80b8 	beq.w	8008624 <_printf_i+0x198>
 80084b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80084b8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80084bc:	e03a      	b.n	8008534 <_printf_i+0xa8>
 80084be:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80084c2:	2b15      	cmp	r3, #21
 80084c4:	d8f6      	bhi.n	80084b4 <_printf_i+0x28>
 80084c6:	a101      	add	r1, pc, #4	@ (adr r1, 80084cc <_printf_i+0x40>)
 80084c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80084cc:	08008525 	.word	0x08008525
 80084d0:	08008539 	.word	0x08008539
 80084d4:	080084b5 	.word	0x080084b5
 80084d8:	080084b5 	.word	0x080084b5
 80084dc:	080084b5 	.word	0x080084b5
 80084e0:	080084b5 	.word	0x080084b5
 80084e4:	08008539 	.word	0x08008539
 80084e8:	080084b5 	.word	0x080084b5
 80084ec:	080084b5 	.word	0x080084b5
 80084f0:	080084b5 	.word	0x080084b5
 80084f4:	080084b5 	.word	0x080084b5
 80084f8:	08008637 	.word	0x08008637
 80084fc:	08008563 	.word	0x08008563
 8008500:	080085f1 	.word	0x080085f1
 8008504:	080084b5 	.word	0x080084b5
 8008508:	080084b5 	.word	0x080084b5
 800850c:	08008659 	.word	0x08008659
 8008510:	080084b5 	.word	0x080084b5
 8008514:	08008563 	.word	0x08008563
 8008518:	080084b5 	.word	0x080084b5
 800851c:	080084b5 	.word	0x080084b5
 8008520:	080085f9 	.word	0x080085f9
 8008524:	6833      	ldr	r3, [r6, #0]
 8008526:	1d1a      	adds	r2, r3, #4
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	6032      	str	r2, [r6, #0]
 800852c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008530:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008534:	2301      	movs	r3, #1
 8008536:	e09c      	b.n	8008672 <_printf_i+0x1e6>
 8008538:	6833      	ldr	r3, [r6, #0]
 800853a:	6820      	ldr	r0, [r4, #0]
 800853c:	1d19      	adds	r1, r3, #4
 800853e:	6031      	str	r1, [r6, #0]
 8008540:	0606      	lsls	r6, r0, #24
 8008542:	d501      	bpl.n	8008548 <_printf_i+0xbc>
 8008544:	681d      	ldr	r5, [r3, #0]
 8008546:	e003      	b.n	8008550 <_printf_i+0xc4>
 8008548:	0645      	lsls	r5, r0, #25
 800854a:	d5fb      	bpl.n	8008544 <_printf_i+0xb8>
 800854c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008550:	2d00      	cmp	r5, #0
 8008552:	da03      	bge.n	800855c <_printf_i+0xd0>
 8008554:	232d      	movs	r3, #45	@ 0x2d
 8008556:	426d      	negs	r5, r5
 8008558:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800855c:	4858      	ldr	r0, [pc, #352]	@ (80086c0 <_printf_i+0x234>)
 800855e:	230a      	movs	r3, #10
 8008560:	e011      	b.n	8008586 <_printf_i+0xfa>
 8008562:	6821      	ldr	r1, [r4, #0]
 8008564:	6833      	ldr	r3, [r6, #0]
 8008566:	0608      	lsls	r0, r1, #24
 8008568:	f853 5b04 	ldr.w	r5, [r3], #4
 800856c:	d402      	bmi.n	8008574 <_printf_i+0xe8>
 800856e:	0649      	lsls	r1, r1, #25
 8008570:	bf48      	it	mi
 8008572:	b2ad      	uxthmi	r5, r5
 8008574:	2f6f      	cmp	r7, #111	@ 0x6f
 8008576:	4852      	ldr	r0, [pc, #328]	@ (80086c0 <_printf_i+0x234>)
 8008578:	6033      	str	r3, [r6, #0]
 800857a:	bf14      	ite	ne
 800857c:	230a      	movne	r3, #10
 800857e:	2308      	moveq	r3, #8
 8008580:	2100      	movs	r1, #0
 8008582:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008586:	6866      	ldr	r6, [r4, #4]
 8008588:	60a6      	str	r6, [r4, #8]
 800858a:	2e00      	cmp	r6, #0
 800858c:	db05      	blt.n	800859a <_printf_i+0x10e>
 800858e:	6821      	ldr	r1, [r4, #0]
 8008590:	432e      	orrs	r6, r5
 8008592:	f021 0104 	bic.w	r1, r1, #4
 8008596:	6021      	str	r1, [r4, #0]
 8008598:	d04b      	beq.n	8008632 <_printf_i+0x1a6>
 800859a:	4616      	mov	r6, r2
 800859c:	fbb5 f1f3 	udiv	r1, r5, r3
 80085a0:	fb03 5711 	mls	r7, r3, r1, r5
 80085a4:	5dc7      	ldrb	r7, [r0, r7]
 80085a6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80085aa:	462f      	mov	r7, r5
 80085ac:	42bb      	cmp	r3, r7
 80085ae:	460d      	mov	r5, r1
 80085b0:	d9f4      	bls.n	800859c <_printf_i+0x110>
 80085b2:	2b08      	cmp	r3, #8
 80085b4:	d10b      	bne.n	80085ce <_printf_i+0x142>
 80085b6:	6823      	ldr	r3, [r4, #0]
 80085b8:	07df      	lsls	r7, r3, #31
 80085ba:	d508      	bpl.n	80085ce <_printf_i+0x142>
 80085bc:	6923      	ldr	r3, [r4, #16]
 80085be:	6861      	ldr	r1, [r4, #4]
 80085c0:	4299      	cmp	r1, r3
 80085c2:	bfde      	ittt	le
 80085c4:	2330      	movle	r3, #48	@ 0x30
 80085c6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80085ca:	f106 36ff 	addle.w	r6, r6, #4294967295
 80085ce:	1b92      	subs	r2, r2, r6
 80085d0:	6122      	str	r2, [r4, #16]
 80085d2:	f8cd a000 	str.w	sl, [sp]
 80085d6:	464b      	mov	r3, r9
 80085d8:	aa03      	add	r2, sp, #12
 80085da:	4621      	mov	r1, r4
 80085dc:	4640      	mov	r0, r8
 80085de:	f7ff fee7 	bl	80083b0 <_printf_common>
 80085e2:	3001      	adds	r0, #1
 80085e4:	d14a      	bne.n	800867c <_printf_i+0x1f0>
 80085e6:	f04f 30ff 	mov.w	r0, #4294967295
 80085ea:	b004      	add	sp, #16
 80085ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085f0:	6823      	ldr	r3, [r4, #0]
 80085f2:	f043 0320 	orr.w	r3, r3, #32
 80085f6:	6023      	str	r3, [r4, #0]
 80085f8:	4832      	ldr	r0, [pc, #200]	@ (80086c4 <_printf_i+0x238>)
 80085fa:	2778      	movs	r7, #120	@ 0x78
 80085fc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008600:	6823      	ldr	r3, [r4, #0]
 8008602:	6831      	ldr	r1, [r6, #0]
 8008604:	061f      	lsls	r7, r3, #24
 8008606:	f851 5b04 	ldr.w	r5, [r1], #4
 800860a:	d402      	bmi.n	8008612 <_printf_i+0x186>
 800860c:	065f      	lsls	r7, r3, #25
 800860e:	bf48      	it	mi
 8008610:	b2ad      	uxthmi	r5, r5
 8008612:	6031      	str	r1, [r6, #0]
 8008614:	07d9      	lsls	r1, r3, #31
 8008616:	bf44      	itt	mi
 8008618:	f043 0320 	orrmi.w	r3, r3, #32
 800861c:	6023      	strmi	r3, [r4, #0]
 800861e:	b11d      	cbz	r5, 8008628 <_printf_i+0x19c>
 8008620:	2310      	movs	r3, #16
 8008622:	e7ad      	b.n	8008580 <_printf_i+0xf4>
 8008624:	4826      	ldr	r0, [pc, #152]	@ (80086c0 <_printf_i+0x234>)
 8008626:	e7e9      	b.n	80085fc <_printf_i+0x170>
 8008628:	6823      	ldr	r3, [r4, #0]
 800862a:	f023 0320 	bic.w	r3, r3, #32
 800862e:	6023      	str	r3, [r4, #0]
 8008630:	e7f6      	b.n	8008620 <_printf_i+0x194>
 8008632:	4616      	mov	r6, r2
 8008634:	e7bd      	b.n	80085b2 <_printf_i+0x126>
 8008636:	6833      	ldr	r3, [r6, #0]
 8008638:	6825      	ldr	r5, [r4, #0]
 800863a:	6961      	ldr	r1, [r4, #20]
 800863c:	1d18      	adds	r0, r3, #4
 800863e:	6030      	str	r0, [r6, #0]
 8008640:	062e      	lsls	r6, r5, #24
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	d501      	bpl.n	800864a <_printf_i+0x1be>
 8008646:	6019      	str	r1, [r3, #0]
 8008648:	e002      	b.n	8008650 <_printf_i+0x1c4>
 800864a:	0668      	lsls	r0, r5, #25
 800864c:	d5fb      	bpl.n	8008646 <_printf_i+0x1ba>
 800864e:	8019      	strh	r1, [r3, #0]
 8008650:	2300      	movs	r3, #0
 8008652:	6123      	str	r3, [r4, #16]
 8008654:	4616      	mov	r6, r2
 8008656:	e7bc      	b.n	80085d2 <_printf_i+0x146>
 8008658:	6833      	ldr	r3, [r6, #0]
 800865a:	1d1a      	adds	r2, r3, #4
 800865c:	6032      	str	r2, [r6, #0]
 800865e:	681e      	ldr	r6, [r3, #0]
 8008660:	6862      	ldr	r2, [r4, #4]
 8008662:	2100      	movs	r1, #0
 8008664:	4630      	mov	r0, r6
 8008666:	f7f7 fddb 	bl	8000220 <memchr>
 800866a:	b108      	cbz	r0, 8008670 <_printf_i+0x1e4>
 800866c:	1b80      	subs	r0, r0, r6
 800866e:	6060      	str	r0, [r4, #4]
 8008670:	6863      	ldr	r3, [r4, #4]
 8008672:	6123      	str	r3, [r4, #16]
 8008674:	2300      	movs	r3, #0
 8008676:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800867a:	e7aa      	b.n	80085d2 <_printf_i+0x146>
 800867c:	6923      	ldr	r3, [r4, #16]
 800867e:	4632      	mov	r2, r6
 8008680:	4649      	mov	r1, r9
 8008682:	4640      	mov	r0, r8
 8008684:	47d0      	blx	sl
 8008686:	3001      	adds	r0, #1
 8008688:	d0ad      	beq.n	80085e6 <_printf_i+0x15a>
 800868a:	6823      	ldr	r3, [r4, #0]
 800868c:	079b      	lsls	r3, r3, #30
 800868e:	d413      	bmi.n	80086b8 <_printf_i+0x22c>
 8008690:	68e0      	ldr	r0, [r4, #12]
 8008692:	9b03      	ldr	r3, [sp, #12]
 8008694:	4298      	cmp	r0, r3
 8008696:	bfb8      	it	lt
 8008698:	4618      	movlt	r0, r3
 800869a:	e7a6      	b.n	80085ea <_printf_i+0x15e>
 800869c:	2301      	movs	r3, #1
 800869e:	4632      	mov	r2, r6
 80086a0:	4649      	mov	r1, r9
 80086a2:	4640      	mov	r0, r8
 80086a4:	47d0      	blx	sl
 80086a6:	3001      	adds	r0, #1
 80086a8:	d09d      	beq.n	80085e6 <_printf_i+0x15a>
 80086aa:	3501      	adds	r5, #1
 80086ac:	68e3      	ldr	r3, [r4, #12]
 80086ae:	9903      	ldr	r1, [sp, #12]
 80086b0:	1a5b      	subs	r3, r3, r1
 80086b2:	42ab      	cmp	r3, r5
 80086b4:	dcf2      	bgt.n	800869c <_printf_i+0x210>
 80086b6:	e7eb      	b.n	8008690 <_printf_i+0x204>
 80086b8:	2500      	movs	r5, #0
 80086ba:	f104 0619 	add.w	r6, r4, #25
 80086be:	e7f5      	b.n	80086ac <_printf_i+0x220>
 80086c0:	08009de1 	.word	0x08009de1
 80086c4:	08009df2 	.word	0x08009df2

080086c8 <_sbrk_r>:
 80086c8:	b538      	push	{r3, r4, r5, lr}
 80086ca:	4d06      	ldr	r5, [pc, #24]	@ (80086e4 <_sbrk_r+0x1c>)
 80086cc:	2300      	movs	r3, #0
 80086ce:	4604      	mov	r4, r0
 80086d0:	4608      	mov	r0, r1
 80086d2:	602b      	str	r3, [r5, #0]
 80086d4:	f7fa f906 	bl	80028e4 <_sbrk>
 80086d8:	1c43      	adds	r3, r0, #1
 80086da:	d102      	bne.n	80086e2 <_sbrk_r+0x1a>
 80086dc:	682b      	ldr	r3, [r5, #0]
 80086de:	b103      	cbz	r3, 80086e2 <_sbrk_r+0x1a>
 80086e0:	6023      	str	r3, [r4, #0]
 80086e2:	bd38      	pop	{r3, r4, r5, pc}
 80086e4:	20000f2c 	.word	0x20000f2c

080086e8 <_realloc_r>:
 80086e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086ec:	4607      	mov	r7, r0
 80086ee:	4614      	mov	r4, r2
 80086f0:	460d      	mov	r5, r1
 80086f2:	b921      	cbnz	r1, 80086fe <_realloc_r+0x16>
 80086f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80086f8:	4611      	mov	r1, r2
 80086fa:	f7ff bc75 	b.w	8007fe8 <_malloc_r>
 80086fe:	b92a      	cbnz	r2, 800870c <_realloc_r+0x24>
 8008700:	f7ff fc06 	bl	8007f10 <_free_r>
 8008704:	4625      	mov	r5, r4
 8008706:	4628      	mov	r0, r5
 8008708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800870c:	f000 f81a 	bl	8008744 <_malloc_usable_size_r>
 8008710:	4284      	cmp	r4, r0
 8008712:	4606      	mov	r6, r0
 8008714:	d802      	bhi.n	800871c <_realloc_r+0x34>
 8008716:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800871a:	d8f4      	bhi.n	8008706 <_realloc_r+0x1e>
 800871c:	4621      	mov	r1, r4
 800871e:	4638      	mov	r0, r7
 8008720:	f7ff fc62 	bl	8007fe8 <_malloc_r>
 8008724:	4680      	mov	r8, r0
 8008726:	b908      	cbnz	r0, 800872c <_realloc_r+0x44>
 8008728:	4645      	mov	r5, r8
 800872a:	e7ec      	b.n	8008706 <_realloc_r+0x1e>
 800872c:	42b4      	cmp	r4, r6
 800872e:	4622      	mov	r2, r4
 8008730:	4629      	mov	r1, r5
 8008732:	bf28      	it	cs
 8008734:	4632      	movcs	r2, r6
 8008736:	f7ff fbdd 	bl	8007ef4 <memcpy>
 800873a:	4629      	mov	r1, r5
 800873c:	4638      	mov	r0, r7
 800873e:	f7ff fbe7 	bl	8007f10 <_free_r>
 8008742:	e7f1      	b.n	8008728 <_realloc_r+0x40>

08008744 <_malloc_usable_size_r>:
 8008744:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008748:	1f18      	subs	r0, r3, #4
 800874a:	2b00      	cmp	r3, #0
 800874c:	bfbc      	itt	lt
 800874e:	580b      	ldrlt	r3, [r1, r0]
 8008750:	18c0      	addlt	r0, r0, r3
 8008752:	4770      	bx	lr

08008754 <_init>:
 8008754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008756:	bf00      	nop
 8008758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800875a:	bc08      	pop	{r3}
 800875c:	469e      	mov	lr, r3
 800875e:	4770      	bx	lr

08008760 <_fini>:
 8008760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008762:	bf00      	nop
 8008764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008766:	bc08      	pop	{r3}
 8008768:	469e      	mov	lr, r3
 800876a:	4770      	bx	lr
